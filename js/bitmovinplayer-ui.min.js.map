{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ts/arrayutils.ts","src/ts/audiotrackutils.ts","src/ts/browserutils.ts","src/ts/components/adclickoverlay.ts","src/ts/components/admessagelabel.ts","src/ts/components/adskipbutton.ts","src/ts/components/advisory.ts","src/ts/components/airplaytogglebutton.ts","src/ts/components/audioqualityselectbox.ts","src/ts/components/audiotracklistbox.ts","src/ts/components/audiotrackselectbox.ts","src/ts/components/britboxhugeplaybacktogglebutton.ts","src/ts/components/britboxlistbox.ts","src/ts/components/britboxplaybacktoggleoverlay.ts","src/ts/components/bufferingoverlay.ts","src/ts/components/button.ts","src/ts/components/caststatusoverlay.ts","src/ts/components/casttogglebutton.ts","src/ts/components/castuicontainer.ts","src/ts/components/clickoverlay.ts","src/ts/components/closebutton.ts","src/ts/components/component.ts","src/ts/components/container.ts","src/ts/components/controlbar.ts","src/ts/components/controls.ts","src/ts/components/customclosebutton.ts","src/ts/components/errormessageoverlay.ts","src/ts/components/forward.ts","src/ts/components/fullscreentogglebutton.ts","src/ts/components/hugeplaybacktogglebutton.ts","src/ts/components/hugereplaybutton.ts","src/ts/components/itemselectionlist.ts","src/ts/components/label.ts","src/ts/components/listbox.ts","src/ts/components/listselector.ts","src/ts/components/loadingoverlay.ts","src/ts/components/metadataadvisory.ts","src/ts/components/metadatalabel.ts","src/ts/components/pictureinpicturetogglebutton.ts","src/ts/components/playbackspeedselectbox.ts","src/ts/components/playbacktimelabel.ts","src/ts/components/playbacktogglebutton.ts","src/ts/components/playbacktoggleoverlay.ts","src/ts/components/playbutton.ts","src/ts/components/recommendationoverlay.ts","src/ts/components/replaybutton.ts","src/ts/components/rewind.ts","src/ts/components/seekbar.ts","src/ts/components/seekbarbufferlevel.ts","src/ts/components/seekbarcontroller.ts","src/ts/components/seekbarlabel.ts","src/ts/components/selectbox.ts","src/ts/components/settingspanel.ts","src/ts/components/settingspanelitem.ts","src/ts/components/settingspanelpage.ts","src/ts/components/settingspanelpagebackbutton.ts","src/ts/components/settingspanelpagenavigatorbutton.ts","src/ts/components/settingspanelpageopenbutton.ts","src/ts/components/settingstogglebutton.ts","src/ts/components/spacer.ts","src/ts/components/subtitlelistbox.ts","src/ts/components/subtitleoverlay.ts","src/ts/components/subtitleselectbox.ts","src/ts/components/subtitlesettings/backgroundcolorselectbox.ts","src/ts/components/subtitlesettings/backgroundopacityselectbox.ts","src/ts/components/subtitlesettings/characteredgeselectbox.ts","src/ts/components/subtitlesettings/closecaptionslistbox.ts","src/ts/components/subtitlesettings/fontcolorselectbox.ts","src/ts/components/subtitlesettings/fontfamilyselectbox.ts","src/ts/components/subtitlesettings/fontopacityselectbox.ts","src/ts/components/subtitlesettings/fontsizelistbox.ts","src/ts/components/subtitlesettings/fontsizeselectbox.ts","src/ts/components/subtitlesettings/subtitleclosecaptionslistbox.ts","src/ts/components/subtitlesettings/subtitleclosedcaptionsmanager.ts","src/ts/components/subtitlesettings/subtitlesettinglistbox.ts","src/ts/components/subtitlesettings/subtitlesettingselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingslabel.ts","src/ts/components/subtitlesettings/subtitlesettingsmanager.ts","src/ts/components/subtitlesettings/subtitlesettingspanelpage.ts","src/ts/components/subtitlesettings/subtitlesettingsresetbutton.ts","src/ts/components/subtitlesettings/windowcolorselectbox.ts","src/ts/components/subtitlesettings/windowopacityselectbox.ts","src/ts/components/timelinemarkershandler.ts","src/ts/components/titlebar.ts","src/ts/components/togglebutton.ts","src/ts/components/uicontainer.ts","src/ts/components/videoqualityselectbox.ts","src/ts/components/volumecontrolbutton.ts","src/ts/components/volumeslider.ts","src/ts/components/volumetogglebutton.ts","src/ts/components/vrtogglebutton.ts","src/ts/components/watermark.ts","src/ts/demofactory.ts","src/ts/dom.ts","src/ts/errorutils.ts","src/ts/eventdispatcher.ts","src/ts/focusvisibilitytracker.ts","src/ts/groupplaybackapi.ts","src/ts/guid.ts","src/ts/imageloader.ts","src/ts/localization/i18n.ts","src/ts/localization/languages/de.json","src/ts/localization/languages/en.json","src/ts/localization/languages/es.json","src/ts/main.ts","src/ts/mobilev3playerapi.ts","src/ts/playerutils.ts","src/ts/spatialnavigation/ListNavigationGroup.ts","src/ts/spatialnavigation/gethtmlelementsfromcomponents.ts","src/ts/spatialnavigation/keymap.ts","src/ts/spatialnavigation/navigationalgorithm.ts","src/ts/spatialnavigation/navigationgroup.ts","src/ts/spatialnavigation/nodeeventsubscriber.ts","src/ts/spatialnavigation/rootnavigationgroup.ts","src/ts/spatialnavigation/seekbarhandler.ts","src/ts/spatialnavigation/spatialnavigation.ts","src/ts/spatialnavigation/typeguards.ts","src/ts/spatialnavigation/types.ts","src/ts/storageutils.ts","src/ts/stringutils.ts","src/ts/subtitleutils.ts","src/ts/subtitleutilsbritbox.ts","src/ts/timeout.ts","src/ts/uifactory.ts","src/ts/uimanager.ts","src/ts/uiutils.ts","src/ts/volumecontroller.ts","src/ts/vttutils.ts"],"names":["f","g","exports","module","define","amd","window","global","self","this","bitmovin","playerui","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","ArrayUtils","remove","array","item","index","indexOf","splice","i18n_1","AudioTrackSwitchHandler","player","element","uimanager","_this","addAudioTrack","event","audioTrack","track","listElement","hasItem","id","addItem","i18n","getLocalizer","label","removeAudioTrack","removeItem","selectCurrentAudioTrack","currentAudioTrack","getAudio","selectItem","refreshAudioTracks","audioTracks","getAvailableAudio","synchronizeItems","map","key","bindSelectionEvent","bindPlayerEvents","prototype","onItemSelected","subscribe","_","value","setAudio","on","PlayerEvent","AudioChanged","SourceUnloaded","PeriodSwitched","AudioAdded","AudioRemoved","getConfig","events","onUpdated","BrowserUtils","Object","defineProperty","windowExists","navigator","userAgent","test","isHisense","platform","includes","maxTouchPoints","msMaxTouchPoints","_super","clickoverlay_1","AdClickOverlay","ClickOverlay","__extends","configure","adFinishedHandler","setUrl","clickThroughCallback","AdStarted","ad","clickThroughUrl","clickThroughUrlOpened","AdFinished","AdSkipped","AdError","onClick","pause","label_1","stringutils_1","AdMessageLabel","Label","adEndHandler","off","TimeChanged","updateMessageHandler","config","text","setText","StringUtils","replaceAdMessagePlaceholders","performLocalization","uiConfig","message","mergeConfig","cssClass","button_1","AdSkipButton","Button","updateSkipMessageHandler","untilSkippableMessage","skippableMessage","skipOffset","show","getCurrentTime","disable","enable","skippableAfter","hide","ads","skip","container_1","timeout_1","Advisory","Container","overlayShowTimeout","Timeout","showDelayMs","overlayHideTimeout","hideDelayMs","onLoadingHide","start","onLoadingShow","clear","hidden","togglebutton_1","AirPlayToggleButton","ToggleButton","airPlayAvailableHandler","isAirplayAvailable","showAirplayTargetPicker","console","log","airPlayChangedHandler","isAirplayActive","AirplayAvailable","AirplayChanged","selectbox_1","AudioQualitySelectBox","SelectBox","updateAudioQualities","audioQualities","getAvailableAudioQualities","clearItems","_i","audioQualities_1","audioQuality","selectCurrentAudioQuality","getAudioQuality","sender","setAudioQuality","AudioQualityChanged","AudioQualityAdded","AudioQualityRemoved","cssClasses","listbox_1","audiotrackutils_1","AudioTrackListBox","ListBox","AudioTrackSelectBox","playbacktogglebutton_1","dom_1","BritboxHugePlaybackToggleButton","PlaybackToggleButton","togglePlayback","isPlaying","isPlayInitiated","getUI","hideUi","showUi","toggleFullscreen","getViewMode","ViewMode","Fullscreen","setViewMode","Inline","suppressPlayButtonTransitionAnimation","setTransitionAnimationsEnabled","onToggle","subscribeOnce","firstPlay","clickTime","doubleClickTime","isAutoplayEnabled","now","Date","setTimeout","Play","Warning","WarningCode","PLAYBACK_COULD_NOT_BE_STARTED","playback","Boolean","autoplay","isAutoplayUpcoming","getSource","toDomElement","buttonElement","append","DOM","class","prefixCss","enabled","noTransitionAnimationsClass","getDomElement","removeClass","hasClass","addClass","role","ariaLabel","listselector_1","arrayutils_1","BritboxListBox","ListSelector","onItemAdded","addListBoxDomItem","onItemRemoved","removeListBoxDomItem","refreshSelectedItem","listBoxElement","getCssClasses","createListBoxDomItems","empty","components","_a","items","buildListBoxItemButton","listItem","ListBoxItemButton","getComponentForKey","find","c","component","listBoxItemButton_1","newItem","getItemForKey","handleSelectionChange","push","String","selectedItem","onItemSelectedEvent","onClass","offClass","britboxhugeplaybacktogglebutton_1","BritboxPlaybackToggleOverlay","playbackToggleButton","component_1","BufferingOverlay","showOverlay","hideOverlay","StallStarted","StallEnded","Playing","Paused","Seek","Seeked","TimeShift","TimeShifted","isStalled","indicators","Component","tag","eventdispatcher_1","buttonElementAttributes","aria-label","type","aria-pressed","tabindex","tabIndex","toString","html","onClickEvent","buttonEvents","dispatch","getEvent","EventDispatcher","CastStatusOverlay","CastWaitingForDevice","castDeviceName","castPayload","deviceName","statusLabel","CastStarted","CastStopped","CastToggleButton","castAvailableHander","isCastAvailable","isCasting","castStop","castVideo","CastAvailable","uicontainer_1","CastUIContainer","UIContainer","isUiShown","castUiHideTimeout","hideDelay","onControlsHide","onControlsShow","showUiPermanently","showUiWithTimeout","release","initialize","url","data","open","getUrl","undefined","CloseButton","target","isPaused","play","guid_1","disabled","isHidden","isDisabled","onShow","onComponentShow","onHide","onComponentHide","onHoverChangedEvent","hasDomElement","setAriaLabel","setAriaAttr","name","attr","concat","defaults","base","assign","css","join","trim","cssClassOrId","cssPrefix","CLASS_HIDDEN","onHideEvent","onShowEvent","isShown","toggleHidden","CLASS_DISABLED","onDisabledEvent","onEnabledEvent","isEnabled","isHovered","hovered","componentEvents","onEnabled","onDisabled","onHoverChanged","Guid","next","addComponent","componentsToAdd","removeComponent","componentsToRemove","getComponents","removeComponents","slice","updateComponents","shift","innerContainerElement","containerElement","innerContainer","initialComponent","uiutils_1","spacer_1","browserutils_1","settingspanel_1","ControlBar","hoverStackCount","isSettingsPanelShown","disableAutoHideWhenHovered","isMobile","UIUtils","traverseTree","Spacer","args","SettingsPanel","onPreviewControlsHide","cancel","Controls","shouldBeShown","keepHiddenWithoutMetadata","CustomCloseButton","customMessageHandler","result","sendSynchronous","sendAsynchronous","errorutils_1","mobilev3playerapi_1","ErrorMessageOverlay","errorEventHandler","handleErrorMessage","customizedMessage","errorMessages","customMessage","messages","display","isMobileV3PlayerAPI","MobileV3PlayerEvent","PlayerError","ErrorUtils","defaultMobileV3ErrorMessageTranslator","SourceError","defaultWebErrorMessageTranslator","SourceLoaded","errorMessage","errorLabel","ForwardButton","FullscreenToggleButton","fullscreenStateHandler","fullscreenAvailabilityChangedHandler","isFullScreenAvailable","isViewModeAvailable","ViewModeChanged","ViewModeAvailabilityChanged","targetViewMode","HugePlaybackToggleButton","enterFullscreenOnInitialPlayback","HugeReplayButton","ItemSelectionList","isActive","updateDomItems","selectedValue","selectedListItem","CLASS_SELECTED","deselectItem","this_1","onItemAddedEvent","onItemRemovedEvent","tagName","for","labelElement","localizedText","onTextChangedEvent","getText","clearText","isEmpty","labelEvents","onTextChanged","getItemIndex","parseInt","getItems","sortedInsert","__assign","filter","translator","findIndex","entry","getSelectedItem","newItems","forEach","items_1","itemCount","keys","listSelectorEvents","LoadingOverlay","hideLoading","showLoading","indicator","MetadataAdvisoryContent","MetadataAdvisory","init","advisory","metadata","_b","_c","JSON","parse","_d","NativeMap","_e","advisoryClassification","_f","advisoryDescription","content","Classification","Description","notRatedOrDescription","toLowerCase","MetadataLabelContent","MetadataLabel","Title","uiconfig","title","description","PictureInPictureToggleButton","pictureInPictureStateHandler","PictureInPicture","pictureInPictureAvailabilityChangedHandler","isPictureInPictureAvailable","PlaybackSpeedSelectBox","setDefaultValue","playbackSpeed","getPlaybackSpeed","setSpeed","addDefaultItems","setPlaybackSpeed","parseFloat","PlaybackSpeedChanged","speed","customItems","defaultPlaybackSpeeds","sort","PlaybackTimeLabelMode","playerutils_1","PlaybackTimeLabel","minWidth","min-width","timeFormat","Math","abs","isLive","getMaxTimeShift","getDuration","FORMAT_HHMMSS","FORMAT_MMSS","playbackTimeHandler","live","liveCssClass","liveEdgeCssClass","liveClickHandler","timeShift","updateLiveTimeshiftState","isTimeshifted","isTimeshiftAvailable","getTimeShift","liveStreamDetector","PlayerUtils","LiveStreamDetector","onLiveChanged","hideInLivePlayback","unsubscribe","detect","Infinity","setTime","getCurrentTimeRelativeToSeekableRange","width","playbackSeconds","durationSeconds","currentTime","secondsToTime","totalTime","timeLabelMode","CurrentTime","TotalTime","CurrentAndTotalTime","RemainingTime","remainingTime","setTimeFormat","handleClickEvent","playbackStateHandler","isSeeking","updateLiveState","isTimeShiftAvailable","CLASS_STOPTOGGLE","timeShiftDetector","PlaybackFinished","TimeShiftAvailabilityDetector","onTimeShiftAvailabilityChanged","onSeek","onSeeked","onAriaLabel","offAriaLabel","hugeplaybacktogglebutton_1","PlaybackToggleOverlay","PlayButton","hugereplaybutton_1","RecommendationOverlay","setupRecommendations","clearRecommendations","recommendations","recommendations_1","RecommendationItem","itemConfig","replayButton","itemElement","href","background-image","thumbnail","bgElement","titleElement","timeElement","duration","ReplayButton","hasEnded","seek","RewindButton","groupplaybackapi_1","seekbarcontroller_1","timelinemarkershandler_1","seekbarbufferlevel_1","SeekBar","hasLabel","getLabel","setAriaSliderMinMax","min","max","setAriaSliderValues","ariaValueText","seekBarType","SeekBarType","Live","timeshiftValue","ceil","Vod","secondsToText","floor","getPlaybackPositionPercentage","getRelativeCurrentTime","updateBufferLevel","playbackPositionPercentage","bufferLoadedPercentageLevel","getMinBufferLevel","setBufferPosition","configureSeek","scrubbing","isPlayerSeeking","suspension","playbackPositionHandler","isGroupPlaybackAPIAvailable","hasTimeShift","switchVisibility","setPosition","seekBarBackdrop","SeekBarController","keyStepIncrements","volumeController","setSeekBarControls","forceUpdate","isUserSeeking","SegmentRequestFinished","setPlaybackPosition","isInInitialStartupState","smoothPlaybackPositionUpdateIntervalMs","SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED","isNeitherPausedNorPlaying","Ready","configureLivePausedTimeshiftUpdater","onPlayerSeek","setSeeking","onPlayerSeeked","groupPlayback","hasJoined","beginSuspension","GroupPlaybackSuspensionReason","UserIsScrubbing","onSeekPreview","enableSeekPreview","subscribeRateLimited","seekWhileScrubbing","percentage","proposedPlaybackTime","getTargetSeekPosition","endSuspension","refreshPlaybackPosition","smoothPlaybackPositionUpdater","timeShiftAvailable","PlayerResized","onConfigured","seekbarSnappingRange","snappingRange","setSeekPosition","configureSmoothPlaybackPositionUpdater","initializeTimelineMarkers","Volume","timelineMarkerConfig","timelineMarkersHandler","TimelineMarkersHandler","seekBar","seekBarMarkersContainer","pausedTimeshiftUpdater","startSmoothPlaybackPositionUpdater","currentTimeSeekBar","stopSmoothPlaybackPositionUpdater","currentTimePlayer","updateIntervalMs","error","PlayerAPINotAvailableError","currentTimeDelta","seekBarContainer","vertical","seekBarBufferLevel","seekBarPlaybackPosition","seekBarBufferPosition","seekBarPlaybackPositionMarker","seekBarSeekPosition","seekBarChapterMarkersContainer","seeking","mouseTouchMoveHandler","preventDefault","vr","stopPropagation","targetPercentage","getOffset","onSeekPreviewEvent","mouseTouchUpHandler","document","snappedChapter","getMarkerAtPosition","onSeekedEvent","position","isTouchEvent","isTouchSupported","onSeekEvent","getHorizontalOffset","eventPageX","elementOffsetPx","offset","left","widthPx","sanitizeOffset","getVerticalOffset","eventPageY","top","height","changedTouches","touches","pageY","pageX","MouseEvent","warn","percent","px","style","transform","-ms-transform","-webkit-transform","scale","CLASS_SEEKING","seekBarEvents","snappedMarker","seekPositionPercentage","marker","TouchEvent","seekableRangeStart","maxTimeShift","getSeekableRangeStart","targetPlaybackPosition","leftRight","upDown","playerDuration","videoBufferLength","getVideoBufferLength","audioBufferLength","getAudioBufferLength","bufferLength","Number","MAX_VALUE","coerceValueIntoRange","range","cb","arrowKeyControls","currentValue","valueUpdate","controlValue","right","up","down","home","end","seekBarControls","volumeTransition","startTransition","getVolume","finish","bind","domElement","controls","keyCode","KeyCode","LeftArrow","RightArrow","UpArrow","DownArrow","Home","End","Space","imageloader_1","SeekBarLabel","setTitleText","setThumbnail","uiManager","handleSeekPreview","timeLabel","seconds","titleLabel","thumbnailElement","thumbnailImageLoader","load","x","thumbnailCssSprite","thumbnailCssSingleImage","sizeX","sizeY","offsetX","offsetY","y","aspectRatio","padding-bottom","background-size","background-position","appliedMarkerCssClasses","targetTimeShift","currentTimeShift","timeShiftPreview","wallClockTime","getThumbnail","time","ImageLoader","selectElement","val","optionElement","NavigationDirection","settingspanelpage_1","hideHoveredSelectBoxes","hideTimeout","reset","activePage","onInactiveEvent","resetNavigation","onActiveEvent","getRootPage","onSettingsStateChanged","onSettingsStateChangedEvent","updateActivePageClass","getActivePage","setActivePageIndex","setActivePage","getPages","targetPage","navigateToPage","Forwards","pageTransitionAnimation","popToRootSettingsPanelPage","popSettingsPanelPage","navigationStack","Backwards","rootPageHasActiveSettings","hasActiveSettings","SettingsPanelPage","settingsPanelEvents","page","CLASS_ACTIVE_PAGE","resetNavigationOnShow","sourcePage","rootPage","animateNavigation","direction","skipAnimation","pop","settingsPanelDomElement","settingsPanelWidth","settingsPanelHeight","clone","targetSettingsPanelHeight","settingsPanelHTMLElement","get","scrollWidth","scrollHeight","targetPageHtmlElement","cloneNode","parentNode","appendChild","targetSettingsPanelWidth","parentElement","removeChild","forceBrowserReflow","offsetLeft","getComputedItems","selectBox_1","oldDisplay_1","setting","requestAnimationFrame","allItems","apply","videoqualityselectbox_1","audioqualityselectbox_1","playbackspeedselectbox_1","SettingsPanelItem","handleConfigItemChanged","minItemsToDisplay","VideoQualitySelectBox","hasAutoItem","playbackSpeedSelectionEnabled","onActiveChangedEvent","settingsPanelItemEvents","onActiveChanged","settingspanelitem_1","settingsStateChangedHandler","lastShownItem","CLASS_LAST","settingsPanelPageEvents","activeItems","onActive","isIOS","isMacIntel","focusToFirstInput","onInactive","settingspanelpagenavigatorbutton_1","SettingsPanelPageBackButton","SettingsPanelPageNavigatorButton","popPage","container","pushTargetPage","SettingsPanelPageOpenButton","SettingsToggleButton","settingsPanel","visibleSettingsPanels","autoHideWhenNoActiveSettings","settingsPanelItemsChangedHandler","subtitleutils_1","SubtitleListBox","SubtitleSwitchHandler","controlbar_1","vttutils_1","SubtitleOverlay","subtitleClearHandler","subtitleContainerManager","subtitleManager","clearInactiveCues","toRemove","removeLabel","ActiveSubtitleManager","SubtitleRegionContainerManager","CueEnter","generateLabel","cueEnter","preprocessLabelEventCallback","previewSubtitleActive","previewSubtitle","addLabel","size","forceSubtitlesIntoViewContainer","handleSubtitleCropping","CueUpdate","labelToReplace","cueUpdate","replaceLabel","CueExit","labelToRemove","cueExit","hasCues","SubtitleEnabled","SubtitleDisabled","CLASS_CONTROLBAR_VISIBLE","configureCea608Captions","detectCroppedSubtitleLabel","parent","childRect","getBoundingClientRect","parentRect","bottom","labelDomElement","cropDetection","removeCss","row","column","SubtitleLabel","generateImageTagText","image","vtt","region","regionStyle","updateCEA608FontSize","dummyLabel","font-size","line-height","visibility","dummyLabelCharWidth","dummyLabelCharHeight","fontSizeRatio","subtitleOverlayWidth","subtitleOverlayHeight","fontLetterSpacing","CEA608_NUM_COLUMNS","CEA608_NUM_ROWS","fontSize","letter-spacing","CLASS_CEA_608","fontSizeCalculationRequired","CEA608_COLUMN_OFFSET","CEA608_ROW_OFFSET","enablePreviewSubtitleLabel","removePreviewSubtitleLabel","calculateId","addCueToMap","popCueFromMap","activeSubtitleCueMap","activeSubtitleCueCount","activeSubtitleCues","activeSubtitleCue","removedCues","cue","imageData","imgTag","src","outerHTML","getCues","cueCount","getRegion","regionContainerId","regionName","overlaySize","subtitleRegionContainers","regionContainerId_1","regionContainer","SubtitleRegionContainer","subtitleOverlay","previousLabel","newLabel","labelToAdd","labelCount","VttUtils","setVttRegionStyles","setVttCueBoxStyles","SubtitleSelectBox","subtitlesettingselectbox_1","BackgroundColorSelectBox","SubtitleSettingSelectBox","setColorAndOpacity","settingsManager","backgroundColor","isSet","backgroundOpacity","toggleOverlayClass","onChanged","property","BackgroundOpacitySelectBox","CharacterEdgeSelectBox","characterEdge","subtitleclosecaptionslistbox_1","subtitleutilsbritbox_1","CloseCaptionsListBox","SubtitleCloseCaptionsListBox","closedCaptions","FontColorSelectBox","fontColor","fontOpacity","FontFamilySelectBox","fontFamily","FontOpacitySelectBox","subtitlesettinglistbox_1","FontSizeListBox","SubtitleSettingListBox","FontSizeSelectBox","britboxlistbox_1","currentCssClass","overlay","storageutils_1","SubtitleClosedCaptionsManager","propertyName","_properties","SubtitleClosedCaptionsProperty","userSettings","localStorageKey","DummyComponent","instance","save","StorageUtils","setObject","getObject","_instance","_value","onChangedEvent","_onChanged","_manager","manager","SubtitleSettingsLabel","opener","SubtitleSettingsManager","SubtitleSettingsProperty","windowColor","windowOpacity","subtitlesettingsmanager_1","fontsizeselectbox_1","fontfamilyselectbox_1","fontcolorselectbox_1","fontopacityselectbox_1","characteredgeselectbox_1","backgroundcolorselectbox_1","backgroundopacityselectbox_1","windowcolorselectbox_1","windowopacityselectbox_1","subtitlesettingsresetbutton_1","settingspanelpagebackbutton_1","SubtitleSettingsPanelPage","WindowColorSelectBox","WindowOpacitySelectBox","SubtitleSettingsResetButton","getSeekBarWidth","markersContainer","timelineMarkers","configureMarkers","clearMarkers","AdBreakStarted","AdBreakFinished","updateMarkers","updateMarkersDOM","onRelease","intervalMarkerMatch","positionMarkerMatch","removeMarkerFromConfig","markers","_marker","filterRemovedMarkers","seekbarMarker","matchingMarker","removeMarkerFromDOM","shouldProcessMarkers","validToProcess","hasMarkers","markerPosition","markerDuration","getSeekableRangeRespectingLive","isNaN","updateMarkerDOM","newMarker","createMarkerDOM","getMarkerCssProperties","seekBarWidthPx","positionInPx","cssProperties","markerWidthPx","round","imageElement_1","markerClasses","markerElement","data-marker-time","data-marker-title","imageUrl","handler","Destroy","metadatalabel_1","TitleBar","hasMetadataText","errorOccured","checkMetadataTextAndUpdateVisibility","checkErrorVisibility","keepWithError","isOff","onState","onToggleEvent","onToggleOnEvent","isOn","onToggleOffEvent","toggle","toggleButtonEvents","onToggleOn","onToggleOff","userInteractionEventSource","configureUIShowHide","configurePlayerStates","isFirstTouch","isShowLoading","playerState","hidingPrevented","hidePlayerStateExceptions","uiHideTimeout","previewHideEventArgs","userInteractionEvents","playerStateChange","state","enumName","stateClassNames","PlayerState","STATE_PREFIX","updateState","removeStates","updateLayoutSizeClasses","Idle","Prepared","Finished","getState","FULLSCREEN","BUFFERING","REMOTE_CONTROL","CONTROLS_HIDDEN","CONTROLS_SHOWN","substring","getContainer","createElement","flex","updateVideoQualities","videoQualities","getAvailableVideoQualities","hasAuto","getStreamType","videoQualities_1","videoQuality","selectCurrentVideoQuality","getVideoQuality","setVideoQuality","VideoQualityChanged","VideoQualityAdded","VideoQualityRemoved","volumeslider_1","volumetogglebutton_1","VolumeControlButton","volumeToggleButton","getVolumeToggleButton","volumeSlider","getVolumeSlider","volumeSliderHovered","volumeSliderHideTimeout","VolumeToggleButton","VolumeSlider","seekbar_1","setVolumeAriaSliderValues","hideIfVolumeControlProhibited","detectVolumeControlAvailability","muted","volume","updateVolumeWhileScrubbing","dummyVideoElement","update","volumeLevelTens","toggleMuted","defaultConfig","VRToggleButton","vrStateHandler","ev","VR_RENDERING_ERROR","isVRConfigured","isVRStereoAvailable","getStereo","vrButtonVisibilityHandler","source","VRStereoChanged","setStereo","Watermark","vrtogglebutton_1","settingstogglebutton_1","playbacktimelabel_1","airplaytogglebutton_1","errormessageoverlay_1","casttogglebutton_1","fullscreentogglebutton_1","recommendationoverlay_1","caststatusoverlay_1","watermark_1","subtitleoverlay_1","seekbarlabel_1","playbacktoggleoverlay_1","pictureinpicturetogglebutton_1","uimanager_1","titlebar_1","bufferingoverlay_1","subtitlelistbox_1","audiotracklistbox_1","uifactory_1","DemoFactory","buildDemoWithSeparateAudioSubtitlesButtons","subtitleListBox","audioTrackListBox","UIManager","ui","UIFactory","modernSmallScreenAdsUI","condition","context","documentWidth","isAd","adRequiresUi","modernAdsUI","modernSmallScreenUI","subtitleSettingsPanel","audioTrackSettingsPanel","controlBar","something","attributes","Array","HTMLElement","elements","Document","attributeName","attributeValue","setAttribute","findChildElements","findChildElementsOfElement","selector","childElements","querySelectorAll","allChildElements","inputElements","focus","scrollTo","arguments","setHtml","getHtml","innerHTML","HTMLSelectElement","HTMLInputElement","attribute","setAttr","getAttr","removeAttr","removeAttribute","getAttribute","dataAttribute","setData","getData","childElement","elementRect","htmlRect","body","offsetWidth","offsetHeight","eventName","eventHandler","split","addEventListener","removeEventListener","className","classNames","classList","add","replace","RegExp","contains","propertyNameOrCollection","setCss","getCss","setCssCollection","elementIndex","removeProperty","getComputedStyle","ruleValueCollection","defaultErrorMessages","1000","1001","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1300","1301","1302","1303","1304","1400","1401","1402","1403","1404","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2100","2101","3000","3001","3002","3003","3004","3100","listeners","listener","EventListenerWrapper","rateMs","RateLimitedEventListenerWrapper","subscribedListener","unsubscribeAll","listenersToRemove","listeners_1","fire","isOnce","listenersToRemove_1","eventListener","once","shouldFireEvent","rateLimitTimout","fireSuper","rateLimitingEventListener","startRateLimiting","lastSeenEvent","FocusVisibleCssClassName","FocusVisibilityTracker","bitmovinUiPrefix","lastInteractionWasKeyboard","onKeyDown","metaKey","altKey","ctrlKey","onMouseOrPointerOrTouch","onFocus","isHtmlElement","onBlur","eventHandlerMap","mousedown","pointerdown","touchstart","keydown","blur","registerEventListeners","DOMTokenList","event_1","unregisterEventListeners","event_2","guid","loadedCallback","state_1","loaded","callLoadedCallback","de_json_1","__importDefault","en_json_1","es_json_1","defaultLocalizationConfig","defaultVocabularies","en","default","de","es","language","vocabularies","I18n","setConfig","mergedConfig","detectBrowserLanguage","mergeVocabulariesWithDefaultVocabularies","initializeLanguage","initializeVocabulary","containsLanguage","hasOwnProperty","rawVocabularies","reduce","mergedVocabularies","vocabulary","browserLanguageDetectionEnabled","userLanguage","shortenedUserLanguage","vocab","lang","replaceVariableWithPlaceholderIfExists","matches","match","m","str","vocabularyString","settings.video.quality","settings.audio.quality","settings.audio.track","playPause","close","settings.audio.mute","settings.audio.volume","pictureInPicture","appleAirplay","googleCast","settings","fullscreen","settings.subtitles","settings.subtitles.font.size","settings.subtitles.font.family","settings.subtitles.font.color","settings.subtitles.font.opacity","settings.subtitles.characterEdge","settings.subtitles.background.color","settings.subtitles.background.opacity","settings.subtitles.window.color","settings.subtitles.window.opacity","settings.time.hours","settings.time.minutes","settings.time.seconds","back","replay","ads.remainingTime","colors.white","colors.black","colors.red","colors.green","colors.blue","colors.yellow","subtitle.example","subtitle.select","playingOn","connectingTo","watermarkLink","seekBar.value","seekBar.timeshift","seekBar.durationText","settings.nextepisode","settings.rated","settings.subtitles.on","settings.subtitles.off","colors.cyan","colors.magenta","settings.subtitles.characterEdge.raised","settings.subtitles.characterEdge.depressed","settings.subtitles.characterEdge.uniform","settings.subtitles.characterEdge.dropshadowed","settings.subtitles.font.family.monospacedserif","settings.subtitles.font.family.proportionalserif","settings.subtitles.font.family.monospacedsansserif","settings.subtitles.font.family.proportionalsansserif","settings.subtitles.font.family.casual","settings.subtitles.font.family.cursive","settings.subtitles.font.family.smallcapital","auto","normal","version","enumerable","UIInstanceManager","demofactory_1","spatialnavigation_1","navigationgroup_1","SpatialNavigation","rootnavigationgroup_1","NavigationGroup","ListNavigationGroup_1","RootNavigationGroup","ListNavigationGroup","ListOrientation","itemselectionlist_1","audiotrackselectbox_1","subtitleselectbox_1","volumecontrolbutton_1","adskipbutton_1","admessagelabel_1","adclickoverlay_1","castuicontainer_1","closebutton_1","subtitlesettingslabel_1","settingspanelpageopenbutton_1","subtitlesettingspanelpage_1","replaybutton_1","TypeError","timeShiftAvailabilityChangedEvent","liveDetector","liveChangedEvent","isAndroid","isChrome","DurationChanged","defaultValue","getSeekableRange","currentTimeshift","maxTimeshift","timeShiftAvailableNow","liveNow","types_1","handleAction","action","Action","SELECT","BACK","handleNavigation","listNavigationDirections","orientation","__spreadArray","Vertical","Direction","UP","DOWN","Horizontal","LEFT","RIGHT","typeguards_1","getHtmlElementsFromComponents","htmlElements","resolveAllComponents","childComponents","containerOrComponent","isContainer","isComponent","isListBox","children","TizenKeyMap","isApplicable","isTizen","keyCodes","38","40","37","39","13","10009","WebOsKeyMap","isWebOs","461","PlayStationKeyMap","isPlayStation","27","AndroidKeyMap","19","20","21","22","23","66","4","HisenseKeyMap","8","DefaultKeyMap","getKeyMapForPlatform","applicableKeyMap","keyMap","vector","sqrt","pow","getElementVector","boundingRect","getBoundingRectFromElement","calculateAngle","b","directionVector","len","elementVector","angleCos","acos","PI","getElementInDirection","activeElement","activeElemVector","elem","dist","angle","angleA","distA","navigationalgorithm_1","gethtmlelementsfromcomponents_1","nodeeventsubscriber_1","removeElementHoverEventListeners","eventSubscriber","NodeEventSubscriber","getActiveElement","focusElement","blurActiveElement","focusFirstElement","defaultNavigationHandler","targetElement","defaultActionHandler","click","handleInput","defaultHandler","userHandler","handleDefault","onNavigation","activeElementBeforeDisable","onAction","isSettingsPanel","trackElementHover","removeEventListenerFunctions","htmlElem","exitListener","enterListener","fn","attachedListeners","Map","getEventListenersOfType","has","set","node","options","listenersOfType","listenerIndex","otherNode","otherListener","otherOptions","SeekBarHandler","rootNavigationGroup","cursorPosition","isScrubbing","scrubSpeedPercentage","isSeekBarWrapper","stopSeeking","getSeekBar","initializeOrUpdateCursorPosition","dispatchMouseMoveEvent","dispatchMouseClickEvent","from","seekBarWrapper","updateScrubSpeedPercentage","clearTimeout","scrubSpeedResetTimeout","getIncrement","increment","resetCursorPosition","updateCursorPosition","initializeCursorPosition","playbackPositionMarker","querySelector","rect","startX","startY","getCursorPositionMouseEventInit","clientX","clientY","dispatchEvent","mouseDownHandler","mouseEventInit","dispatchMouseLeaveEvent","seekbarhandler_1","keymap_1","navigationGroups","group","activeNavigationGroups","updateEnabledNavigationGroup","groupIndex","other","handleKeyEvent","active","getActiveNavigationGroup","isDirection","isAction","seekBarHandler","unsubscribeVisibilityChangesFns","subscribeToNavigationGroupVisibilityChanges","attachKeyEventHandler","enableDefaultNavigationGroup","onShowHandler","onHideHandler","unsubscribeFromNavigationGroupVisibilityChanges","unsub","groupToEnable","idx","obj","values","hasLocalStorageCache","setItem","hasLocalStorage","localStorage","getItem","storage","DOMException","stringify","json","totalSeconds","format","isNegative","hours","minutes","leftPadWithZeros","num","substr","adMessage","adMessagePlaceholderRegex","formatString","leadingZeroes","numDecimalPlaces","leadingZeroesMatches","decimalPlacesMatches","timeString","toFixed","currentSubtitle","SUBTITLES_OFF_KEY","subtitles","list","subtitle","SubtitleAdded","addSubtitle","selectCurrentSubtitle","SubtitleRemoved","removeSubtitle","clearSubtitles","refreshSubtitles","offListItem","sortOn","SUBTITLES_DEFAULT_KEY","SUBTITLES_DEFAULT_KEY_SECONDARY","getEnglishSubtitle","filtered","arrayList","resultantArrayList","resultantOtherLanguages","filterEnglish","delay","callback","repeat","timeoutOrIntervalId","clearInternal","setInterval","clearInterval","loadingoverlay_1","customclosebutton_1","controls_1","playbutton_1","rewind_1","forward_1","advisory_1","fontsizelistbox_1","metadataadvisory_1","subtitleclosedcaptionsmanager_1","closecaptionslistbox_1","britboxplaybacktoggleoverlay_1","modernUI","mainSettingsPanelPage","subtitleSettingsPanelPage","subtitleSelectBox","subtitleSettingsOpenButton","modernBritboxScreenUI","managerClosedCaptions","modernCastReceiverUI","modernTvUI","subtitleListPanel","audioTrackListPanel","playbackToggleOverlay","subtitleToggleButton","audioToggleButton","uiContainer","spatialNavigation","buildDefaultUI","buildBritboxSmallScreenUI","buildDefaultSmallScreenUI","buildDefaultBritbox","buildDefaultCastReceiverUI","buildModernCastReceiverUI","buildDefaultTvUI","buildModernTvUI","buildModernUI","buildModernSmallScreenUI","volumecontroller_1","focusvisibilitytracker_1","playerUiOrUiVariants","updateConfig","onUiVariantResolve","onActiveUiChanged","uiVariants","managerPlayerWrapper","PlayerWrapper","autoUiVariantResolve","VolumeController","getPlayer","playerSourceConfig","playerSourceUiConfig","updateSource","wrappedPlayer","uiVariantsWithoutCondition","PlaylistTransition","uiContainerElement","uiInstanceManagers","uiVariant","InternalUIInstanceManager","resolveUiVariant","adStartedEvent","isLinear","requestsUi","currentUi","getWrappedPlayer","fireEventInUI","focusVisibilityTracker","localize","setLocalizationConfig","localizationConfig","getUiVariants","switchToUiVariant","uiVariantIndex","previousUi","nextUi","isConfigured","addUi","defaultContext","isFullscreen","clientWidth","switchingContext","nextUiVariant","matchesCondition","dom","configureControls","releaseUi","releaseControls","clearEventHandlers","uiInstanceManager","getTimelineMarkers","addTimelineMarker","timelineMarker","removeTimelineMarker","playerWrapper","configureControlsTree","configured","configuredComponents","configuredComponents_1","constructor","releaseControlsTree","released","isReleased","childComponent","wrapper","eventHandlers","eventType","objectProtoPropertyNames","getOwnPropertyNames","getPrototypeOf","namesToIgnore","methods","properties","members_1","names","newNames","member","methods_1","method","properties_1","propertyDescriptor","propertyDescriptor_1","getOwnPropertyDescriptor","playerEventData","timestamp","uiSourced","visit","recursiveTreeWalker","setVolume","issuerName","setMuted","mute","unmute","isMuted","recallVolume","storeVolume","storedVolume","VolumeTransition","playerMuted","playerVolume","uiMuted","uiVolume","VolumeChanged","Muted","Unmuted","controller","setCueBoxPositionForVerticalWriting","cueContainerDom","subtitleOverlaySize","writingMode","Right","Top","setVttLine","setVttPositionAlign","positionAlign","DirectionPair","VttVerticalWriting","defaultLineNumber","Bottom","Left","setVttLineAlign","relativeCueBoxPosition","lineAlign","setCssForCenterLineAlign","subtitleOverLaySize","targetLine","relativeLinePosition","overlayReferenceEdge","line","snapToLines","cueContainer","GrowingRight","GrowingLeft","textAlign","align","containerSize","regionContainerDom","regionPositionX","viewportAnchorX","regionAnchorX","regionPositionY","viewportAnchorY","lines","regionAnchorY"],"mappings":"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","file":"bitmovinplayer-ui.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export namespace ArrayUtils {\n  /**\n   * Removes an item from an array.\n   * @param array the array that may contain the item to remove\n   * @param item the item to remove from the array\n   * @returns {any} the removed item or null if it wasn't part of the array\n   */\n  export function remove<T>(array: T[], item: T): T | null {\n    let index = array.indexOf(item);\n\n    if (index > -1) {\n      return array.splice(index, 1)[0];\n    } else {\n      return null;\n    }\n  }\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { AudioTrackEvent, PlayerAPI, AudioTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\n/**\n * Helper class to handle all audio tracks related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class AudioTrackSwitchHandler {\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshAudioTracks();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      this.player.setAudio(value);\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    // Update selection when selected track has changed\n    this.player.on(this.player.exports.PlayerEvent.AudioChanged, this.selectCurrentAudioTrack);\n    // Update tracks when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.refreshAudioTracks);\n    // Update tracks when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshAudioTracks);\n    // Update tracks when a track is added or removed\n    this.player.on(this.player.exports.PlayerEvent.AudioAdded, this.addAudioTrack);\n    this.player.on(this.player.exports.PlayerEvent.AudioRemoved, this.removeAudioTrack);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshAudioTracks);\n  }\n\n  private addAudioTrack = (event: AudioTrackEvent) => {\n    const audioTrack = event.track;\n    if (!this.listElement.hasItem(audioTrack.id)) {\n      this.listElement.addItem(audioTrack.id, i18n.getLocalizer(audioTrack.label), true);\n    }\n  };\n\n  private removeAudioTrack = (event: AudioTrackEvent) => {\n    const audioTrack = event.track;\n    if (this.listElement.hasItem(audioTrack.id)) {\n      this.listElement.removeItem(audioTrack.id);\n    }\n  };\n\n  private selectCurrentAudioTrack = () => {\n    let currentAudioTrack = this.player.getAudio();\n\n    // HLS streams don't always provide this, so we have to check\n    if (currentAudioTrack) {\n      this.listElement.selectItem(currentAudioTrack.id);\n    }\n  };\n\n  private refreshAudioTracks = () => {\n    const audioTracks = this.player.getAvailableAudio();\n    const audioTrackToListItem = (audioTrack: AudioTrack): ListItem => {\n      return { key: audioTrack.id, label: audioTrack.label };\n    };\n\n    this.listElement.synchronizeItems(audioTracks.map(audioTrackToListItem));\n    this.selectCurrentAudioTrack();\n  };\n}\n","declare global {\n  interface Navigator {\n    msMaxTouchPoints?: number;\n  }\n}\n\nexport class BrowserUtils {\n  // isMobile only needs to be evaluated once (it cannot change during a browser session)\n  // Mobile detection according to Mozilla recommendation: \"In summary, we recommend looking for the string “Mobi”\n  // anywhere in the User Agent to detect a mobile device.\"\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n  static get isMobile(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Mobi/.test(navigator.userAgent);\n  }\n\n  static get isChrome(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Chrome/.test(navigator.userAgent);\n  }\n\n  static get isAndroid(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Android/.test(navigator.userAgent) && !this.isHisense;\n  }\n\n  static get isIOS(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /iPad|iPhone|iPod/.test(navigator.userAgent);\n  }\n\n  static get isMacIntel(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && navigator.platform === 'MacIntel';\n  }\n\n  static get isHisense(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Hisense/.test(navigator.userAgent);\n  }\n\n  static get isPlayStation(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /PlayStation/i.test(navigator.userAgent);\n  }\n\n  static get isWebOs(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return (\n      navigator &&\n      navigator.userAgent &&\n      (navigator.userAgent.includes('Web0S') || navigator.userAgent.includes('NetCast'))\n    );\n  }\n\n  static get isTizen(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Tizen/.test(navigator.userAgent);\n  }\n\n  // https://hacks.mozilla.org/2013/04/detecting-touch-its-the-why-not-the-how/\n  static get isTouchSupported() {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return 'ontouchstart' in window || navigator && navigator.userAgent && (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);\n  }\n\n  private static windowExists(): boolean {\n    return typeof window !== 'undefined';\n  }\n}\n","import { ClickOverlay } from './clickoverlay';\nimport { UIInstanceManager } from '../uimanager';\nimport { Ad, AdEvent, PlayerAPI } from 'bitmovin-player';\n\n/**\n * A simple click capture overlay for clickThroughUrls of ads.\n */\nexport class AdClickOverlay extends ClickOverlay {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let clickThroughCallback: () => void = null;\n\n    player.on(player.exports.PlayerEvent.AdStarted, (event: AdEvent) => {\n      let ad = event.ad;\n      this.setUrl(ad.clickThroughUrl);\n      clickThroughCallback = ad.clickThroughUrlOpened;\n    });\n\n    // Clear click-through URL when ad has finished\n    let adFinishedHandler = () => {\n      this.setUrl(null);\n    };\n\n    player.on(player.exports.PlayerEvent.AdFinished, adFinishedHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adFinishedHandler);\n    player.on(player.exports.PlayerEvent.AdError, adFinishedHandler);\n\n    this.onClick.subscribe(() => {\n      // Pause the ad when overlay is clicked\n      player.pause('ui-ad-click-overlay');\n\n      if (clickThroughCallback) {\n        clickThroughCallback();\n      }\n    });\n  }\n}\n","import {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A label that displays a message about a running ad, optionally with a countdown.\n */\nexport class AdMessageLabel extends Label<LabelConfig> {\n\n  constructor(config: LabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-label-ad-message',\n      text: i18n.getLocalizer('ads.remainingTime') ,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let text = config.text;\n\n    let updateMessageHandler = () => {\n      this.setText(StringUtils.replaceAdMessagePlaceholders(i18n.performLocalization(text), null, player));\n    };\n\n    let adStartHandler = (event: AdEvent) => {\n      let uiConfig = (event.ad as LinearAd).uiConfig;\n      text = uiConfig && uiConfig.message || config.text;\n\n      updateMessageHandler();\n\n      player.on(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\n    };\n\n    let adEndHandler = () => {\n      player.off(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\n    };\n\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\n  }\n}","import { ButtonConfig, Button } from './button';\nimport { UIInstanceManager } from '../uimanager';\nimport { StringUtils } from '../stringutils';\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link AdSkipButton}.\n */\nexport interface AdSkipButtonConfig extends ButtonConfig {\n  /**\n   * Message which gets displayed during the countdown is active.\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\n   */\n  untilSkippableMessage?: string;\n  /**\n   * Message displayed when the ad is skippable.\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\n   */\n  skippableMessage?: string;\n}\n\n/**\n * A button that is displayed during ads and can be used to skip the ad.\n */\nexport class AdSkipButton extends Button<AdSkipButtonConfig> {\n\n  constructor(config: AdSkipButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <AdSkipButtonConfig>{\n      cssClass: 'ui-button-ad-skip',\n      untilSkippableMessage: 'Skip ad in {remainingTime}',\n      skippableMessage: 'Skip ad',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let untilSkippableMessage = config.untilSkippableMessage;\n    let skippableMessage = config.skippableMessage;\n    let skipOffset = -1;\n\n    let updateSkipMessageHandler = () => {\n      this.show();\n\n      // Update the skip message on the button\n      if (player.getCurrentTime() < skipOffset) {\n        this.setText(StringUtils.replaceAdMessagePlaceholders(untilSkippableMessage, skipOffset, player));\n        this.disable();\n      } else {\n        this.setText(skippableMessage);\n        this.enable();\n      }\n    };\n\n    let adStartHandler = (event: AdEvent) => {\n      let ad = event.ad as LinearAd;\n      skipOffset = ad.skippableAfter;\n      untilSkippableMessage = ad.uiConfig && ad.uiConfig.untilSkippableMessage || config.untilSkippableMessage;\n      skippableMessage = ad.uiConfig && ad.uiConfig.skippableMessage || config.skippableMessage;\n\n      // Display this button only if ad is skippable.\n      // Non-skippable ads will return -1 for skippableAfter for player version < v8.3.0.\n      if (typeof skipOffset === 'number' && skipOffset >= 0) {\n        updateSkipMessageHandler();\n        player.on(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\n      } else {\n        this.hide();\n      }\n    };\n\n    let adEndHandler = () => {\n      player.off(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\n    };\n\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\n\n    this.onClick.subscribe(() => {\n      // Try to skip the ad (this only works if it is skippable so we don't need to take extra care of that here)\n      player.ads.skip();\n    });\n  }\n}","import { ContainerConfig, Container } from './container';\nimport { UIInstanceManager } from '../uimanager';\nimport { Timeout } from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link Advisory} component.\n */\nexport interface AdvisoryConfig extends ContainerConfig {\n  showDelayMs?: number;\n  hideDelayMs?: number;\n}\n\n/**\n * Overlays the player and displays a advisor indicator.\n */\nexport class Advisory extends Container<AdvisoryConfig> {\n  constructor(config: AdvisoryConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      <AdvisoryConfig>{\n        cssClass: 'ui-advisory',\n        hidden: true,\n        showDelayMs: 2500,\n        hideDelayMs: 7500,\n      },\n      this.config,\n    );\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    let overlayShowTimeout = new Timeout(config.showDelayMs || 0, () => {\n      this.show();\n    });\n\n    let overlayHideTimeout = new Timeout(config.hideDelayMs || 0, () => {\n      this.hide();\n    });\n\n    let init = () => {\n      overlayShowTimeout.start();\n      overlayHideTimeout.start();\n    };\n\n    uimanager.onLoadingHide.subscribe(() => {\n      new Timeout(1000, () => {\n        init();\n      }).start();\n    });\n\n    uimanager.onLoadingShow.subscribe(() => {\n      overlayShowTimeout.clear();\n      overlayHideTimeout.clear();\n      this.hide();\n    });\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles Apple AirPlay.\n */\nexport class AirPlayToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-airplaytogglebutton',\n      text: i18n.getLocalizer('appleAirplay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    if (!player.isAirplayAvailable) {\n      // If the player does not support Airplay (player 7.0), we just hide this component and skip configuration\n      this.hide();\n      return;\n    }\n\n    this.onClick.subscribe(() => {\n      if (player.isAirplayAvailable()) {\n        player.showAirplayTargetPicker();\n      } else {\n        if (console) {\n          console.log('AirPlay unavailable');\n        }\n      }\n    });\n\n    const airPlayAvailableHandler = () => {\n      if (player.isAirplayAvailable()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    const airPlayChangedHandler = () => {\n      if (player.isAirplayActive()) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.AirplayAvailable, airPlayAvailableHandler);\n    player.on(player.exports.PlayerEvent.AirplayChanged, airPlayChangedHandler);\n\n    // Startup init\n    airPlayAvailableHandler(); // Hide button if AirPlay is not available\n    airPlayChangedHandler();\n  }\n}","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between 'auto' and the available audio qualities.\n */\nexport class AudioQualitySelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-audioqualityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let selectCurrentAudioQuality = () => {\n      this.selectItem(player.getAudioQuality().id);\n    };\n\n    let updateAudioQualities = () => {\n      let audioQualities = player.getAvailableAudioQualities();\n\n      this.clearItems();\n\n      // Add entry for automatic quality switching (default setting)\n      this.addItem('auto', i18n.getLocalizer('auto'));\n\n      // Add audio qualities\n      for (let audioQuality of audioQualities) {\n        this.addItem(audioQuality.id, audioQuality.label);\n      }\n\n      // Select initial quality\n      selectCurrentAudioQuality();\n    };\n\n    this.onItemSelected.subscribe((sender: AudioQualitySelectBox, value: string) => {\n      player.setAudioQuality(value);\n    });\n\n    // Update qualities when audio track has changed\n    player.on(player.exports.PlayerEvent.AudioChanged, updateAudioQualities);\n    // Update qualities when source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateAudioQualities);\n    // Update qualities when the period within a source changes\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateAudioQualities);\n    // Update quality selection when quality is changed (from outside)\n    player.on(player.exports.PlayerEvent.AudioQualityChanged, selectCurrentAudioQuality);\n    if ((player.exports.PlayerEvent as any).AudioQualityAdded) {\n      // Update qualities when their availability changed\n      // TODO: remove any cast after next player release\n      player.on((player.exports.PlayerEvent as any).AudioQualityAdded, updateAudioQualities);\n      player.on((player.exports.PlayerEvent as any).AudioQualityRemoved, updateAudioQualities);\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(updateAudioQualities);\n  }\n}","import {ListBox} from './listbox';\nimport {UIInstanceManager} from '../uimanager';\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A element that is similar to a select box where the user can select a subtitle\n */\nexport class AudioTrackListBox extends ListBox {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    new AudioTrackSwitchHandler(player, this, uimanager);\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A select box providing a selection between available audio tracks (e.g. different languages).\n */\nexport class AudioTrackSelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-audiotrackselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new AudioTrackSwitchHandler(player, this, uimanager);\n  }\n}","import { ToggleButtonConfig } from './togglebutton';\nimport { PlaybackToggleButton } from './playbacktogglebutton';\nimport { DOM } from '../dom';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that overlays the video and toggles between playback and pause.\n */\nexport class BritboxHugePlaybackToggleButton extends PlaybackToggleButton {\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClass: 'ui-hugeplaybacktogglebutton',\n        text: i18n.getLocalizer('playPause'),\n        role: 'button',\n        ariaLabel: i18n.getLocalizer('play'),\n      },\n      this.config,\n    );\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Update button state through API events\n    super.configure(player, uimanager, false);\n\n    let togglePlayback = () => {\n      if (player.isPlaying() || this.isPlayInitiated) {\n        uimanager.getUI().hideUi();\n      } else {\n        uimanager.getUI().showUi();\n      }\n    };\n\n    let toggleFullscreen = () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        player.setViewMode(player.exports.ViewMode.Inline);\n      } else {\n        player.setViewMode(player.exports.ViewMode.Fullscreen);\n      }\n    };\n\n    let firstPlay = true;\n    let clickTime = 0;\n    let doubleClickTime = 0;\n\n    /*\n     * YouTube-style toggle button handling\n     *\n     * The goal is to prevent a short pause or playback interval between a click, that toggles playback, and a\n     * double click, that toggles fullscreen. In this naive approach, the first click would e.g. start playback,\n     * the second click would be detected as double click and toggle to fullscreen, and as second normal click stop\n     * playback, which results is a short playback interval with max length of the double click detection\n     * period (usually 500ms).\n     *\n     * To solve this issue, we defer handling of the first click for 200ms, which is almost unnoticeable to the user,\n     * and just toggle playback if no second click (double click) has been registered during this period. If a double\n     * click is registered, we just toggle the fullscreen. In the first 200ms, undesired playback changes thus cannot\n     * happen. If a double click is registered within 500ms, we undo the playback change and switch fullscreen mode.\n     * In the end, this method basically introduces a 200ms observing interval in which playback changes are prevented\n     * if a double click happens.\n     */\n    this.onClick.subscribe(() => {\n      // Directly start playback on first click of the button.\n      // This is a required workaround for mobile browsers where video playback needs to be triggered directly\n      // by the user. A deferred playback start through the timeout below is not considered as user action and\n      // therefore ignored by mobile browsers.\n      if (firstPlay) {\n        // Try to start playback. Then we wait for Play and only when it arrives, we disable the firstPlay flag.\n        // If we disable the flag here, onClick was triggered programmatically instead of by a user interaction, and\n        // playback is blocked (e.g. on mobile devices due to the programmatic play() call), we loose the chance to\n        // ever start playback through a user interaction again with this button.\n        togglePlayback();\n        return;\n      }\n\n      let now = Date.now();\n\n      if (now - clickTime < 200) {\n        // We have a double click inside the 200ms interval, just toggle fullscreen mode\n        toggleFullscreen();\n        doubleClickTime = now;\n        return;\n      } else if (now - clickTime < 500) {\n        // We have a double click inside the 500ms interval, undo playback toggle and toggle fullscreen mode\n        toggleFullscreen();\n        togglePlayback();\n        doubleClickTime = now;\n        return;\n      }\n\n      clickTime = now;\n\n      setTimeout(() => {\n        if (Date.now() - doubleClickTime > 200) {\n          // No double click detected, so we toggle playback and wait what happens next\n          togglePlayback();\n        }\n      }, 200);\n    });\n\n    player.on(player.exports.PlayerEvent.Play, () => {\n      // Playback has really started, we can disable the flag to switch to normal toggle button handling\n      firstPlay = false;\n    });\n\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        // if playback could not be started, reset the first play flag as we need the user interaction to start\n        firstPlay = true;\n      }\n    });\n\n    const suppressPlayButtonTransitionAnimation = () => {\n      // Disable the current animation\n      this.setTransitionAnimationsEnabled(false);\n\n      // Enable the transition animations for the next state change\n      this.onToggle.subscribeOnce(() => {\n        this.setTransitionAnimationsEnabled(true);\n      });\n    };\n\n    // Hide the play button animation when the UI is loaded (it should only be animated on state changes)\n    suppressPlayButtonTransitionAnimation();\n\n    const isAutoplayEnabled =\n      player.getConfig().playback && Boolean(player.getConfig().playback.autoplay);\n    // We only know if an autoplay attempt is upcoming if the player is not yet ready. It the player is already ready,\n    // the attempt might be upcoming or might have already happened, but we don't have to handle that because we can\n    // simply rely on isPlaying and the play state events.\n    const isAutoplayUpcoming = !player.getSource() && isAutoplayEnabled;\n\n    // Hide the play button when the player is already playing or autoplay is upcoming\n    if (player.isPlaying() || isAutoplayUpcoming) {\n      // Hide the play button (switch to playing state)\n      this.on();\n      // Disable the animation of the playing state switch\n      suppressPlayButtonTransitionAnimation();\n\n      // Show the play button without an animation if a play attempt is blocked\n      player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n        if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n          suppressPlayButtonTransitionAnimation();\n        }\n      });\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(\n      new DOM('div', {\n        class: this.prefixCss('image'),\n      }),\n    );\n\n    return buttonElement;\n  }\n\n  /**\n   * Enables or disables the play state transition animations of the play button image. Can be used to suppress\n   * animations.\n   * @param {boolean} enabled true to enable the animations (default), false to disable them\n   */\n  protected setTransitionAnimationsEnabled(enabled: boolean): void {\n    const noTransitionAnimationsClass = this.prefixCss('no-transition-animations');\n\n    if (enabled) {\n      this.getDomElement().removeClass(noTransitionAnimationsClass);\n    } else if (!this.getDomElement().hasClass(noTransitionAnimationsClass)) {\n      this.getDomElement().addClass(noTransitionAnimationsClass);\n    }\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { ListItem, ListSelector, ListSelectorConfig } from './listselector';\nimport { DOM } from '../dom';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\nimport { ArrayUtils } from '../arrayutils';\n\n/**\n * A element to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *   <div class='ui-listbox'>\n *     <button class='ui-listbox-button'>label</button>\n *     ...\n *   </div\n * </code>\n */\n// TODO: change ListSelector to extends container in v4 to improve usage of ListBox.\n//       Currently we are creating the dom element of the list box with child elements manually here.\n//       But this functionality is already covered within the Container component.\nexport class BritboxListBox extends ListSelector<ListSelectorConfig> {\n  private listBoxElement: DOM;\n  private components: ListBoxItemButton[] = [];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClass: 'ui-listbox',\n      } as ListSelectorConfig,\n      this.config,\n    );\n  }\n\n  public configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Subscribe before super call to receive initial events\n    this.onItemAdded.subscribe(this.addListBoxDomItem);\n    this.onItemRemoved.subscribe(this.removeListBoxDomItem);\n    this.onItemSelected.subscribe(this.refreshSelectedItem);\n\n    super.configure(player, uimanager);\n  }\n\n  protected toDomElement(): DOM {\n    let listBoxElement = new DOM('div', {\n      id: this.config.id,\n      class: this.getCssClasses(),\n    });\n\n    this.listBoxElement = listBoxElement;\n    this.createListBoxDomItems();\n    this.refreshSelectedItem();\n\n    return listBoxElement;\n  }\n\n  private createListBoxDomItems() {\n    // Delete all children\n    this.listBoxElement.empty();\n    this.components = [];\n\n    // Add updated children\n    for (let item of this.items) {\n      this.addListBoxDomItem(this, item.key);\n    }\n  }\n\n  private removeListBoxDomItem = (_: any, key: string) => {\n    const component = this.getComponentForKey(key);\n    if (component) {\n      component.getDomElement().remove();\n      ArrayUtils.remove(this.components, component);\n    }\n  };\n\n  private addListBoxDomItem = (_: any, key: string) => {\n    const component = this.getComponentForKey(key);\n    const newItem = this.getItemForKey(key);\n    if (component) {\n      // Update existing component\n      component.setText(newItem.label);\n    } else {\n      const listBoxItemButton = this.buildListBoxItemButton(newItem);\n\n      listBoxItemButton.onClick.subscribe(() => {\n        this.handleSelectionChange(listBoxItemButton);\n      });\n\n      this.components.push(listBoxItemButton);\n      this.listBoxElement.append(listBoxItemButton.getDomElement());\n    }\n  };\n\n  private refreshSelectedItem = () => {\n    // This gets called twice because the first time is triggered when the user clicks on the ListBoxItemButton. And the\n    // second call comes from the player event when the actual item is selected (Subtitle / AudioTrack in this case).\n    // As this is a generic component we can't prohibit this behaviour. We need to treat this component as it acts\n    // independent from PlayerEvents and on the other hand we need to react to PlayerEvents as it could be triggered\n    // from outside.\n\n    for (let item of this.items) {\n      const component = this.getComponentForKey(item.key);\n      if (component) {\n        String(component.key) === String(this.selectedItem) ? component.on() : component.off();\n      }\n    }\n  };\n\n  private buildListBoxItemButton(listItem: ListItem): ListBoxItemButton {\n    return new ListBoxItemButton({\n      key: listItem.key,\n      id: listItem.key,\n      text: listItem.label,\n    });\n  }\n\n  private getComponentForKey(key: string): ListBoxItemButton {\n    return this.components.find((c) => key === c.key);\n  }\n\n  private handleSelectionChange = (sender: ListBoxItemButton) => {\n    this.onItemSelectedEvent(sender.key);\n  };\n}\n\ninterface ListBoxItemButtonConfig extends ToggleButtonConfig {\n  /**\n   * key to identify selected item. Similar to the value attribute of an select option.\n   */\n  key: string;\n  id?: string;\n}\n\nclass ListBoxItemButton extends ToggleButton<ListBoxItemButtonConfig> {\n  constructor(config: ListBoxItemButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClass: 'ui-listbox-button',\n        onClass: 'selected',\n        offClass: '',\n      } as ListBoxItemButtonConfig,\n      this.config,\n    );\n  }\n\n  get key(): string {\n    return (this.config as ListBoxItemButtonConfig).key;\n  }\n}\n","import { BritboxHugePlaybackToggleButton } from './britboxhugeplaybacktogglebutton';\nimport { Container, ContainerConfig } from './container';\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class BritboxPlaybackToggleOverlay extends Container<ContainerConfig> {\n  private playbackToggleButton: BritboxHugePlaybackToggleButton;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.playbackToggleButton = new BritboxHugePlaybackToggleButton();\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClass: 'ui-playbacktoggle-overlay',\n        components: [this.playbackToggleButton],\n      },\n      this.config,\n    );\n  }\n}\n","import { ContainerConfig, Container } from './container';\nimport { UIInstanceManager } from '../uimanager';\nimport { Component, ComponentConfig } from './component';\nimport { Timeout } from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link BufferingOverlay} component.\n */\nexport interface BufferingOverlayConfig extends ContainerConfig {\n  /**\n   * Delay in milliseconds after which the buffering overlay will be displayed. Useful to bypass short stalls without\n   * displaying the overlay. Set to 0 to display the overlay instantly.\n   * Default: 1000ms (1 second)\n   */\n  showDelayMs?: number;\n}\n\n/**\n * Overlays the player and displays a buffering indicator.\n */\nexport class BufferingOverlay extends Container<BufferingOverlayConfig> {\n  private indicators: Component<ComponentConfig>[];\n\n  constructor(config: BufferingOverlayConfig = {}) {\n    super(config);\n\n    this.indicators = [\n      new Component<ComponentConfig>({\n        tag: 'div',\n        cssClass: 'ui-buffering-overlay-loading',\n        role: 'img',\n      }),\n    ];\n\n    this.config = this.mergeConfig(\n      config,\n      <BufferingOverlayConfig>{\n        cssClass: 'ui-buffering-overlay',\n        hidden: true,\n        components: this.indicators,\n        showDelayMs: 1000,\n      },\n      this.config,\n    );\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    let overlayShowTimeout = new Timeout(config.showDelayMs, () => {\n      this.show();\n    });\n\n    let showOverlay = () => {\n      overlayShowTimeout.start();\n    };\n\n    let hideOverlay = () => {\n      overlayShowTimeout.clear();\n      this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.StallStarted, showOverlay);\n    player.on(player.exports.PlayerEvent.StallEnded, hideOverlay);\n    player.on(player.exports.PlayerEvent.Play, showOverlay);\n    player.on(player.exports.PlayerEvent.Playing, hideOverlay);\n    player.on(player.exports.PlayerEvent.Paused, hideOverlay);\n    player.on(player.exports.PlayerEvent.Seek, showOverlay);\n    player.on(player.exports.PlayerEvent.Seeked, hideOverlay);\n    player.on(player.exports.PlayerEvent.TimeShift, showOverlay);\n    player.on(player.exports.PlayerEvent.TimeShifted, hideOverlay);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, hideOverlay);\n\n    // Show overlay if player is already stalled at init\n    if (player.isStalled()) {\n      this.show();\n    }\n  }\n}\n","import { ComponentConfig, Component } from './component';\nimport { DOM } from '../dom';\nimport { EventDispatcher, NoArgs, Event } from '../eventdispatcher';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Button} component.\n */\nexport interface ButtonConfig extends ComponentConfig {\n  /**\n   * The text as string or localize callback on the button.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A simple clickable button.\n */\nexport class Button<Config extends ButtonConfig> extends Component<Config> {\n  private buttonEvents = {\n    onClick: new EventDispatcher<Button<Config>, NoArgs>(),\n  };\n\n  constructor(config: Config) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClass: 'ui-button',\n        role: 'button',\n        tabIndex: 0,\n      } as Config,\n      this.config,\n    );\n  }\n\n  protected toDomElement(): DOM {\n    const buttonElementAttributes: { [name: string]: string } = {\n      id: this.config.id,\n      'aria-label': i18n.performLocalization(this.config.ariaLabel || this.config.text),\n      class: this.getCssClasses(),\n      type: 'button',\n      /**\n       * WCAG20 standard to display if a button is pressed or not\n       */\n      'aria-pressed': 'false',\n      tabindex: this.config.tabIndex.toString(),\n    };\n\n    if (this.config.role != null) {\n      buttonElementAttributes['role'] = this.config.role;\n    }\n\n    // Create the button element with the text label\n    let buttonElement = new DOM('button', buttonElementAttributes).append(\n      new DOM('span', {\n        class: this.prefixCss('label'),\n      }).html(i18n.performLocalization(this.config.text)),\n    );\n\n    // Listen for the click event on the button element and trigger the corresponding event on the button component\n    buttonElement.on('click', () => {\n      this.onClickEvent();\n    });\n\n    return buttonElement;\n  }\n\n  /**\n   * Sets text on the label of the button.\n   * @param text the text to put into the label of the button\n   */\n  setText(text: LocalizableText): void {\n    this.getDomElement()\n      .find('.' + this.prefixCss('label'))\n      .html(i18n.performLocalization(text));\n  }\n\n  protected onClickEvent() {\n    this.buttonEvents.onClick.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the button is clicked.\n   * @returns {Event<Button<Config>, NoArgs>}\n   */\n  get onClick(): Event<Button<Config>, NoArgs> {\n    return this.buttonEvents.onClick.getEvent();\n  }\n}\n","import {ContainerConfig, Container} from './container';\nimport {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport { CastStartedEvent, CastWaitingForDeviceEvent, PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Overlays the player and displays the status of a Cast session.\n */\nexport class CastStatusOverlay extends Container<ContainerConfig> {\n\n  private statusLabel: Label<LabelConfig>;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.statusLabel = new Label<LabelConfig>({ cssClass: 'ui-cast-status-label' });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-cast-status-overlay',\n      components: [this.statusLabel],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice,\n      (event: CastWaitingForDeviceEvent) => {\n        this.show();\n        // Get device name and update status text while connecting\n        let castDeviceName = event.castPayload.deviceName;\n        this.statusLabel.setText(i18n.getLocalizer('connectingTo', { castDeviceName }));\n      });\n    player.on(player.exports.PlayerEvent.CastStarted, (event: CastStartedEvent) => {\n      // Session is started or resumed\n      // For cases when a session is resumed, we do not receive the previous events and therefore show the status panel\n      // here too\n      this.show();\n      let castDeviceName = event.deviceName;\n      this.statusLabel.setText(i18n.getLocalizer('playingOn', { castDeviceName }));\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, (event) => {\n      // Cast session gone, hide the status panel\n      this.hide();\n    });\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles casting to a Cast receiver.\n */\nexport class CastToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-casttogglebutton',\n      text: i18n.getLocalizer('googleCast'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      if (player.isCastAvailable()) {\n        if (player.isCasting()) {\n          player.castStop();\n        } else {\n          player.castVideo();\n        }\n      } else {\n        if (console) {\n          console.log('Cast unavailable');\n        }\n      }\n    });\n\n    let castAvailableHander = () => {\n      if (player.isCastAvailable()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.CastAvailable, castAvailableHander);\n\n    // Toggle button 'on' state\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice, () => {\n      this.on();\n    });\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      // When a session is resumed, there is no CastStart event, so we also need to toggle here for such cases\n      this.on();\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\n      this.off();\n    });\n\n    // Startup init\n    castAvailableHander(); // Hide button if Cast not available\n    if (player.isCasting()) {\n      this.on();\n    }\n  }\n}","import {UIContainer, UIContainerConfig} from './uicontainer';\nimport {UIInstanceManager} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * The base container for Cast receivers that contains all of the UI and takes care that the UI is shown on\n * certain playback events.\n */\nexport class CastUIContainer extends UIContainer {\n\n  private castUiHideTimeout: Timeout;\n\n  constructor(config: UIContainerConfig) {\n    super(config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    /*\n     * Show UI on Cast devices at certain playback events\n     *\n     * Since a Cast receiver does not have a direct HCI, we show the UI on certain playback events to give the user\n     * a chance to see on the screen what's going on, e.g. on play/pause or a seek the UI is shown and the user can\n     * see the current time and position on the seek bar.\n     * The UI is shown permanently while playback is paused, otherwise hides automatically after the configured\n     * hide delay time.\n     */\n\n    let isUiShown = false;\n\n    let hideUi = () => {\n      uimanager.onControlsHide.dispatch(this);\n      isUiShown = false;\n    };\n\n    this.castUiHideTimeout = new Timeout(config.hideDelay, hideUi);\n\n    let showUi = () => {\n      if (!isUiShown) {\n        uimanager.onControlsShow.dispatch(this);\n        isUiShown = true;\n      }\n    };\n\n    let showUiPermanently = () => {\n      showUi();\n      this.castUiHideTimeout.clear();\n    };\n\n    let showUiWithTimeout = () => {\n      showUi();\n      this.castUiHideTimeout.start();\n    };\n\n    let showUiAfterSeek = () => {\n      if (player.isPlaying()) {\n        showUiWithTimeout();\n      } else {\n        showUiPermanently();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Play, showUiWithTimeout);\n    player.on(player.exports.PlayerEvent.Paused, showUiPermanently);\n    player.on(player.exports.PlayerEvent.Seek, showUiPermanently);\n    player.on(player.exports.PlayerEvent.Seeked, showUiAfterSeek);\n\n    uimanager.getConfig().events.onUpdated.subscribe(showUiWithTimeout);\n  }\n\n  release(): void {\n    super.release();\n    this.castUiHideTimeout.clear();\n  }\n}","import {Button, ButtonConfig} from './button';\n\n/**\n * Configuration interface for a {@link ClickOverlay}.\n */\nexport interface ClickOverlayConfig extends ButtonConfig {\n  /**\n   * The url to open when the overlay is clicked. Set to null to disable the click handler.\n   */\n  url?: string;\n}\n\n/**\n * A click overlay that opens an url in a new tab if clicked.\n */\nexport class ClickOverlay extends Button<ClickOverlayConfig> {\n\n  constructor(config: ClickOverlayConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-clickoverlay',\n      role: this.config.role,\n    }, <ClickOverlayConfig>this.config);\n  }\n\n  initialize(): void {\n    super.initialize();\n\n    this.setUrl((<ClickOverlayConfig>this.config).url);\n    let element = this.getDomElement();\n    element.on('click', () => {\n      if (element.data('url')) {\n        window.open(element.data('url'), '_blank');\n      }\n    });\n  }\n\n  /**\n   * Gets the URL that should be followed when the watermark is clicked.\n   * @returns {string} the watermark URL\n   */\n  getUrl(): string {\n    return this.getDomElement().data('url');\n  }\n\n  setUrl(url: string): void {\n    if (url === undefined || url == null) {\n      url = '';\n    }\n    this.getDomElement().data('url', url);\n  }\n}","import { ButtonConfig, Button } from './button';\nimport { UIInstanceManager } from '../uimanager';\nimport { Component, ComponentConfig } from './component';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link CloseButton}.\n */\nexport interface CloseButtonConfig extends ButtonConfig {\n  /**\n   * The component that should be closed when the button is clicked.\n   */\n  target: Component<ComponentConfig>;\n}\n\n/**\n * A button that closes (hides) a configured component.\n */\nexport class CloseButton extends Button<CloseButtonConfig> {\n  constructor(config: CloseButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClass: 'ui-closebutton',\n        text: i18n.getLocalizer('close'),\n      } as CloseButtonConfig,\n      this.config,\n    );\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    this.onClick.subscribe(() => {\n      config.target.hide();\n      if (player.isPaused()) {\n        player.play();\n      }\n    });\n  }\n}\n","import { Guid } from '../guid';\nimport { DOM } from '../dom';\nimport { EventDispatcher, NoArgs, Event } from '../eventdispatcher';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n, LocalizableText } from '../localization/i18n';\n\n/**\n * Base configuration interface for a component.\n * Should be extended by components that want to add additional configuration options.\n */\nexport interface ComponentConfig {\n  /**\n   * The HTML tag name of the component.\n   * Default: 'div'\n   */\n  tag?: string;\n  /**\n   * The HTML ID of the component.\n   * Default: automatically generated with pattern 'ui-id-{guid}'.\n   */\n  id?: string;\n\n  /**\n   * A prefix to prepend all CSS classes with.\n   */\n  cssPrefix?: string;\n\n  /**\n   * The CSS classes of the component. This is usually the class from where the component takes its styling.\n   */\n  cssClass?: string; // 'class' is a reserved keyword, so we need to make the name more complicated\n\n  /**\n   * Additional CSS classes of the component.\n   */\n  cssClasses?: string[];\n\n  /**\n   * Specifies if the component should be hidden at startup.\n   * Default: false\n   */\n  hidden?: boolean;\n\n  /**\n   * Specifies if the component is enabled (interactive) or not.\n   * Default: false\n   */\n  disabled?: boolean;\n\n  /**\n   * Specifies the component role for WCAG20 standard\n   */\n  role?: string;\n\n  /**\n   * WCAG20 requirement for screen reader navigation\n   */\n  tabIndex?: number;\n\n  /**\n   * WCAG20 standard for defining info about the component (usually the name)\n   */\n  ariaLabel?: LocalizableText;\n}\n\nexport interface ComponentHoverChangedEventArgs extends NoArgs {\n  /**\n   * True is the component is hovered, else false.\n   */\n  hovered: boolean;\n}\n\n/**\n * The base class of the UI framework.\n * Each component must extend this class and optionally the config interface.\n */\nexport class Component<Config extends ComponentConfig> {\n  /**\n   * The classname that is attached to the element when it is in the hidden state.\n   * @type {string}\n   */\n  private static readonly CLASS_HIDDEN = 'hidden';\n\n  /**\n   * The classname that is attached to the element when it is in the disabled state.\n   * @type {string}\n   */\n  private static readonly CLASS_DISABLED = 'disabled';\n\n  /**\n   * Configuration object of this component.\n   */\n  protected config: Config;\n\n  /**\n   * The component's DOM element.\n   */\n  private element: DOM;\n\n  /**\n   * Flag that keeps track of the hidden state.\n   */\n  private hidden: boolean;\n\n  /**\n   * Flat that keeps track of the disabled state.\n   */\n  private disabled: boolean;\n\n  /**\n   * Flag that keeps track of the hover state.\n   */\n  private hovered: boolean;\n\n  /**\n   * The list of events that this component offers. These events should always be private and only directly\n   * accessed from within the implementing component.\n   *\n   * Because TypeScript does not support private properties with the same name on different class hierarchy levels\n   * (i.e. superclass and subclass cannot contain a private property with the same name), the default naming\n   * convention for the event list of a component that should be followed by subclasses is the concatenation of the\n   * camel-cased class name + 'Events' (e.g. SubClass extends Component => subClassEvents).\n   * See {@link #componentEvents} for an example.\n   *\n   * Event properties should be named in camel case with an 'on' prefix and in the present tense. Async events may\n   * have a start event (when the operation starts) in the present tense, and must have an end event (when the\n   * operation ends) in the past tense (or present tense in special cases (e.g. onStart/onStarted or onPlay/onPlaying).\n   * See {@link #componentEvents#onShow} for an example.\n   *\n   * Each event should be accompanied with a protected method named by the convention eventName + 'Event'\n   * (e.g. onStartEvent), that actually triggers the event by calling {@link EventDispatcher#dispatch dispatch} and\n   * passing a reference to the component as first parameter. Components should always trigger their events with these\n   * methods. Implementing this pattern gives subclasses means to directly listen to the events by overriding the\n   * method (and saving the overhead of passing a handler to the event dispatcher) and more importantly to trigger\n   * these events without having access to the private event list.\n   * See {@link #onShow} for an example.\n   *\n   * To provide external code the possibility to listen to this component's events (subscribe, unsubscribe, etc.),\n   * each event should also be accompanied by a public getter function with the same name as the event's property,\n   * that returns the {@link Event} obtained from the event dispatcher by calling {@link EventDispatcher#getEvent}.\n   * See {@link #onShow} for an example.\n   *\n   * Full example for an event representing an example action in a example component:\n   *\n   * <code>\n   * // Define an example component class with an example event\n   * class ExampleComponent extends Component<ComponentConfig> {\n   *\n   *     private exampleComponentEvents = {\n   *         onExampleAction: new EventDispatcher<ExampleComponent, NoArgs>()\n   *     }\n   *\n   *     // constructor and other stuff...\n   *\n   *     protected onExampleActionEvent() {\n   *        this.exampleComponentEvents.onExampleAction.dispatch(this);\n   *    }\n   *\n   *    get onExampleAction(): Event<ExampleComponent, NoArgs> {\n   *        return this.exampleComponentEvents.onExampleAction.getEvent();\n   *    }\n   * }\n   *\n   * // Create an instance of the component somewhere\n   * var exampleComponentInstance = new ExampleComponent();\n   *\n   * // Subscribe to the example event on the component\n   * exampleComponentInstance.onExampleAction.subscribe(function (sender: ExampleComponent) {\n   *     console.log('onExampleAction of ' + sender + ' has fired!');\n   * });\n   * </code>\n   */\n  private componentEvents = {\n    onShow: new EventDispatcher<Component<Config>, NoArgs>(),\n    onHide: new EventDispatcher<Component<Config>, NoArgs>(),\n    onHoverChanged: new EventDispatcher<Component<Config>, ComponentHoverChangedEventArgs>(),\n    onEnabled: new EventDispatcher<Component<Config>, NoArgs>(),\n    onDisabled: new EventDispatcher<Component<Config>, NoArgs>(),\n  };\n\n  /**\n   * Constructs a component with an optionally supplied config. All subclasses must call the constructor of their\n   * superclass and then merge their configuration into the component's configuration.\n   * @param config the configuration for the component\n   */\n  constructor(config: ComponentConfig = {}) {\n    // Create the configuration for this component\n    this.config = <Config>this.mergeConfig(\n      config,\n      {\n        tag: 'div',\n        id: '{{PREFIX}}-id-' + Guid.next(),\n        cssPrefix: '{{PREFIX}}',\n        cssClass: 'ui-component',\n        cssClasses: [],\n        hidden: false,\n        disabled: false,\n      },\n      {},\n    );\n  }\n\n  /**\n   * Initializes the component, e.g. by applying config settings.\n   * This method must not be called from outside the UI framework.\n   *\n   * This method is automatically called by the {@link UIInstanceManager}. If the component is an inner component of\n   * some component, and thus encapsulated abd managed internally and never directly exposed to the UIManager,\n   * this method must be called from the managing component's {@link #initialize} method.\n   */\n  initialize(): void {\n    this.hidden = this.config.hidden;\n    this.disabled = this.config.disabled;\n\n    // Hide the component at initialization if it is configured to be hidden\n    if (this.isHidden()) {\n      this.hidden = false; // Set flag to false for the following hide() call to work (hide() checks the flag)\n      this.hide();\n    }\n\n    // Disable the component at initialization if it is configured to be disabled\n    if (this.isDisabled()) {\n      this.disabled = false; // Set flag to false for the following disable() call to work (disable() checks the flag)\n      this.disable();\n    }\n  }\n\n  /**\n   * Configures the component for the supplied Player and UIInstanceManager. This is the place where all the magic\n   * happens, where components typically subscribe and react to events (on their DOM element, the Player, or the\n   * UIInstanceManager), and basically everything that makes them interactive.\n   * This method is called only once, when the UIManager initializes the UI.\n   *\n   * Subclasses usually overwrite this method to add their own functionality.\n   *\n   * @param player the player which this component controls\n   * @param uimanager the UIInstanceManager that manages this component\n   */\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    this.onShow.subscribe(() => {\n      uimanager.onComponentShow.dispatch(this);\n    });\n    this.onHide.subscribe(() => {\n      uimanager.onComponentHide.dispatch(this);\n    });\n\n    // Track the hovered state of the element\n    this.getDomElement().on('mouseenter', () => {\n      this.onHoverChangedEvent(true);\n    });\n    this.getDomElement().on('mouseleave', () => {\n      this.onHoverChangedEvent(false);\n    });\n  }\n\n  /**\n   * Releases all resources and dependencies that the component holds. Player, DOM, and UIManager events are\n   * automatically removed during release and do not explicitly need to be removed here.\n   * This method is called by the UIManager when it releases the UI.\n   *\n   * Subclasses that need to release resources should override this method and call super.release().\n   */\n  release(): void {\n    // Nothing to do here, override where necessary\n  }\n\n  /**\n   * Generate the DOM element for this component.\n   *\n   * Subclasses usually overwrite this method to extend or replace the DOM element with their own design.\n   */\n  protected toDomElement(): DOM {\n    let element = new DOM(this.config.tag, {\n      id: this.config.id,\n      class: this.getCssClasses(),\n      role: this.config.role,\n    });\n\n    return element;\n  }\n\n  /**\n   * Returns the DOM element of this component. Creates the DOM element if it does not yet exist.\n   *\n   * Should not be overwritten by subclasses.\n   *\n   * @returns {DOM}\n   */\n  getDomElement(): DOM {\n    if (!this.element) {\n      this.element = this.toDomElement();\n    }\n\n    return this.element;\n  }\n\n  /**\n   * Checks if this component has a DOM element.\n   */\n  hasDomElement(): boolean {\n    return Boolean(this.element);\n  }\n\n  setAriaLabel(label: LocalizableText): void {\n    this.setAriaAttr('label', i18n.performLocalization(label));\n  }\n\n  setAriaAttr(name: string, value: string) {\n    this.getDomElement().attr(`aria-${name}`, value);\n  }\n\n  /**\n   * Merges a configuration with a default configuration and a base configuration from the superclass.\n   *\n   * @param config the configuration settings for the components, as usually passed to the constructor\n   * @param defaults a default configuration for settings that are not passed with the configuration\n   * @param base configuration inherited from a superclass\n   * @returns {Config}\n   */\n  protected mergeConfig<Config>(config: Config, defaults: Config, base: Config): Config {\n    // Extend default config with supplied config\n    let merged = Object.assign({}, base, defaults, config);\n\n    // Return the extended config\n    return merged;\n  }\n\n  /**\n   * Helper method that returns a string of all CSS classes of the component.\n   *\n   * @returns {string}\n   */\n  protected getCssClasses(): string {\n    // Merge all CSS classes into single array\n    let flattenedArray = [this.config.cssClass].concat(this.config.cssClasses);\n    // Prefix classes\n    flattenedArray = flattenedArray.map((css) => {\n      return this.prefixCss(css);\n    });\n    // Join array values into a string\n    let flattenedString = flattenedArray.join(' ');\n    // Return trimmed string to prevent whitespace at the end from the join operation\n    return flattenedString.trim();\n  }\n\n  protected prefixCss(cssClassOrId: string): string {\n    return this.config.cssPrefix + '-' + cssClassOrId;\n  }\n\n  /**\n   * Returns the configuration object of the component.\n   * @returns {Config}\n   */\n  public getConfig(): Config {\n    return this.config;\n  }\n\n  /**\n   * Hides the component if shown.\n   * This method basically transfers the component into the hidden state. Actual hiding is done via CSS.\n   */\n  hide() {\n    if (!this.hidden) {\n      this.hidden = true;\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_HIDDEN));\n      this.onHideEvent();\n    }\n  }\n\n  /**\n   * Shows the component if hidden.\n   */\n  show() {\n    if (this.hidden) {\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_HIDDEN));\n      this.hidden = false;\n      this.onShowEvent();\n    }\n  }\n\n  /**\n   * Determines if the component is hidden.\n   * @returns {boolean} true if the component is hidden, else false\n   */\n  isHidden(): boolean {\n    return this.hidden;\n  }\n\n  /**\n   * Determines if the component is shown.\n   * @returns {boolean} true if the component is visible, else false\n   */\n  isShown(): boolean {\n    return !this.isHidden();\n  }\n\n  /**\n   * Toggles the hidden state by hiding the component if it is shown, or showing it if hidden.\n   */\n  toggleHidden() {\n    if (this.isHidden()) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Disables the component.\n   * This method basically transfers the component into the disabled state. Actual disabling is done via CSS or child\n   * components. (e.g. Button needs to unsubscribe click listeners)\n   */\n  disable(): void {\n    if (!this.disabled) {\n      this.disabled = true;\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_DISABLED));\n      this.onDisabledEvent();\n    }\n  }\n\n  /**\n   * Enables the component.\n   * This method basically transfers the component into the enabled state. Actual enabling is done via CSS or child\n   * components. (e.g. Button needs to subscribe click listeners)\n   */\n  enable(): void {\n    if (this.disabled) {\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_DISABLED));\n      this.disabled = false;\n      this.onEnabledEvent();\n    }\n  }\n\n  /**\n   * Determines if the component is disabled.\n   * @returns {boolean} true if the component is disabled, else false\n   */\n  isDisabled(): boolean {\n    return this.disabled;\n  }\n\n  /**\n   * Determines if the component is enabled.\n   * @returns {boolean} true if the component is enabled, else false\n   */\n  isEnabled(): boolean {\n    return !this.isDisabled();\n  }\n\n  /**\n   * Determines if the component is currently hovered.\n   * @returns {boolean} true if the component is hovered, else false\n   */\n  isHovered(): boolean {\n    return this.hovered;\n  }\n\n  /**\n   * Fires the onShow event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onShowEvent(): void {\n    this.componentEvents.onShow.dispatch(this);\n  }\n\n  /**\n   * Fires the onHide event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onHideEvent(): void {\n    this.componentEvents.onHide.dispatch(this);\n  }\n\n  /**\n   * Fires the onEnabled event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onEnabledEvent(): void {\n    this.componentEvents.onEnabled.dispatch(this);\n  }\n\n  /**\n   * Fires the onDisabled event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onDisabledEvent(): void {\n    this.componentEvents.onDisabled.dispatch(this);\n  }\n\n  /**\n   * Fires the onHoverChanged event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onHoverChangedEvent(hovered: boolean): void {\n    this.hovered = hovered;\n    this.componentEvents.onHoverChanged.dispatch(this, { hovered: hovered });\n  }\n\n  /**\n   * Gets the event that is fired when the component is showing.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onShow(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onShow.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is hiding.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onHide(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onHide.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is enabling.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onEnabled(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onEnabled.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is disabling.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onDisabled(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onDisabled.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component's hover-state is changing.\n   * @returns {Event<Component<Config>, ComponentHoverChangedEventArgs>}\n   */\n  get onHoverChanged(): Event<Component<Config>, ComponentHoverChangedEventArgs> {\n    return this.componentEvents.onHoverChanged.getEvent();\n  }\n}\n","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {ArrayUtils} from '../arrayutils';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Container}.\n */\nexport interface ContainerConfig extends ComponentConfig {\n  /**\n   * Child components of the container.\n   */\n  components?: Component<ComponentConfig>[];\n}\n\n/**\n * A container component that can contain a collection of child components.\n * Components can be added at construction time through the {@link ContainerConfig#components} setting, or later\n * through the {@link Container#addComponent} method. The UIManager automatically takes care of all components, i.e. it\n * initializes and configures them automatically.\n *\n * In the DOM, the container consists of an outer <div> (that can be configured by the config) and an inner wrapper\n * <div> that contains the components. This double-<div>-structure is often required to achieve many advanced effects\n * in CSS and/or JS, e.g. animations and certain formatting with absolute positioning.\n *\n * DOM example:\n * <code>\n *     <div class='ui-container'>\n *         <div class='container-wrapper'>\n *             ... child components ...\n *         </div>\n *     </div>\n * </code>\n */\nexport class Container<Config extends ContainerConfig> extends Component<Config> {\n\n  /**\n   * A reference to the inner element that contains the components of the container.\n   */\n  private innerContainerElement: DOM;\n  private componentsToAdd: Component<ComponentConfig>[];\n  private componentsToRemove: Component<ComponentConfig>[];\n\n  constructor(config: Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-container',\n      components: [],\n    } as Config, this.config);\n\n    this.componentsToAdd = [];\n    this.componentsToRemove = [];\n  }\n\n  /**\n   * Adds a child component to the container.\n   * @param component the component to add\n   */\n  addComponent(component: Component<ComponentConfig>) {\n    this.config.components.push(component);\n    this.componentsToAdd.push(component);\n  }\n\n  /**\n   * Removes a child component from the container.\n   * @param component the component to remove\n   * @returns {boolean} true if the component has been removed, false if it is not contained in this container\n   */\n  removeComponent(component: Component<ComponentConfig>): boolean {\n    if (ArrayUtils.remove(this.config.components, component) != null) {\n      this.componentsToRemove.push(component);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Gets an array of all child components in this container.\n   * @returns {Component<ComponentConfig>[]}\n   */\n  getComponents(): Component<ComponentConfig>[] {\n    return this.config.components;\n  }\n\n  /**\n   * Removes all child components from the container.\n   */\n  removeComponents(): void {\n    for (let component of this.getComponents().slice()) {\n      this.removeComponent(component);\n    }\n  }\n\n  /**\n   * Updates the DOM of the container with the current components.\n   */\n  protected updateComponents(): void {\n    /* We cannot just clear the container to remove all elements and then re-add those that should stay, because\n     * IE looses the innerHTML of unattached elements, leading to empty elements within the container (e.g. missing\n     * subtitle text in SubtitleLabel).\n     * Instead, we keep a list of elements to add and remove, leaving remaining elements alone. By keeping them in\n     * the DOM, their content gets preserved in all browsers.\n     */\n    let component;\n\n    while (component = this.componentsToRemove.shift()) {\n      component.getDomElement().remove();\n    }\n\n    while (component = this.componentsToAdd.shift()) {\n      this.innerContainerElement.append(component.getDomElement());\n    }\n  }\n\n  protected toDomElement(): DOM {\n    // Create the container element (the outer <div>)\n    let containerElement = new DOM(this.config.tag, {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': this.config.role,\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n    });\n\n    // Create the inner container element (the inner <div>) that will contain the components\n    let innerContainer = new DOM(this.config.tag, {\n      'class': this.prefixCss('container-wrapper'),\n    });\n    this.innerContainerElement = innerContainer;\n\n    for (let initialComponent of this.config.components) {\n      this.componentsToAdd.push(initialComponent);\n    }\n    this.updateComponents();\n\n    containerElement.append(innerContainer);\n\n    return containerElement;\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {UIUtils} from '../uiutils';\nimport {Spacer} from './spacer';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { BrowserUtils } from '../browserutils';\nimport {Component, ComponentConfig} from './component';\nimport {SettingsPanel} from './settingspanel';\n\n/**\n * Configuration interface for the {@link ControlBar}.\n */\nexport interface ControlBarConfig extends ContainerConfig {\n  // nothing yet\n}\n\n/**\n * A container for main player control components, e.g. play toggle button, seek bar, volume control, fullscreen toggle\n * button.\n */\nexport class ControlBar extends Container<ControlBarConfig> {\n\n  constructor(config: ControlBarConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-controlbar',\n      hidden: true,\n      role: 'region',\n      ariaLabel: i18n.getLocalizer('controlBar'),\n    }, <ControlBarConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // Counts how many components are hovered and block hiding of the control bar\n    let hoverStackCount = 0;\n    let isSettingsPanelShown = false;\n\n    // only enabling this for non-mobile platforms without touch input. enabling this\n    // for touch devices causes the UI to not disappear after hideDelay seconds.\n    // Instead, it will stay visible until another manual interaction is performed.\n    if (uimanager.getConfig().disableAutoHideWhenHovered && !BrowserUtils.isMobile) {\n      // Track hover status of child components\n      UIUtils.traverseTree(this, (component) => {\n        // Do not track hover status of child containers or spacers, only of 'real' controls\n        if (component instanceof Container || component instanceof Spacer) {\n          return;\n        }\n\n        // Subscribe hover event and keep a count of the number of hovered children\n        component.onHoverChanged.subscribe((_, args) => {\n          if (args.hovered) {\n            hoverStackCount++;\n          } else {\n            hoverStackCount--;\n          }\n        });\n      });\n    }\n\n    if (BrowserUtils.isMobile) {\n      uimanager.onComponentShow.subscribe((component: Component<ComponentConfig>) => {\n        if (component instanceof SettingsPanel) {\n          isSettingsPanelShown = true;\n        }\n      });\n\n      uimanager.onComponentHide.subscribe((component: Component<ComponentConfig>) => {\n        if (component instanceof SettingsPanel) {\n          isSettingsPanelShown = false;\n        }\n      });\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      this.show();\n    });\n\n    uimanager.onPreviewControlsHide.subscribe((sender, args) => {\n      // Cancel the hide event if hovered child components block hiding or if the settings panel is active on mobile.\n      args.cancel = args.cancel || (hoverStackCount > 0 || isSettingsPanelShown);\n    });\n\n    uimanager.onControlsHide.subscribe(() => {\n      this.hide();\n    });\n  }\n}\n","import { Container, ContainerConfig } from './container';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link Controls}.\n */\nexport interface ControlsConfig extends ContainerConfig {\n  /**\n   * Specifies if the title bar should stay hidden when no metadata label contains any text. Does not make a lot\n   * of sense if the title bar contains other components than just MetadataLabels (like in the default configuration).\n   * Default: false\n   */\n  keepHiddenWithoutMetadata?: boolean;\n}\n\n/**\n * Displays a title bar containing a label with the title of the video.\n */\nexport class Controls extends Container<ControlsConfig> {\n  constructor(config: ControlsConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClass: 'ui-controls',\n        hidden: true,\n        components: [],\n        keepHiddenWithoutMetadata: false,\n      },\n      <ControlsConfig>this.config,\n    );\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let shouldBeShown = !this.isHidden();\n\n    let checkMetadataTextAndUpdateVisibility = () => {\n      if (this.isShown()) {\n        // Hide a visible Controls if it does not contain any text and the hidden flag is set\n        if (config.keepHiddenWithoutMetadata) {\n          this.hide();\n        }\n      } else if (shouldBeShown) {\n        // Show a hidden Controls if it should actually be shown\n        this.show();\n      }\n    };\n\n    uimanager.onControlsShow.subscribe(() => {\n      shouldBeShown = true;\n      if (!config.keepHiddenWithoutMetadata) {\n        this.show();\n      }\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      shouldBeShown = false;\n      this.hide();\n    });\n\n    // init\n    checkMetadataTextAndUpdateVisibility();\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\n\ndeclare const window: any;\n\nexport class CustomCloseButton extends ToggleButton<ToggleButtonConfig> {\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-customclosetogglebutton',\n      text: 'close',\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    if (window.bitmovin.customMessageHandler) {\n      window.bitmovin.customMessageHandler.on('toggleCloseButton', (data?: string) => {\n        if (this.isEnabled()) {\n          this.disable();\n        } else {\n          this.enable();\n        }\n      });\n\n      this.onClick.subscribe(() => {\n        let result = window.bitmovin.customMessageHandler.sendSynchronous('closePlayer');\n        console.log('Return value from native:', result);\n        window.bitmovin.customMessageHandler.sendAsynchronous('closePlayerAsync');\n      });\n    }\n\n    const handlerError = () => {\n      this.enable();\n    };\n\n    player.on(player.exports.PlayerEvent.Error, handlerError);\n  }\n}\n","import { ContainerConfig, Container } from './container';\nimport { Label, LabelConfig } from './label';\nimport { UIInstanceManager } from '../uimanager';\nimport { ErrorUtils } from '../errorutils';\nimport { ErrorEvent, PlayerAPI, PlayerEventBase } from 'bitmovin-player';\nimport {\n  isMobileV3PlayerAPI,\n  MobileV3PlayerAPI,\n  MobileV3PlayerErrorEvent,\n  MobileV3PlayerEvent,\n  MobileV3SourceErrorEvent,\n} from '../mobilev3playerapi';\n\nexport interface ErrorMessageTranslator {\n  (error: ErrorEvent | MobileV3PlayerErrorEvent): string;\n}\n\nexport interface ErrorMessageMap {\n  [code: number]: string | ErrorMessageTranslator;\n}\n\n/**\n * Configuration interface for the {@link ErrorMessageOverlay}.\n */\nexport interface ErrorMessageOverlayConfig extends ContainerConfig {\n  /**\n   * Allows overwriting of the error messages displayed in the overlay for customization and localization.\n   * This is either a function that receives any {@link ErrorEvent} as parameter and translates error messages,\n   * or a map of error codes that overwrites specific error messages with a plain string or a function that\n   * receives the {@link ErrorEvent} as parameter and returns a customized string.\n   * The translation functions can be used to extract data (e.g. parameters) from the original error message.\n   *\n   * Example 1 (catch-all translation function):\n   * <code>\n   * errorMessageOverlayConfig = {\n   *   messages: function(error) {\n   *     switch (error.code) {\n   *       // Overwrite error 1000 'Unknown error'\n   *       case 1000:\n   *         return 'Houston, we have a problem'\n   *\n   *       // Transform error 1201 'The downloaded manifest is invalid' to uppercase\n   *       case 1201:\n   *         var description = ErrorUtils.defaultErrorMessages[error.code];\n   *         return description.toUpperCase();\n   *\n   *       // Customize error 1207 'The manifest could not be loaded'\n   *       case 1207:\n   *         var statusCode = error.data.statusCode;\n   *         return 'Manifest loading failed with HTTP error ' + statusCode;\n   *     }\n   *     // Return unmodified error message for all other errors\n   *     return error.message;\n   *   }\n   * };\n   * </code>\n   *\n   * Example 2 (translating specific errors):\n   * <code>\n   * errorMessageOverlayConfig = {\n   *   messages: {\n   *     // Overwrite error 1000 'Unknown error'\n   *     1000: 'Houston, we have a problem',\n   *\n   *     // Transform error 1201 'Unsupported manifest format' to uppercase\n   *     1201: function(error) {\n   *       var description = ErrorUtils.defaultErrorMessages[error.code];\n   *       return description.toUpperCase();\n   *     },\n   *\n   *     // Customize error 1207 'The manifest could not be loaded'\n   *     1207: function(error) {\n   *       var statusCode = error.data.statusCode;\n   *       return 'Manifest loading failed with HTTP error ' + statusCode;\n   *     }\n   *   }\n   * };\n   * </code>\n   */\n  messages?: ErrorMessageMap | ErrorMessageTranslator;\n}\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class ErrorMessageOverlay extends Container<ErrorMessageOverlayConfig> {\n  private errorLabel: Label<LabelConfig>;\n\n  constructor(config: ErrorMessageOverlayConfig = {}) {\n    super(config);\n\n    this.errorLabel = new Label<LabelConfig>({ cssClass: 'ui-errormessage-label' });\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClass: 'ui-errormessage-overlay',\n        components: [this.errorLabel],\n        hidden: true,\n      },\n      this.config,\n    );\n  }\n\n  configure(player: PlayerAPI | MobileV3PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    const handleErrorMessage = (\n      event: ErrorEvent | MobileV3SourceErrorEvent | MobileV3PlayerErrorEvent,\n      message: string,\n    ) => {\n      const customizedMessage = customizeErrorMessage(\n        uimanager.getConfig().errorMessages || config.messages,\n        event,\n      );\n      if (customizedMessage) {\n        message = customizedMessage;\n      }\n\n      this.display(message);\n    };\n\n    if (isMobileV3PlayerAPI(player)) {\n      const errorEventHandler = (event: MobileV3SourceErrorEvent | MobileV3PlayerErrorEvent) => {\n        const message = ErrorUtils.defaultMobileV3ErrorMessageTranslator(event);\n        handleErrorMessage(event, message);\n      };\n\n      player.on(MobileV3PlayerEvent.PlayerError, errorEventHandler);\n      player.on(MobileV3PlayerEvent.SourceError, errorEventHandler);\n    } else {\n      player.on(player.exports.PlayerEvent.Error, (event: ErrorEvent) => {\n        let message = ErrorUtils.defaultWebErrorMessageTranslator(event);\n        handleErrorMessage(event, message);\n      });\n    }\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, (event: PlayerEventBase) => {\n      if (this.isShown()) {\n        this.hide();\n      }\n    });\n  }\n\n  display(errorMessage: string): void {\n    this.errorLabel.setText(errorMessage);\n    this.show();\n  }\n\n  release(): void {\n    super.release();\n  }\n}\n\nfunction customizeErrorMessage(\n  errorMessages: ErrorMessageTranslator | ErrorMessageMap,\n  event: ErrorEvent | MobileV3PlayerErrorEvent | MobileV3SourceErrorEvent,\n): string | undefined {\n  if (!errorMessages) {\n    return undefined;\n  }\n\n  // Process message vocabularies\n  if (typeof errorMessages === 'function') {\n    // Translation function for all errors\n    return errorMessages(event);\n  }\n  if (errorMessages[event.code]) {\n    // It's not a translation function, so it must be a map of strings or translation functions\n    const customMessage = errorMessages[event.code];\n\n    return typeof customMessage === 'string' ? customMessage : customMessage(event);\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\n\ndeclare const window: any;\n\nexport class ForwardButton extends ToggleButton<ToggleButtonConfig> {\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-forward',\n      text: 'forward',\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    if (window.bitmovin.customMessageHandler) {\n      window.bitmovin.customMessageHandler.on('toggleForwardButton', (data?: string) => {\n        if (this.isEnabled()) {\n          this.disable();\n        } else {\n          this.enable();\n        }\n      });\n\n      this.onClick.subscribe(() => {\n        let result = window.bitmovin.customMessageHandler.sendSynchronous('forwardButton');\n        console.log('Return value from native:', result);\n        window.bitmovin.customMessageHandler.sendAsynchronous('forwardButtonAsync');\n      });\n    }\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles the player between windowed and fullscreen view.\n */\nexport class FullscreenToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-fullscreentogglebutton',\n      text: i18n.getLocalizer('fullscreen'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const isFullScreenAvailable = () => {\n      return player.isViewModeAvailable(player.exports.ViewMode.Fullscreen);\n    };\n\n    const fullscreenStateHandler = () => {\n      player.getViewMode() === player.exports.ViewMode.Fullscreen ? this.on() : this.off();\n    };\n\n    const fullscreenAvailabilityChangedHandler = () => {\n      isFullScreenAvailable() ? this.show() : this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, fullscreenStateHandler);\n\n    // Available only in our native SDKs for now\n    if ((player.exports.PlayerEvent as any).ViewModeAvailabilityChanged) {\n      player.on(\n        (player.exports.PlayerEvent as any).ViewModeAvailabilityChanged,\n        fullscreenAvailabilityChangedHandler,\n      );\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(fullscreenAvailabilityChangedHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isFullScreenAvailable()) {\n        if (console) {\n          console.log('Fullscreen unavailable');\n        }\n        return;\n      }\n\n      const targetViewMode =\n        player.getViewMode() === player.exports.ViewMode.Fullscreen\n          ? player.exports.ViewMode.Inline\n          : player.exports.ViewMode.Fullscreen;\n\n      player.setViewMode(targetViewMode);\n    });\n\n    // Startup init\n    fullscreenAvailabilityChangedHandler();\n    fullscreenStateHandler();\n  }\n}\n","import {PlaybackToggleButton, PlaybackToggleButtonConfig} from './playbacktogglebutton';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that overlays the video and toggles between playback and pause.\n */\nexport class HugePlaybackToggleButton extends PlaybackToggleButton {\n\n  constructor(config: PlaybackToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-hugeplaybacktogglebutton',\n      text: i18n.getLocalizer('playPause'),\n      role: 'button',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Update button state through API events\n    super.configure(player, uimanager, false);\n\n    // Set enterFullscreenOnInitialPlayback if set in the uimanager config\n    if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {\n      this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;\n    }\n\n    let togglePlayback = () => {\n      if (player.isPlaying() || this.isPlayInitiated) {\n        player.pause('ui');\n      } else {\n        player.play('ui');\n      }\n    };\n\n    let toggleFullscreen = () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        player.setViewMode(player.exports.ViewMode.Inline);\n      } else {\n        player.setViewMode(player.exports.ViewMode.Fullscreen);\n      }\n    };\n\n    let firstPlay = true;\n    let clickTime = 0;\n    let doubleClickTime = 0;\n\n    /*\n     * YouTube-style toggle button handling\n     *\n     * The goal is to prevent a short pause or playback interval between a click, that toggles playback, and a\n     * double click, that toggles fullscreen. In this naive approach, the first click would e.g. start playback,\n     * the second click would be detected as double click and toggle to fullscreen, and as second normal click stop\n     * playback, which results is a short playback interval with max length of the double click detection\n     * period (usually 500ms).\n     *\n     * To solve this issue, we defer handling of the first click for 200ms, which is almost unnoticeable to the user,\n     * and just toggle playback if no second click (double click) has been registered during this period. If a double\n     * click is registered, we just toggle the fullscreen. In the first 200ms, undesired playback changes thus cannot\n     * happen. If a double click is registered within 500ms, we undo the playback change and switch fullscreen mode.\n     * In the end, this method basically introduces a 200ms observing interval in which playback changes are prevented\n     * if a double click happens.\n     */\n    this.onClick.subscribe(() => {\n      // Directly start playback on first click of the button.\n      // This is a required workaround for mobile browsers where video playback needs to be triggered directly\n      // by the user. A deferred playback start through the timeout below is not considered as user action and\n      // therefore ignored by mobile browsers.\n      if (firstPlay) {\n        // Try to start playback. Then we wait for Play and only when it arrives, we disable the firstPlay flag.\n        // If we disable the flag here, onClick was triggered programmatically instead of by a user interaction, and\n        // playback is blocked (e.g. on mobile devices due to the programmatic play() call), we loose the chance to\n        // ever start playback through a user interaction again with this button.\n        togglePlayback();\n\n        if (this.config.enterFullscreenOnInitialPlayback) {\n          player.setViewMode(player.exports.ViewMode.Fullscreen);\n        }\n\n        return;\n      }\n\n      let now = Date.now();\n\n      if (now - clickTime < 200) {\n        // We have a double click inside the 200ms interval, just toggle fullscreen mode\n        toggleFullscreen();\n        doubleClickTime = now;\n        return;\n      } else if (now - clickTime < 500) {\n        // We have a double click inside the 500ms interval, undo playback toggle and toggle fullscreen mode\n        toggleFullscreen();\n        togglePlayback();\n        doubleClickTime = now;\n        return;\n      }\n\n      clickTime = now;\n\n      setTimeout(() => {\n        if (Date.now() - doubleClickTime > 200) {\n          // No double click detected, so we toggle playback and wait what happens next\n          togglePlayback();\n        }\n      }, 200);\n    });\n\n    player.on(player.exports.PlayerEvent.Play, () => {\n      // Playback has really started, we can disable the flag to switch to normal toggle button handling\n      firstPlay = false;\n    });\n\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        // if playback could not be started, reset the first play flag as we need the user interaction to start\n        firstPlay = true;\n      }\n    });\n\n    const suppressPlayButtonTransitionAnimation = () => {\n      // Disable the current animation\n      this.setTransitionAnimationsEnabled(false);\n\n      // Enable the transition animations for the next state change\n      this.onToggle.subscribeOnce(() => {\n        this.setTransitionAnimationsEnabled(true);\n      });\n    };\n\n    // Hide the play button animation when the UI is loaded (it should only be animated on state changes)\n    suppressPlayButtonTransitionAnimation();\n\n    const isAutoplayEnabled = player.getConfig().playback && Boolean(player.getConfig().playback.autoplay);\n    // We only know if an autoplay attempt is upcoming if the player is not yet ready. It the player is already ready,\n    // the attempt might be upcoming or might have already happened, but we don't have to handle that because we can\n    // simply rely on isPlaying and the play state events.\n    const isAutoplayUpcoming = !player.getSource() && isAutoplayEnabled;\n\n    // Hide the play button when the player is already playing or autoplay is upcoming\n    if (player.isPlaying() || isAutoplayUpcoming) {\n      // Hide the play button (switch to playing state)\n      this.on();\n      // Disable the animation of the playing state switch\n      suppressPlayButtonTransitionAnimation();\n\n      // Show the play button without an animation if a play attempt is blocked\n      player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n        if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n          suppressPlayButtonTransitionAnimation();\n        }\n      });\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(new DOM('div', {\n      'class': this.prefixCss('image'),\n    }));\n\n    return buttonElement;\n  }\n\n  /**\n   * Enables or disables the play state transition animations of the play button image. Can be used to suppress\n   * animations.\n   * @param {boolean} enabled true to enable the animations (default), false to disable them\n   */\n  protected setTransitionAnimationsEnabled(enabled: boolean): void {\n    const noTransitionAnimationsClass = this.prefixCss('no-transition-animations');\n\n    if (enabled) {\n      this.getDomElement().removeClass(noTransitionAnimationsClass);\n    } else if (!this.getDomElement().hasClass(noTransitionAnimationsClass)) {\n      this.getDomElement().addClass(noTransitionAnimationsClass);\n    }\n  }\n}\n","import {ButtonConfig, Button} from './button';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button to play/replay a video.\n */\nexport class HugeReplayButton extends Button<ButtonConfig> {\n\n  constructor(config: ButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-hugereplaybutton',\n      text: i18n.getLocalizer('replay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      player.play('ui');\n    });\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(new DOM('div', {\n      'class': this.prefixCss('image'),\n    }));\n\n    return buttonElement;\n  }\n}","import {ListSelector, ListSelectorConfig} from './listselector';\nimport {DOM} from '../dom';\nimport { i18n } from '../localization/i18n';\n\nexport class ItemSelectionList extends ListSelector<ListSelectorConfig> {\n\n  private static readonly CLASS_SELECTED = 'selected';\n\n  private listElement: DOM;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      tag: 'ul',\n      cssClass: 'ui-itemselectionlist',\n    }, this.config);\n  }\n\n  protected isActive(): boolean {\n    return this.items.length > 1;\n  }\n\n  protected toDomElement(): DOM {\n    let listElement = new DOM('ul', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.listElement = listElement;\n    this.updateDomItems();\n\n    return listElement;\n  }\n\n  protected updateDomItems(selectedValue: string = null) {\n    // Delete all children\n    this.listElement.empty();\n\n    let selectedListItem: DOM = null;\n\n    const selectItem = (listItem: DOM) => {\n      listItem.addClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\n    };\n\n    const deselectItem = (listItem: DOM) => {\n      listItem.removeClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\n    };\n\n    for (let item of this.items) {\n      let listItem = new DOM('li', {\n        'type': 'li',\n        'class': this.prefixCss('ui-selectionlistitem'),\n      }).append(new DOM('a', {\n      }).html(i18n.performLocalization(item.label)));\n\n      if (!selectedListItem) {\n        if (selectedValue == null) { // If there is no pre-selected value, select the first one\n          selectedListItem = listItem;\n        } else if (String(selectedValue) === item.key) { // convert selectedValue to string to catch 'null'/null case\n          selectedListItem = listItem;\n        }\n      }\n\n      // Handle list item selections\n      listItem.on('click', () => {\n        // Deselect the previous item (if there was a selected item)\n        if (selectedListItem) {\n          deselectItem(selectedListItem);\n        }\n\n        // Select the clicked item\n        selectedListItem = listItem;\n        selectItem(listItem);\n\n        // Fire the event\n        this.onItemSelectedEvent(item.key, false);\n      });\n\n      // Select default item\n      if (selectedListItem) {\n        selectItem(selectedListItem);\n      }\n\n      this.listElement.append(listItem);\n    }\n  }\n\n  protected onItemAddedEvent(value: string) {\n    super.onItemAddedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemRemovedEvent(value: string) {\n    super.onItemRemovedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\n    super.onItemSelectedEvent(value);\n    if (updateDomItems) {\n      this.updateDomItems(value);\n    }\n  }\n}\n","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {EventDispatcher, Event, NoArgs} from '../eventdispatcher';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Label} component.\n */\nexport interface LabelConfig extends ComponentConfig {\n  /**\n   * The text as string or localize callback on the label.\n   */\n  text?: LocalizableText;\n\n  /**\n   * WCAG20 standard: Associate label to form control.\n   */\n  for?: string;\n}\n\n/**\n * A simple text label.\n *\n * DOM example:\n * <code>\n *     <span class='ui-label'>...some text...</span>\n * </code>\n */\nexport class Label<Config extends LabelConfig> extends Component<Config> {\n\n  private text: LocalizableText;\n\n  private labelEvents = {\n    onClick: new EventDispatcher<Label<Config>, NoArgs>(),\n    onTextChanged: new EventDispatcher<Label<Config>, string>(),\n  };\n\n  constructor(config: Config = {} as Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-label',\n    } as Config, this.config);\n    this.text = this.config.text;\n  }\n\n  protected toDomElement(): DOM {\n    const tagName = this.config.for != null ? 'label' : 'span';\n\n    let labelElement = new DOM(tagName, {\n      'id': this.config.id,\n      'for': this.config.for,\n      'class': this.getCssClasses(),\n    }).html(i18n.performLocalization(this.text));\n\n    labelElement.on('click', () => {\n      this.onClickEvent();\n    });\n\n    return labelElement;\n  }\n\n  /**\n   * Set the text on this label.\n   * @param text\n   */\n  setText(text: LocalizableText) {\n    if (text === this.text) {\n      return;\n    }\n\n    this.text = text;\n    const localizedText = i18n.performLocalization(text);\n    this.getDomElement().html(localizedText);\n    this.onTextChangedEvent(localizedText);\n  }\n\n  /**\n   * Gets the text on this label.\n   * @return {string} The text on the label\n   */\n  getText(): string {\n    return i18n.performLocalization(this.text);\n  }\n\n  /**\n   * Clears the text on this label.\n   */\n  clearText() {\n    this.getDomElement().html('');\n    this.onTextChangedEvent(null);\n  }\n\n  /**\n   * Tests if the label is empty and does not contain any text.\n   * @return {boolean} True if the label is empty, else false\n   */\n  isEmpty(): boolean {\n    return !this.text;\n  }\n\n  /**\n   * Fires the {@link #onClick} event.\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\n   * and calling the super method.\n   */\n  protected onClickEvent() {\n    this.labelEvents.onClick.dispatch(this);\n  }\n\n  /**\n   * Fires the {@link #onClick} event.\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\n   * and calling the super method.\n   */\n  protected onTextChangedEvent(text: string) {\n    this.labelEvents.onTextChanged.dispatch(this, text);\n  }\n\n  /**\n   * Gets the event that is fired when the label is clicked.\n   * @returns {Event<Label<LabelConfig>, NoArgs>}\n   */\n  get onClick(): Event<Label<LabelConfig>, NoArgs> {\n    return this.labelEvents.onClick.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the text on the label is changed.\n   * @returns {Event<Label<LabelConfig>, string>}\n   */\n  get onTextChanged(): Event<Label<LabelConfig>, string> {\n    return this.labelEvents.onTextChanged.getEvent();\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { ListItem, ListSelector, ListSelectorConfig } from './listselector';\nimport {DOM} from '../dom';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\nimport { ArrayUtils } from '../arrayutils';\n\n/**\n * A element to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *   <div class='ui-listbox'>\n *     <button class='ui-listbox-button'>label</button>\n *     ...\n *   </div\n * </code>\n */\n// TODO: change ListSelector to extends container in v4 to improve usage of ListBox.\n//       Currently we are creating the dom element of the list box with child elements manually here.\n//       But this functionality is already covered within the Container component.\nexport class ListBox extends ListSelector<ListSelectorConfig> {\n  private listBoxElement: DOM;\n  private components: ListBoxItemButton[] = [];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-listbox',\n    } as ListSelectorConfig, this.config);\n  }\n\n  public configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Subscribe before super call to receive initial events\n    this.onItemAdded.subscribe(this.addListBoxDomItem);\n    this.onItemRemoved.subscribe(this.removeListBoxDomItem);\n    this.onItemSelected.subscribe(this.refreshSelectedItem);\n\n    super.configure(player, uimanager);\n  }\n\n  protected toDomElement(): DOM {\n    let listBoxElement = new DOM('div', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.listBoxElement = listBoxElement;\n    this.createListBoxDomItems();\n    this.refreshSelectedItem();\n\n    return listBoxElement;\n  }\n\n  private createListBoxDomItems() {\n    // Delete all children\n    this.listBoxElement.empty();\n    this.components = [];\n\n    // Add updated children\n    for (let item of this.items) {\n      this.addListBoxDomItem(this, item.key);\n    }\n  }\n\n  private removeListBoxDomItem = (_: ListBox, key: string) => {\n    const component = this.getComponentForKey(key);\n    if (component) {\n      component.getDomElement().remove();\n      ArrayUtils.remove(this.components, component);\n    }\n  };\n\n  private addListBoxDomItem = (_: ListBox, key: string) => {\n    const component = this.getComponentForKey(key);\n    const newItem = this.getItemForKey(key);\n    if (component) {\n      // Update existing component\n      component.setText(newItem.label);\n    } else {\n      const listBoxItemButton = this.buildListBoxItemButton(newItem);\n\n      listBoxItemButton.onClick.subscribe(() => {\n        this.handleSelectionChange(listBoxItemButton);\n      });\n\n      this.components.push(listBoxItemButton);\n      this.listBoxElement.append(listBoxItemButton.getDomElement());\n    }\n  };\n\n  private refreshSelectedItem = () => {\n    // This gets called twice because the first time is triggered when the user clicks on the ListBoxItemButton. And the\n    // second call comes from the player event when the actual item is selected (Subtitle / AudioTrack in this case).\n    // As this is a generic component we can't prohibit this behaviour. We need to treat this component as it acts\n    // independent from PlayerEvents and on the other hand we need to react to PlayerEvents as it could be triggered\n    // from outside.\n\n    for (let item of this.items) {\n      const component = this.getComponentForKey(item.key);\n      if (component) {\n        String(component.key) === String(this.selectedItem) ? component.on() : component.off();\n      }\n    }\n  };\n\n  private buildListBoxItemButton(listItem: ListItem): ListBoxItemButton {\n    return new ListBoxItemButton({\n      key: listItem.key,\n      text: listItem.label,\n      ariaLabel: listItem.ariaLabel,\n    });\n  }\n\n  private getComponentForKey(key: string): ListBoxItemButton {\n    return this.components.find((c) => key === c.key);\n  }\n\n  private handleSelectionChange = (sender: ListBoxItemButton) => {\n    this.onItemSelectedEvent(sender.key);\n  };\n}\n\ninterface ListBoxItemButtonConfig extends ToggleButtonConfig {\n  /**\n   * key to identify selected item. Similar to the value attribute of an select option.\n   */\n  key: string;\n}\n\nclass ListBoxItemButton extends ToggleButton<ListBoxItemButtonConfig> {\n\n  constructor(config: ListBoxItemButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-listbox-button',\n      onClass: 'selected',\n      offClass: '',\n    } as ListBoxItemButtonConfig, this.config);\n  }\n\n  get key(): string {\n    return (this.config as ListBoxItemButtonConfig).key;\n  }\n}\n","import {Component, ComponentConfig} from './component';\nimport {EventDispatcher, Event} from '../eventdispatcher';\nimport {ArrayUtils} from '../arrayutils';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * A map of items (key/value -> label} for a {@link ListSelector} in a {@link ListSelectorConfig}.\n */\nexport interface ListItem {\n  key: string;\n  label: LocalizableText;\n  sortedInsert?: boolean;\n  ariaLabel?: string;\n}\n\n/**\n * Filter function that can be used to filter out list items added through {@link ListSelector.addItem}.\n *\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\n * via the player API, e.g. {@link SubtitleSelectBox}.\n */\nexport interface ListItemFilter {\n  /**\n   * Takes a list item and decides whether it should pass or be discarded.\n   * @param {ListItem} listItem the item to apply the filter to\n   * @returns {boolean} true to let the item pass through the filter, false to discard the item\n   */\n  (listItem: ListItem): boolean;\n}\n\n/**\n * Translator function to translate labels of list items added through {@link ListSelector.addItem}.\n *\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\n * via the player API, e.g. {@link SubtitleSelectBox}.\n */\nexport interface ListItemLabelTranslator {\n  /**\n   * Takes a list item, optionally changes the label, and returns the new label.\n   * @param {ListItem} listItem the item to translate\n   * @returns {string} the translated or original label\n   */\n  (listItem: ListItem): string;\n}\n\n/**\n * Configuration interface for a {@link ListSelector}.\n */\nexport interface ListSelectorConfig extends ComponentConfig {\n  items?: ListItem[];\n  filter?: ListItemFilter;\n  translator?: ListItemLabelTranslator;\n}\n\nexport abstract class ListSelector<Config extends ListSelectorConfig> extends Component<ListSelectorConfig> {\n\n  protected items: ListItem[];\n  protected selectedItem: string;\n\n  private listSelectorEvents = {\n    onItemAdded: new EventDispatcher<ListSelector<Config>, string>(),\n    onItemRemoved: new EventDispatcher<ListSelector<Config>, string>(),\n    onItemSelected: new EventDispatcher<ListSelector<Config>, string>(),\n  };\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      items: [],\n      cssClass: 'ui-listselector',\n    }, this.config);\n\n    this.items = this.config.items;\n  }\n\n  private getItemIndex(key: string): number {\n    for (let index in this.items) {\n      if (key === this.items[index].key) {\n        return parseInt(index);\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Returns all current items of this selector.\n   * * @returns {ListItem[]}\n   */\n  getItems(): ListItem[] {\n    return this.items;\n  }\n\n  /**\n   * Checks if the specified item is part of this selector.\n   * @param key the key of the item to check\n   * @returns {boolean} true if the item is part of this selector, else false\n   */\n  hasItem(key: string): boolean {\n    return this.getItemIndex(key) > -1;\n  }\n\n  /**\n   * Adds an item to this selector by doing a sorted insert or by appending the element to the end of the list of items.\n   * If an item with the specified key already exists, it is replaced.\n   * @param key the key of the item to add\n   * @param label the (human-readable) label of the item to add\n   * @param sortedInsert whether the item should be added respecting the order of keys\n   * @param ariaLabel custom aria label for the listItem\n   */\n  addItem(key: string, label: LocalizableText, sortedInsert = false, ariaLabel = '') {\n    const listItem = { key: key, label: i18n.performLocalization(label), ...(ariaLabel && { ariaLabel })};\n\n    // Apply filter function\n    if (this.config.filter && !this.config.filter(listItem)) {\n      return;\n    }\n\n    // Apply translator function\n    if (this.config.translator) {\n      listItem.label = this.config.translator(listItem);\n    }\n\n    // Try to remove key first to get overwrite behavior and avoid duplicate keys\n    this.removeItem(key); // This will trigger an ItemRemoved and an ItemAdded event\n\n    // Add the item to the list\n    if (sortedInsert) {\n      const index = this.items.findIndex(entry => entry.key > key);\n      if (index < 0) {\n        this.items.push(listItem);\n      } else {\n        this.items.splice(index, 0, listItem);\n      }\n    } else {\n      this.items.push(listItem);\n    }\n    this.onItemAddedEvent(key);\n  }\n\n  /**\n   * Removes an item from this selector.\n   * @param key the key of the item to remove\n   * @returns {boolean} true if removal was successful, false if the item is not part of this selector\n   */\n  removeItem(key: string): boolean {\n    let index = this.getItemIndex(key);\n    if (index > -1) {\n      ArrayUtils.remove(this.items, this.items[index]);\n      this.onItemRemovedEvent(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Selects an item from the items in this selector.\n   * @param key the key of the item to select\n   * @returns {boolean} true is the selection was successful, false if the selected item is not part of the selector\n   */\n  selectItem(key: string): boolean {\n    if (key === this.selectedItem) {\n      // itemConfig is already selected, suppress any further action\n      return true;\n    }\n\n    let index = this.getItemIndex(key);\n\n    if (index > -1) {\n      this.selectedItem = key;\n      this.onItemSelectedEvent(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns the key of the selected item.\n   * @returns {string} the key of the selected item or null if no item is selected\n   */\n  getSelectedItem(): string | null {\n    return this.selectedItem;\n  }\n\n  /**\n   * Returns the items for the given key or undefined if no item with the given key exists.\n   * @param key the key of the item to return\n   * @returns {ListItem} the item with the requested key. Undefined if no item with the given key exists.\n   */\n  getItemForKey(key: string): ListItem {\n    return this.items.find((item) => item.key === key);\n  }\n\n  /**\n   * Synchronize the current items of this selector with the given ones. This will remove and add items selectively.\n   * For each removed item the ItemRemovedEvent and for each added item the ItemAddedEvent will be triggered. Favour\n   * this method over using clearItems and adding all items again afterwards.\n   * @param newItems\n   */\n  synchronizeItems(newItems: ListItem[]): void {\n    newItems\n      .filter((item) => !this.hasItem(item.key))\n      .forEach((item) => this.addItem(item.key, item.label, item.sortedInsert, item.ariaLabel));\n\n    this.items\n      .filter((item) => newItems.filter((i) => i.key === item.key).length === 0)\n      .forEach((item) => this.removeItem(item.key));\n  }\n\n  /**\n   * Removes all items from this selector.\n   */\n  clearItems() {\n    // local copy for iteration after clear\n    let items = this.items;\n    // clear items\n    this.items = [];\n\n    // clear the selection as the selected item is also removed\n    this.selectedItem = null;\n\n    // fire events\n    for (let item of items) {\n      this.onItemRemovedEvent(item.key);\n    }\n  }\n\n  /**\n   * Returns the number of items in this selector.\n   * @returns {number}\n   */\n  itemCount(): number {\n    return Object.keys(this.items).length;\n  }\n\n  protected onItemAddedEvent(key: string) {\n    this.listSelectorEvents.onItemAdded.dispatch(this, key);\n  }\n\n  protected onItemRemovedEvent(key: string) {\n    this.listSelectorEvents.onItemRemoved.dispatch(this, key);\n  }\n\n  protected onItemSelectedEvent(key: string) {\n    this.listSelectorEvents.onItemSelected.dispatch(this, key);\n  }\n\n  /**\n   * Gets the event that is fired when an item is added to the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemAdded(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemAdded.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when an item is removed from the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemRemoved(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemRemoved.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when an item is selected from the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemSelected(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemSelected.getEvent();\n  }\n}","import { ContainerConfig, Container } from './container';\nimport { UIInstanceManager } from '../uimanager';\nimport { Component, ComponentConfig } from './component';\nimport { Timeout } from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\ndeclare const window: any;\n\n/**\n * Configuration interface for the {@link LoadingOverlay} component.\n */\nexport interface LoadingOverlayConfig extends ContainerConfig {\n  /**\n   * Delay in milliseconds after which the loading overlay will be displayed. Useful to bypass short stalls without\n   * displaying the overlay. Set to 0 to display the overlay instantly.\n   * Default: 1000ms (1 second)\n   */\n  showDelayMs?: number;\n}\n\n/**\n * Overlays the player and displays a loading indicator.\n */\nexport class LoadingOverlay extends Container<LoadingOverlayConfig> {\n  private indicator: Component<ComponentConfig>;\n\n  constructor(config: LoadingOverlayConfig = {}) {\n    super(config);\n\n    this.indicator = new Component<ComponentConfig>({\n      tag: 'div',\n      cssClass: 'ui-buffering-overlay-loading',\n      role: 'img',\n    });\n\n    this.config = this.mergeConfig(\n      config,\n      <LoadingOverlayConfig>{\n        cssClass: 'ui-buffering-overlay loading-overlay',\n        hidden: false,\n        components: [this.indicator],\n        showDelayMs: 0,\n      },\n      this.config,\n    );\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    let overlayShowTimeout = new Timeout(config.showDelayMs, () => {\n      this.show();\n    });\n\n    let showOverlay = () => {\n      overlayShowTimeout.start();\n    };\n\n    let hideOverlay = () => {\n      overlayShowTimeout.clear();\n      this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      uimanager.getUI().hideLoading();\n      uimanager.getUI().showUi();\n    });\n\n    uimanager.onLoadingShow.subscribe(() => {\n      showOverlay();\n      this.show();\n    });\n\n    uimanager.onLoadingHide.subscribe(() => {\n      hideOverlay();\n    });\n\n    if (window.bitmovin.customMessageHandler) {\n      window.bitmovin.customMessageHandler.on('showLoading', (data?: string) => {\n        uimanager.getUI().hideUi();\n        uimanager.getUI().showLoading();\n      });\n      window.bitmovin.customMessageHandler.on('hideLoading', (data?: string) => {\n        uimanager.getUI().hideLoading();\n        uimanager.getUI().showUi();\n      });\n    }\n  }\n}\n","import { LabelConfig, Label } from './label';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI, PlayerConfig } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Enumerates the types of content that the {@link MetadataAdvisory} can display.\n */\nexport enum MetadataAdvisoryContent {\n  /**\n   * Classification of the data source.\n   */\n  Classification,\n  /**\n   * Description fo the data source.\n   */\n  Description,\n}\n\n/**\n * Configuration interface for {@link MetadataLabel}.\n */\nexport interface MetadataAdvisoryConfig extends LabelConfig {\n  /**\n   * The type of content that should be displayed in the label.\n   */\n  content: MetadataAdvisoryContent;\n}\n\ntype CustomPlayerAPI = PlayerAPI & {\n  getSource(mergedConfig?: boolean): PlayerConfig & {\n    metadata?: {\n      advisory: {\n        classification: string;\n        description: string;\n      };\n    };\n  };\n};\n\n/**\n * A label that can be configured to display certain metadata.\n */\nexport class MetadataAdvisory extends Label<MetadataAdvisoryConfig> {\n  constructor(config: MetadataAdvisoryConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClasses: [\n          'label-metadata',\n          'label-metadata-' + MetadataAdvisoryContent[config.content].toLowerCase(),\n        ],\n      } as MetadataAdvisoryConfig,\n      this.config,\n    );\n  }\n\n  configure(player: CustomPlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    let notRatedOrDescription = this.prefixCss('not-rated-or-description');\n\n    let config = this.getConfig();\n\n    let init = () => {\n      let advisory;\n      if (typeof player.getSource()?.metadata === 'object') {\n        advisory = player.getSource()?.metadata;\n      } else if (typeof player.getSource()?.metadata === 'string') {\n        advisory = JSON.parse(player.getSource()?.metadata as unknown as string).NativeMap;\n      }\n\n      if (advisory?.advisoryClassification?.length || advisory?.advisoryDescription?.length) {\n        switch (config.content) {\n          case MetadataAdvisoryContent.Classification:\n            this.setText(\n              `${i18n.performLocalization(i18n.getLocalizer('settings.rated'))} ${\n                advisory?.advisoryClassification\n              }`,\n            );\n            break;\n          case MetadataAdvisoryContent.Description:\n            this.setText(advisory?.advisoryDescription);\n            break;\n        }\n        this.getDomElement().removeClass(notRatedOrDescription);\n      } else {\n        this.getDomElement().addClass(notRatedOrDescription);\n      }\n    };\n\n    let unload = () => {\n      this.setText('');\n    };\n\n    // Init label\n    init();\n    // Clear labels when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, unload);\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, init);\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n  }\n}\n","import { LabelConfig, Label } from './label';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\n\ndeclare const window: any;\n\n/**\n * Enumerates the types of content that the {@link MetadataLabel} can display.\n */\nexport enum MetadataLabelContent {\n  /**\n   * Title of the data source.\n   */\n  Title,\n  /**\n   * Description fo the data source.\n   */\n  Description,\n}\n\n/**\n * Configuration interface for {@link MetadataLabel}.\n */\nexport interface MetadataLabelConfig extends LabelConfig {\n  /**\n   * The type of content that should be displayed in the label.\n   */\n  content: MetadataLabelContent;\n}\n\n/**\n * A label that can be configured to display certain metadata.\n */\nexport class MetadataLabel extends Label<MetadataLabelConfig> {\n  constructor(config: MetadataLabelConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClasses: [\n          'label-metadata',\n          'label-metadata-' + MetadataLabelContent[config.content].toLowerCase(),\n        ],\n      } as MetadataLabelConfig,\n      this.config,\n    );\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let uiconfig = uimanager.getConfig();\n\n    let init = () => {\n      let metadata = player.getSource()?.metadata;\n      switch (config.content) {\n        case MetadataLabelContent.Title:\n          this.setText(uiconfig.metadata.title);\n          break;\n        case MetadataLabelContent.Description:\n          if (metadata?.description) {\n            this.setText(metadata.description);\n          }\n          break;\n      }\n    };\n\n    let unload = () => {\n      this.setText(null);\n    };\n\n    // Init label\n    init();\n    // Clear labels when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, unload);\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n\n    if (window.bitmovin.customMessageHandler) {\n      window.bitmovin.customMessageHandler.on('changeMetadata', (data?: string) => {\n        init();\n      });\n    }\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles Apple macOS picture-in-picture mode.\n */\nexport class PictureInPictureToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-piptogglebutton',\n      text: i18n.getLocalizer('pictureInPicture'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const isPictureInPictureAvailable = () => {\n      return player.isViewModeAvailable(player.exports.ViewMode.PictureInPicture);\n    };\n\n    const pictureInPictureStateHandler = () => {\n      player.getViewMode() === player.exports.ViewMode.PictureInPicture ? this.on() : this.off();\n    };\n\n    const pictureInPictureAvailabilityChangedHandler = () => {\n      isPictureInPictureAvailable() ? this.show() : this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, pictureInPictureStateHandler);\n\n    // Available only in our native SDKs for now\n    if ((player.exports.PlayerEvent as any).ViewModeAvailabilityChanged) {\n      player.on(\n        (player.exports.PlayerEvent as any).ViewModeAvailabilityChanged,\n        pictureInPictureAvailabilityChangedHandler,\n      );\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(pictureInPictureAvailabilityChangedHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isPictureInPictureAvailable()) {\n        if (console) {\n          console.log('PIP unavailable');\n        }\n        return;\n      }\n\n      const targetViewMode =\n        player.getViewMode() === player.exports.ViewMode.PictureInPicture\n          ? player.exports.ViewMode.Inline\n          : player.exports.ViewMode.PictureInPicture;\n\n      player.setViewMode(targetViewMode);\n    });\n\n    // Startup init\n    pictureInPictureAvailabilityChangedHandler(); // Hide button if PIP not available\n    pictureInPictureStateHandler();\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection of different playback speeds.\n */\nexport class PlaybackSpeedSelectBox extends SelectBox {\n  protected defaultPlaybackSpeeds: number[];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n    this.defaultPlaybackSpeeds = [0.25, 0.5, 1, 1.5, 2];\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-playbackspeedselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addDefaultItems();\n\n    this.onItemSelected.subscribe((sender: PlaybackSpeedSelectBox, value: string) => {\n      player.setPlaybackSpeed(parseFloat(value));\n      this.selectItem(value);\n    });\n\n    const setDefaultValue = (): void => {\n      const playbackSpeed = player.getPlaybackSpeed();\n      this.setSpeed(playbackSpeed);\n    };\n\n    player.on(player.exports.PlayerEvent.PlaybackSpeedChanged, setDefaultValue);\n    uimanager.getConfig().events.onUpdated.subscribe(setDefaultValue);\n  }\n\n  setSpeed(speed: number): void {\n    if (!this.selectItem(String(speed))) {\n      // a playback speed was set which is not in the list, add it to the list to show it to the user\n      this.clearItems();\n      this.addDefaultItems([speed]);\n      this.selectItem(String(speed));\n    }\n  }\n\n  addDefaultItems(customItems: number[] = []): void {\n    const sortedSpeeds = this.defaultPlaybackSpeeds.concat(customItems).sort();\n\n    sortedSpeeds.forEach(element => {\n      if (element !== 1) {\n        this.addItem(String(element), `${element}x`);\n      } else {\n        this.addItem(String(element), i18n.getLocalizer('normal'));\n      }\n    });\n  }\n\n  clearItems(): void {\n    this.items = [];\n    this.selectedItem = null;\n  }\n}","import { LabelConfig, Label } from './label';\nimport { UIInstanceManager } from '../uimanager';\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\nimport { PlayerUtils } from '../playerutils';\nimport { StringUtils } from '../stringutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport enum PlaybackTimeLabelMode {\n  /**\n   * Displays the current time\n   */\n  CurrentTime,\n  /**\n   * Displays the duration of the content\n   */\n  TotalTime,\n  /**\n   * Displays the current time and the duration of the content\n   * Format: ${currentTime} / ${totalTime}\n   */\n  CurrentAndTotalTime,\n  /**\n   * Displays the remaining time of the content\n   */\n  RemainingTime,\n}\n\nexport interface PlaybackTimeLabelConfig extends LabelConfig {\n  /**\n   * The type of which time should be displayed in the label.\n   * Default: PlaybackTimeLabelMode.CurrentAndTotalTime\n   */\n  timeLabelMode?: PlaybackTimeLabelMode;\n  /**\n   * Boolean if the label should be hidden in live playback\n   */\n  hideInLivePlayback?: boolean;\n}\n\n/**\n * A label that display the current playback time and the total time through {@link PlaybackTimeLabel#setTime setTime}\n * or any string through {@link PlaybackTimeLabel#setText setText}.\n */\nexport class PlaybackTimeLabel extends Label<PlaybackTimeLabelConfig> {\n  private timeFormat: string;\n\n  constructor(config: PlaybackTimeLabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      <PlaybackTimeLabelConfig>{\n        cssClass: 'ui-playbacktimelabel',\n        timeLabelMode: PlaybackTimeLabelMode.CurrentAndTotalTime,\n        hideInLivePlayback: false,\n      },\n      this.config,\n    );\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let live = false;\n    let liveCssClass = this.prefixCss('ui-playbacktimelabel-live');\n    let liveEdgeCssClass = this.prefixCss('ui-playbacktimelabel-live-edge');\n    let minWidth = 0;\n\n    let liveClickHandler = () => {\n      player.timeShift(0);\n    };\n\n    let updateLiveState = () => {\n      // Player is playing a live stream when the duration is infinite\n      live = player.isLive();\n\n      // Attach/detach live marker class\n      if (live) {\n        this.getDomElement().addClass(liveCssClass);\n        this.setText('');\n        if (config.hideInLivePlayback) {\n          this.hide();\n        }\n        this.onClick.subscribe(liveClickHandler);\n        updateLiveTimeshiftState();\n      } else {\n        this.getDomElement().removeClass(liveCssClass);\n        this.getDomElement().removeClass(liveEdgeCssClass);\n        this.show();\n        this.onClick.unsubscribe(liveClickHandler);\n      }\n    };\n\n    let updateLiveTimeshiftState = () => {\n      if (!live) {\n        return;\n      }\n\n      // The player is only at the live edge iff the stream is not shifted and it is actually playing or playback has\n      // never been started (meaning it isn't paused). A player that is paused is always behind the live edge.\n      // An exception is made for live streams without a timeshift window, because here we \"stop\" playback instead\n      // of pausing it (from a UI perspective), so we keep the live edge indicator on because a play would always\n      // resume at the live edge.\n      const isTimeshifted = player.getTimeShift() < 0;\n      const isTimeshiftAvailable = player.getMaxTimeShift() < 0;\n\n      if (!isTimeshifted && (!player.isPaused() || !isTimeshiftAvailable)) {\n        this.getDomElement().addClass(liveEdgeCssClass);\n      } else {\n        this.getDomElement().removeClass(liveEdgeCssClass);\n      }\n    };\n\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      live = args.live;\n      updateLiveState();\n    });\n    liveStreamDetector.detect(); // Initial detection\n\n    let playbackTimeHandler = () => {\n      if (!live && player.getDuration() !== Infinity) {\n        this.setTime(\n          PlayerUtils.getCurrentTimeRelativeToSeekableRange(player),\n          player.getDuration(),\n        );\n      }\n\n      // To avoid 'jumping' in the UI by varying label sizes due to non-monospaced fonts,\n      // we gradually increase the min-width with the content to reach a stable size.\n      let width = this.getDomElement().width();\n      if (width > minWidth) {\n        minWidth = width;\n        this.getDomElement().css({\n          'min-width': minWidth + 'px',\n        });\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackTimeHandler);\n    player.on(player.exports.PlayerEvent.Seeked, playbackTimeHandler);\n\n    player.on(player.exports.PlayerEvent.TimeShift, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.TimeShifted, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.Playing, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.Paused, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.StallStarted, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.StallEnded, updateLiveTimeshiftState);\n\n    let init = () => {\n      // Reset min-width when a new source is ready (especially for switching VOD/Live modes where the label content\n      // changes)\n      minWidth = 0;\n      this.getDomElement().css({\n        'min-width': null,\n      });\n\n      // Set time format depending on source duration\n      this.timeFormat =\n        Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600\n          ? StringUtils.FORMAT_HHMMSS\n          : StringUtils.FORMAT_MMSS;\n\n      // Update time after the format has been set\n      playbackTimeHandler();\n    };\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n\n    init();\n  }\n\n  /**\n   * Sets the current playback time and total duration.\n   * @param playbackSeconds the current playback time in seconds\n   * @param durationSeconds the total duration in seconds\n   */\n  setTime(playbackSeconds: number, durationSeconds: number) {\n    let currentTime = StringUtils.secondsToTime(playbackSeconds, this.timeFormat);\n    let totalTime = StringUtils.secondsToTime(durationSeconds, this.timeFormat);\n\n    switch ((<PlaybackTimeLabelConfig>this.config).timeLabelMode) {\n      case PlaybackTimeLabelMode.CurrentTime:\n        this.setText(`${currentTime}`);\n        break;\n      case PlaybackTimeLabelMode.TotalTime:\n        this.setText(`${totalTime}`);\n        break;\n      case PlaybackTimeLabelMode.CurrentAndTotalTime:\n        this.setText(`${currentTime} / ${totalTime}`);\n        break;\n      case PlaybackTimeLabelMode.RemainingTime:\n        let remainingTime = StringUtils.secondsToTime(\n          durationSeconds - playbackSeconds,\n          this.timeFormat,\n        );\n        this.setText(`${remainingTime}`);\n        break;\n    }\n  }\n\n  /**\n   * Sets the current time format\n   * @param timeFormat the time format\n   */\n  protected setTimeFormat(timeFormat: string): void {\n    this.timeFormat = timeFormat;\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport {PlayerUtils} from '../playerutils';\nimport { PlayerAPI, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport interface PlaybackToggleButtonConfig extends ToggleButtonConfig {\n  /**\n   * Specify whether the player should be set to enter fullscreen by clicking on the playback toggle button\n   * when initiating the initial playback.\n   * Default is false.\n   */\n  enterFullscreenOnInitialPlayback?: boolean;\n}\n\n/**\n * A button that toggles between playback and pause.\n */\nexport class PlaybackToggleButton extends ToggleButton<PlaybackToggleButtonConfig> {\n\n  private static readonly CLASS_STOPTOGGLE = 'stoptoggle';\n  protected isPlayInitiated: boolean;\n\n  constructor(config: PlaybackToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbacktogglebutton',\n      text: i18n.getLocalizer('play'),\n      onAriaLabel: i18n.getLocalizer('pause'),\n      offAriaLabel: i18n.getLocalizer('play'),\n    }, this.config);\n\n    this.isPlayInitiated = false;\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, handleClickEvent: boolean = true): void {\n    super.configure(player, uimanager);\n\n    // Set enterFullscreenOnInitialPlayback if set in the uimanager config\n    if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {\n      this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;\n    }\n\n    let isSeeking = false;\n    let firstPlay = true;\n\n    // Handler to update button state based on player state\n    let playbackStateHandler = () => {\n      // If the UI is currently seeking, playback is temporarily stopped but the buttons should\n      // not reflect that and stay as-is (e.g indicate playback while seeking).\n      if (isSeeking) {\n        return;\n      }\n\n      if (player.isPlaying() || this.isPlayInitiated) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    // Call handler upon these events\n    player.on(player.exports.PlayerEvent.Play, (e) => {\n      this.isPlayInitiated = true;\n      firstPlay = false;\n      playbackStateHandler();\n    });\n\n    player.on(player.exports.PlayerEvent.Paused, (e) => {\n      this.isPlayInitiated = false;\n      playbackStateHandler();\n    });\n\n    player.on(player.exports.PlayerEvent.Playing, (e) => {\n      this.isPlayInitiated = false;\n      playbackStateHandler();\n    });\n    // after unloading + loading a new source, the player might be in a different playing state (from playing into stopped)\n    player.on(player.exports.PlayerEvent.SourceLoaded, playbackStateHandler);\n    uimanager.getConfig().events.onUpdated.subscribe(playbackStateHandler);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, playbackStateHandler);\n    // when playback finishes, player turns to paused mode\n    player.on(player.exports.PlayerEvent.PlaybackFinished, playbackStateHandler);\n    player.on(player.exports.PlayerEvent.CastStarted, playbackStateHandler);\n\n    // When a playback attempt is rejected with warning 5008, we switch the button state back to off\n    // This is required for blocked autoplay, because there is no Paused event in such case\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        this.isPlayInitiated = false;\n        firstPlay = true;\n        this.off();\n      }\n    });\n\n    const updateLiveState = () => {\n      const showStopToggle = player.isLive() && !PlayerUtils.isTimeShiftAvailable(player);\n\n      if (showStopToggle) {\n        this.getDomElement().addClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\n      } else {\n        this.getDomElement().removeClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\n      }\n    };\n\n    // Detect absence of timeshifting on live streams and add tagging class to convert button icons to play/stop\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(() => updateLiveState());\n    liveStreamDetector.onLiveChanged.subscribe(() => updateLiveState());\n\n    timeShiftDetector.detect(); // Initial detection\n    liveStreamDetector.detect();\n\n    if (handleClickEvent) {\n      // Control player by button events\n      // When a button event triggers a player API call, events are fired which in turn call the event handler\n      // above that updated the button state.\n      this.onClick.subscribe(() => {\n        if (player.isPlaying() || this.isPlayInitiated) {\n          player.pause('ui');\n        } else {\n          player.play('ui');\n\n          if (firstPlay && this.config.enterFullscreenOnInitialPlayback) {\n            player.setViewMode(player.exports.ViewMode.Fullscreen);\n          }\n        }\n      });\n    }\n\n    // Track UI seeking status\n    uimanager.onSeek.subscribe(() => {\n      isSeeking = true;\n    });\n    uimanager.onSeeked.subscribe(() => {\n      isSeeking = false;\n    });\n\n    // Startup init\n    playbackStateHandler();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {HugePlaybackToggleButton} from './hugeplaybacktogglebutton';\n\nexport interface PlaybackToggleOverlayConfig extends ContainerConfig {\n  /**\n   * Specify whether the player should be set to enter fullscreen by clicking on the playback toggle button\n   * when initiating the initial playback.\n   * Default is false.\n   */\n  enterFullscreenOnInitialPlayback?: boolean;\n}\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class PlaybackToggleOverlay extends Container<PlaybackToggleOverlayConfig> {\n\n  private playbackToggleButton: HugePlaybackToggleButton;\n\n  constructor(config: PlaybackToggleOverlayConfig = {}) {\n    super(config);\n\n    this.playbackToggleButton = new HugePlaybackToggleButton({\n      enterFullscreenOnInitialPlayback: Boolean(config.enterFullscreenOnInitialPlayback),\n    });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbacktoggle-overlay',\n      components: [this.playbackToggleButton],\n    }, this.config);\n  }\n}","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\n\nexport class PlayButton extends ToggleButton<ToggleButtonConfig> {\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-play',\n      text: 'play',\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      if (player.isPlaying()) {\n        player.pause('ui');\n      } else {\n        player.play('ui');\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.Play, () => {\n      // Playback has really started, we can disable the flag to switch to normal toggle button handling\n      this.on();\n    });\n\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      // Playback has really started, we can disable the flag to switch to normal toggle button handling\n      this.off();\n    });\n\n    let init = () => {\n      player.isPlaying() ? this.on() : this.off();\n    };\n\n    init();\n  }\n}\n","import { ContainerConfig, Container } from './container';\nimport { Component, ComponentConfig } from './component';\nimport { DOM } from '../dom';\nimport { UIInstanceManager } from '../uimanager';\nimport { StringUtils } from '../stringutils';\nimport { HugeReplayButton } from './hugereplaybutton';\nimport { UIRecommendationConfig } from '../uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Overlays the player and displays recommended videos.\n */\nexport class RecommendationOverlay extends Container<ContainerConfig> {\n  private replayButton: HugeReplayButton;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.replayButton = new HugeReplayButton();\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClass: 'ui-recommendation-overlay',\n        hidden: true,\n        components: [this.replayButton],\n      },\n      this.config,\n    );\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let clearRecommendations = () => {\n      for (let component of this.getComponents().slice()) {\n        if (component instanceof RecommendationItem) {\n          this.removeComponent(component);\n        }\n      }\n      this.updateComponents();\n      this.getDomElement().removeClass(this.prefixCss('recommendations'));\n    };\n\n    let setupRecommendations = () => {\n      clearRecommendations();\n\n      const recommendations = uimanager.getConfig().recommendations;\n\n      if (recommendations.length > 0) {\n        let index = 1;\n        for (let item of recommendations) {\n          this.addComponent(\n            new RecommendationItem({\n              itemConfig: item,\n              cssClasses: ['recommendation-item-' + index++],\n            }),\n          );\n        }\n        this.updateComponents(); // create container DOM elements\n\n        this.getDomElement().addClass(this.prefixCss('recommendations'));\n      }\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(setupRecommendations);\n    // Remove recommendations and hide overlay when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\n      clearRecommendations();\n      this.hide();\n    });\n    // Display recommendations when playback has finished\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\n      this.show();\n    });\n    // Hide recommendations when playback starts, e.g. a restart\n    player.on(player.exports.PlayerEvent.Play, () => {\n      this.hide();\n    });\n\n    // Init on startup\n    setupRecommendations();\n  }\n}\n\n/**\n * Configuration interface for the {@link RecommendationItem}\n */\ninterface RecommendationItemConfig extends ComponentConfig {\n  itemConfig: UIRecommendationConfig;\n}\n\n/**\n * An item of the {@link RecommendationOverlay}. Used only internally in {@link RecommendationOverlay}.\n */\nclass RecommendationItem extends Component<RecommendationItemConfig> {\n  constructor(config: RecommendationItemConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClass: 'ui-recommendation-item',\n        itemConfig: null, // this must be passed in from outside\n      },\n      this.config,\n    );\n  }\n\n  protected toDomElement(): DOM {\n    let config = this.config.itemConfig;\n\n    let itemElement = new DOM('a', {\n      id: this.config.id,\n      class: this.getCssClasses(),\n      href: config.url,\n    }).css({ 'background-image': `url(${config.thumbnail})` });\n\n    let bgElement = new DOM('div', {\n      class: this.prefixCss('background'),\n    });\n    itemElement.append(bgElement);\n\n    let titleElement = new DOM('span', {\n      class: this.prefixCss('title'),\n    }).append(\n      new DOM('span', {\n        class: this.prefixCss('innertitle'),\n      }).html(config.title),\n    );\n    itemElement.append(titleElement);\n\n    let timeElement = new DOM('span', {\n      class: this.prefixCss('duration'),\n    }).append(\n      new DOM('span', {\n        class: this.prefixCss('innerduration'),\n      }).html(config.duration ? StringUtils.secondsToTime(config.duration) : ''),\n    );\n    itemElement.append(timeElement);\n\n    return itemElement;\n  }\n}\n","import { ButtonConfig, Button } from './button';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { PlayerUtils } from '../playerutils';\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\n\n/**\n * A button to play/replay a video.\n */\nexport class ReplayButton extends Button<ButtonConfig> {\n\n  constructor(config: ButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-replaybutton',\n      text: i18n.getLocalizer('replay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    if (player.isLive()) {\n      this.hide();\n    }\n\n    const liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      if (args.live) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    });\n\n    this.onClick.subscribe(() => {\n      if (!player.hasEnded()) {\n        player.seek(0);\n        // Not calling `play` will keep the play/pause state as is\n      } else {\n        // If playback has already ended, calling `play` will automatically restart from the beginning\n        player.play('ui');\n      }\n    });\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\n\ndeclare const window: any;\n\nexport class RewindButton extends ToggleButton<ToggleButtonConfig> {\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-rewind',\n      text: 'rewind',\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    if (window.bitmovin.customMessageHandler) {\n      window.bitmovin.customMessageHandler.on('toggleRewindButton', (data?: string) => {\n        if (this.isEnabled()) {\n          this.disable();\n        } else {\n          this.enable();\n        }\n      });\n\n      this.onClick.subscribe(() => {\n        let result = window.bitmovin.customMessageHandler.sendSynchronous('rewindButton');\n        console.log('Return value from native:', result);\n        window.bitmovin.customMessageHandler.sendAsynchronous('rewindButtonAsync');\n      });\n    }\n  }\n}\n","import {\n  ExtendedPlayerAPI,\n  GroupPlaybackSuspension,\n  GroupPlaybackSuspensionReason,\n} from './../groupplaybackapi';\nimport { Component, ComponentConfig } from './component';\nimport { DOM } from '../dom';\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\nimport { SeekBarLabel } from './seekbarlabel';\nimport { UIInstanceManager, SeekPreviewArgs } from '../uimanager';\nimport { Timeout } from '../timeout';\nimport { PlayerUtils } from '../playerutils';\nimport TimeShiftAvailabilityChangedArgs = PlayerUtils.TimeShiftAvailabilityChangedArgs;\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\nimport { TimelineMarker } from '../uiconfig';\nimport { PlayerAPI, PlayerEventBase } from 'bitmovin-player';\nimport { StringUtils } from '../stringutils';\nimport { SeekBarType, SeekBarController } from './seekbarcontroller';\nimport { i18n } from '../localization/i18n';\nimport { BrowserUtils } from '../browserutils';\nimport { TimelineMarkersHandler } from './timelinemarkershandler';\nimport { getMinBufferLevel } from './seekbarbufferlevel';\n\n/**\n * Configuration interface for the {@link SeekBar} component.\n */\nexport interface SeekBarConfig extends ComponentConfig {\n  /**\n   * The label above the seek position.\n   */\n  label?: SeekBarLabel;\n  /**\n   * Bar will be vertical instead of horizontal if set to true.\n   */\n  vertical?: boolean;\n  /**\n   * The interval in milliseconds in which the playback position on the seek bar will be updated. The shorter the\n   * interval, the smoother it looks and the more resource intense it is. The update interval will be kept as steady\n   * as possible to avoid jitter.\n   * Set to -1 to disable smooth updating and update it on player TimeChanged events instead.\n   * Default: 50 (50ms = 20fps).\n   */\n  smoothPlaybackPositionUpdateIntervalMs?: number;\n\n  /**\n   * Used for seekBar control increments and decrements\n   */\n  keyStepIncrements?: { leftRight: number; upDown: number };\n\n  /**\n   * Used for seekBar marker snapping range percentage\n   */\n  snappingRange?: number;\n\n  /**\n   * Used to enable/disable seek preview\n   */\n  enableSeekPreview?: boolean;\n}\n\n/**\n * Event argument interface for a seek preview event.\n */\nexport interface SeekPreviewEventArgs extends SeekPreviewArgs {\n  /**\n   * Tells if the seek preview event comes from a scrubbing.\n   */\n  scrubbing: boolean;\n}\n\nexport interface SeekBarMarker {\n  marker: TimelineMarker;\n  position: number;\n  duration?: number;\n  element?: DOM;\n}\n\n/**\n * A seek bar to seek within the player's media. It displays the current playback position, amount of buffed data, seek\n * target, and keeps status about an ongoing seek.\n *\n * The seek bar displays different 'bars':\n *  - the playback position, i.e. the position in the media at which the player current playback pointer is positioned\n *  - the buffer position, which usually is the playback position plus the time span that is already buffered ahead\n *  - the seek position, used to preview to where in the timeline a seek will jump to\n */\nexport class SeekBar extends Component<SeekBarConfig> {\n  public static readonly SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED = -1;\n\n  /**\n   * The CSS class that is added to the DOM element while the seek bar is in 'seeking' state.\n   */\n  private static readonly CLASS_SEEKING = 'seeking';\n\n  private seekBar: DOM;\n  private seekBarPlaybackPosition: DOM;\n  private seekBarPlaybackPositionMarker: DOM;\n  private seekBarBufferPosition: DOM;\n  private seekBarSeekPosition: DOM;\n  private seekBarBackdrop: DOM;\n\n  private label: SeekBarLabel;\n\n  private seekBarMarkersContainer: DOM;\n  private timelineMarkersHandler: TimelineMarkersHandler;\n\n  private player: PlayerAPI;\n\n  protected seekBarType: SeekBarType;\n\n  protected isUiShown: boolean;\n\n  /**\n   * Buffer of the the current playback position. The position must be buffered in case the element\n   * needs to be refreshed with {@link #refreshPlaybackPosition}.\n   * @type {number}\n   */\n  private playbackPositionPercentage = 0;\n\n  private smoothPlaybackPositionUpdater: Timeout;\n  private pausedTimeshiftUpdater: Timeout;\n\n  private isUserSeeking = false;\n\n  private seekBarEvents = {\n    /**\n     * Fired when a scrubbing seek operation is started.\n     */\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\n    /**\n     * Fired during a scrubbing seek to indicate that the seek preview (i.e. the video frame) should be updated.\n     */\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewEventArgs>(),\n    /**\n     * Fired when a scrubbing seek has finished or when a direct seek is issued.\n     */\n    onSeeked: new EventDispatcher<SeekBar, number>(),\n  };\n\n  constructor(config: SeekBarConfig = {}) {\n    super(config);\n\n    const keyStepIncrements = this.config.keyStepIncrements || {\n      leftRight: 1,\n      upDown: 5,\n    };\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClass: 'ui-seekbar',\n        vertical: false,\n        smoothPlaybackPositionUpdateIntervalMs: 50,\n        keyStepIncrements,\n        ariaLabel: i18n.getLocalizer('seekBar'),\n        tabIndex: 0,\n        snappingRange: 1,\n        enableSeekPreview: true,\n      },\n      this.config,\n    );\n\n    this.label = this.config.label;\n  }\n\n  initialize(): void {\n    super.initialize();\n\n    if (this.hasLabel()) {\n      this.getLabel().initialize();\n    }\n  }\n\n  protected setAriaSliderMinMax(min: string, max: string) {\n    this.getDomElement().attr('aria-valuemin', min);\n    this.getDomElement().attr('aria-valuemax', max);\n  }\n\n  private setAriaSliderValues() {\n    if (this.seekBarType === SeekBarType.Live) {\n      const timeshiftValue = Math.ceil(this.player.getTimeShift()).toString();\n      this.getDomElement().attr('aria-valuenow', timeshiftValue);\n      this.getDomElement().attr(\n        'aria-valuetext',\n        `${i18n.performLocalization(\n          i18n.getLocalizer('seekBar.timeshift'),\n        )} ${i18n.performLocalization(i18n.getLocalizer('seekBar.value'))}: ${timeshiftValue}`,\n      );\n    } else if (this.seekBarType === SeekBarType.Vod) {\n      const ariaValueText = `${StringUtils.secondsToText(\n        this.player.getCurrentTime(),\n      )} ${i18n.performLocalization(\n        i18n.getLocalizer('seekBar.durationText'),\n      )} ${StringUtils.secondsToText(this.player.getDuration())}`;\n      this.getDomElement().attr(\n        'aria-valuenow',\n        Math.floor(this.player.getCurrentTime()).toString(),\n      );\n      this.getDomElement().attr('aria-valuetext', ariaValueText);\n    }\n  }\n\n  private getPlaybackPositionPercentage(): number {\n    if (this.player.isLive()) {\n      return 100 - (100 / this.player.getMaxTimeShift()) * this.player.getTimeShift();\n    }\n\n    return (100 / this.player.getDuration()) * this.getRelativeCurrentTime();\n  }\n\n  private updateBufferLevel(playbackPositionPercentage: number): void {\n    let bufferLoadedPercentageLevel: number;\n    if (this.player.isLive()) {\n      // Always show full buffer for live streams\n      bufferLoadedPercentageLevel = 100;\n    } else {\n      bufferLoadedPercentageLevel = playbackPositionPercentage + getMinBufferLevel(this.player);\n    }\n\n    this.setBufferPosition(bufferLoadedPercentageLevel);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, configureSeek: boolean = true): void {\n    super.configure(player, uimanager);\n\n    this.player = player;\n\n    // Apply scaling transform to the backdrop bar to have all bars rendered similarly\n    // (the call must be up here to be executed for the volume slider as well)\n    this.setPosition(this.seekBarBackdrop, 100);\n\n    // Add seekbar controls to the seekbar\n    const seekBarController = new SeekBarController(\n      this.config.keyStepIncrements,\n      player,\n      uimanager.getConfig().volumeController,\n    );\n\n    seekBarController.setSeekBarControls(this.getDomElement(), () => this.seekBarType);\n\n    // The configureSeek flag can be used by subclasses to disable configuration as seek bar. E.g. the volume\n    // slider is reusing this component but adds its own functionality, and does not need the seek functionality.\n    // This is actually a hack, the proper solution would be for both seek bar and volume sliders to extend\n    // a common base slider component and implement their functionality there.\n    if (!configureSeek) {\n      this.seekBarType = SeekBarType.Volume;\n\n      return;\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      this.isUiShown = true;\n    });\n\n    uimanager.onControlsHide.subscribe(() => {\n      this.isUiShown = false;\n    });\n\n    let isPlaying = false;\n    let scrubbing = false;\n    let isPlayerSeeking = false;\n    let suspension: GroupPlaybackSuspension | undefined;\n\n    // Update playback and buffer positions\n    let playbackPositionHandler = (event: PlayerEventBase = null, forceUpdate: boolean = false) => {\n      if (this.isUserSeeking) {\n        // We caught a seek preview seek, do not update the seekbar\n        return;\n      }\n\n      let playbackPositionPercentage = this.getPlaybackPositionPercentage();\n\n      this.updateBufferLevel(playbackPositionPercentage);\n\n      // The segment request finished is used to help the playback position move, when the smooth playback position is not enabled.\n      // At the same time when the user is scrubbing, we also move the position of the seekbar to display a preview during scrubbing.\n      // When the user is scrubbing we do not record this as a user seek operation, as the user has yet to finish their seek,\n      // but we should not move the playback position to not create a jumping behaviour.\n      if (\n        scrubbing &&\n        event &&\n        event.type === player.exports.PlayerEvent.SegmentRequestFinished &&\n        playbackPositionPercentage !== this.playbackPositionPercentage\n      ) {\n        playbackPositionPercentage = this.playbackPositionPercentage;\n      }\n\n      if (player.isLive()) {\n        if (player.getMaxTimeShift() === 0) {\n          // This case must be explicitly handled to avoid division by zero\n          this.setPlaybackPosition(100);\n        } else {\n          if (!this.isSeeking()) {\n            this.setPlaybackPosition(playbackPositionPercentage);\n          }\n\n          this.setAriaSliderMinMax(player.getMaxTimeShift().toString(), '0');\n        }\n      } else {\n        // Update playback position only in paused state or in the initial startup state where player is neither\n        // paused nor playing. Playback updates are handled in the Timeout below.\n        const isInInitialStartupState =\n          this.config.smoothPlaybackPositionUpdateIntervalMs ===\n            SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED ||\n          forceUpdate ||\n          player.isPaused();\n        const isNeitherPausedNorPlaying = player.isPaused() === player.isPlaying();\n\n        if ((isInInitialStartupState || isNeitherPausedNorPlaying) && !this.isSeeking()) {\n          this.setPlaybackPosition(playbackPositionPercentage);\n        }\n\n        this.setAriaSliderMinMax('0', player.getDuration().toString());\n      }\n\n      if (this.isUiShown) {\n        this.setAriaSliderValues();\n      }\n    };\n\n    // Update seekbar upon these events\n    // init playback position when the player is ready\n    player.on(player.exports.PlayerEvent.Ready, playbackPositionHandler);\n    // update playback position when it changes\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackPositionHandler);\n    // update bufferlevel when buffering is complete\n    player.on(player.exports.PlayerEvent.StallEnded, playbackPositionHandler);\n    // update playback position when a timeshift has finished\n    player.on(player.exports.PlayerEvent.TimeShifted, playbackPositionHandler);\n    // update bufferlevel when a segment has been downloaded\n    player.on(player.exports.PlayerEvent.SegmentRequestFinished, playbackPositionHandler);\n\n    this.configureLivePausedTimeshiftUpdater(player, uimanager, playbackPositionHandler);\n\n    // Seek handling\n    let onPlayerSeek = () => {\n      isPlayerSeeking = true;\n      this.setSeeking(true);\n      scrubbing = false;\n    };\n\n    let onPlayerSeeked = (event: PlayerEventBase = null, forceUpdate: boolean = false) => {\n      isPlayerSeeking = false;\n      this.setSeeking(false);\n\n      // update playback position when a seek has finished\n      playbackPositionHandler(event, forceUpdate);\n    };\n\n    let restorePlayingState = function () {\n      // Continue playback after seek if player was playing when seek started\n      if (isPlaying) {\n        // use the same issuer here as in the pause on seek\n        player.play('ui-seek');\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Seek, onPlayerSeek);\n    player.on(player.exports.PlayerEvent.Seeked, onPlayerSeeked);\n    player.on(player.exports.PlayerEvent.TimeShift, onPlayerSeek);\n    player.on(player.exports.PlayerEvent.TimeShifted, onPlayerSeeked);\n\n    let isGroupPlaybackAPIAvailable = (player: PlayerAPI): player is ExtendedPlayerAPI => {\n      return !!(player as ExtendedPlayerAPI).groupPlayback;\n    };\n\n    this.onSeek.subscribe((sender) => {\n      // track seeking status so we can catch events from seek preview seeks\n      this.isUserSeeking = true;\n      // Notify UI manager of started seek\n      uimanager.onSeek.dispatch(sender);\n\n      if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && !suspension) {\n        suspension = player.groupPlayback.beginSuspension(\n          GroupPlaybackSuspensionReason.UserIsScrubbing,\n        );\n      }\n\n      // Save current playback state before performing the seek\n      if (!isPlayerSeeking) {\n        isPlaying = player.isPlaying();\n\n        // Pause playback while seeking\n        if (isPlaying) {\n          // use a different issuer here, as play/pause on seek is not \"really\" triggerd by the user\n          player.pause('ui-seek');\n        }\n      }\n    });\n\n    this.onSeekPreview.subscribe((sender: SeekBar, args: SeekPreviewEventArgs) => {\n      // Notify UI manager of seek preview\n      uimanager.onSeekPreview.dispatch(sender, args);\n      scrubbing = args.scrubbing;\n    });\n\n    // Set enableSeekPreview if set in the uimanager config\n    if (typeof uimanager.getConfig().enableSeekPreview === 'boolean') {\n      this.config.enableSeekPreview = uimanager.getConfig().enableSeekPreview;\n    }\n\n    // Rate-limited scrubbing seek\n    if (this.config.enableSeekPreview) {\n      this.onSeekPreview.subscribeRateLimited(this.seekWhileScrubbing, 200);\n    }\n\n    this.onSeeked.subscribe((sender, percentage) => {\n      this.isUserSeeking = false;\n\n      // Do the seek\n      this.seek(percentage);\n\n      // Notify UI manager of finished seek\n      uimanager.onSeeked.dispatch(sender);\n\n      // Continue playback after seek if player was playing when seek started\n      restorePlayingState();\n\n      if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && suspension) {\n        const proposedPlaybackTime = this.getTargetSeekPosition(percentage);\n        player.groupPlayback.endSuspension(suspension, {\n          proposedPlaybackTime,\n        });\n        suspension = undefined;\n      }\n    });\n\n    if (this.hasLabel()) {\n      // Configure a seekbar label that is internal to the seekbar)\n      this.getLabel().configure(player, uimanager);\n    }\n\n    // Hide seekbar for live sources without timeshift\n    let isLive = false;\n    let hasTimeShift = false;\n    let switchVisibility = (isLive: boolean, hasTimeShift: boolean) => {\n      if (isLive && !hasTimeShift) {\n        this.hide();\n      } else {\n        this.show();\n      }\n      playbackPositionHandler(null, true);\n      this.refreshPlaybackPosition();\n    };\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      isLive = args.live;\n      if (isLive && this.smoothPlaybackPositionUpdater != null) {\n        this.smoothPlaybackPositionUpdater.clear();\n        this.seekBarType = SeekBarType.Live;\n      } else {\n        this.seekBarType = SeekBarType.Vod;\n      }\n      switchVisibility(isLive, hasTimeShift);\n    });\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(\n      (sender, args: TimeShiftAvailabilityChangedArgs) => {\n        hasTimeShift = args.timeShiftAvailable;\n        switchVisibility(isLive, hasTimeShift);\n      },\n    );\n    // Initial detection\n    liveStreamDetector.detect();\n    timeShiftDetector.detect();\n\n    // Refresh the playback position when the player resized or the UI is configured. The playback position marker\n    // is positioned absolutely and must therefore be updated when the size of the seekbar changes.\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      this.refreshPlaybackPosition();\n    });\n    // Additionally, when this code is called, the seekbar is not part of the UI yet and therefore does not have a size,\n    // resulting in a wrong initial position of the marker. Refreshing it once the UI is configured solved this issue.\n    uimanager.onConfigured.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n    // It can also happen when a new source is loaded\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      this.refreshPlaybackPosition();\n    });\n    // Add markers when a source is loaded or update when a marker is added or removed\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      playbackPositionHandler();\n    });\n\n    // Set the snappingRange if set in the uimanager config\n    if (typeof uimanager.getConfig().seekbarSnappingRange === 'number') {\n      this.config.snappingRange = uimanager.getConfig().seekbarSnappingRange;\n    }\n\n    // Initialize seekbar\n    playbackPositionHandler(); // Set the playback position\n    this.setBufferPosition(0);\n    this.setSeekPosition(0);\n    if (\n      this.config.smoothPlaybackPositionUpdateIntervalMs !==\n      SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED\n    ) {\n      this.configureSmoothPlaybackPositionUpdater(player, uimanager);\n    }\n    // Initialize markers\n    this.initializeTimelineMarkers(player, uimanager);\n  }\n\n  private initializeTimelineMarkers(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    const timelineMarkerConfig = {\n      cssPrefix: this.config.cssPrefix,\n      snappingRange: this.config.snappingRange,\n    };\n    this.timelineMarkersHandler = new TimelineMarkersHandler(\n      timelineMarkerConfig,\n      () => this.seekBar.width(),\n      this.seekBarMarkersContainer,\n    );\n    this.timelineMarkersHandler.initialize(player, uimanager);\n  }\n\n  private seekWhileScrubbing = (sender: SeekBar, args: SeekPreviewEventArgs) => {\n    if (args.scrubbing) {\n      this.seek(args.position);\n    }\n  };\n\n  private getTargetSeekPosition = (percentage: number) => {\n    let target: number;\n    if (this.player.isLive()) {\n      const maxTimeShift = this.player.getMaxTimeShift();\n      target = maxTimeShift - maxTimeShift * (percentage / 100);\n    } else {\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\n      const relativeSeekTarget = this.player.getDuration() * (percentage / 100);\n      target = relativeSeekTarget + seekableRangeStart;\n    }\n\n    return target;\n  };\n\n  private seek = (percentage: number) => {\n    const targetPlaybackPosition = this.getTargetSeekPosition(percentage);\n    if (this.player.isLive()) {\n      this.player.timeShift(targetPlaybackPosition, 'ui');\n    } else {\n      this.player.seek(targetPlaybackPosition, 'ui');\n    }\n  };\n\n  /**\n   * Update seekbar while a live stream with DVR window is paused.\n   * The playback position stays still and the position indicator visually moves towards the back.\n   */\n  private configureLivePausedTimeshiftUpdater(\n    player: PlayerAPI,\n    uimanager: UIInstanceManager,\n    playbackPositionHandler: () => void,\n  ): void {\n    // Regularly update the playback position while the timeout is active\n    this.pausedTimeshiftUpdater = new Timeout(1000, playbackPositionHandler, true);\n\n    // Start updater when a live stream with timeshift window is paused\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      if (player.isLive() && player.getMaxTimeShift() < 0) {\n        this.pausedTimeshiftUpdater.start();\n      }\n    });\n\n    // Stop updater when playback continues (no matter if the updater was started before)\n    player.on(player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\n  }\n\n  private configureSmoothPlaybackPositionUpdater(\n    player: PlayerAPI,\n    uimanager: UIInstanceManager,\n  ): void {\n    /*\n     * Playback position update\n     *\n     * We do not update the position directly from the TimeChanged event, because it arrives very jittery and\n     * results in a jittery position indicator since the CSS transition time is statically set.\n     * To work around this issue, we maintain a local playback position that is updated in a stable regular interval\n     * and kept in sync with the player.\n     */\n    let currentTimeSeekBar = 0;\n    let currentTimePlayer = 0;\n    let updateIntervalMs = 50;\n    let currentTimeUpdateDeltaSecs = updateIntervalMs / 1000;\n\n    this.smoothPlaybackPositionUpdater = new Timeout(\n      updateIntervalMs,\n      () => {\n        if (this.isSeeking()) {\n          return;\n        }\n\n        currentTimeSeekBar += currentTimeUpdateDeltaSecs;\n\n        try {\n          currentTimePlayer = this.getRelativeCurrentTime();\n        } catch (error) {\n          // Detect if the player has been destroyed and stop updating if so\n          if (error instanceof player.exports.PlayerAPINotAvailableError) {\n            this.smoothPlaybackPositionUpdater.clear();\n          }\n\n          // If the current time cannot be read it makes no sense to continue\n          return;\n        }\n\n        // Sync currentTime of seekbar to player\n        let currentTimeDelta = currentTimeSeekBar - currentTimePlayer;\n        // If the delta is larger that 2 secs, directly jump the seekbar to the\n        // player time instead of smoothly fast forwarding/rewinding.\n        if (Math.abs(currentTimeDelta) > 2) {\n          currentTimeSeekBar = currentTimePlayer;\n        }\n        // If currentTimeDelta is negative and below the adjustment threshold,\n        // the player is ahead of the seekbar and we 'fast forward' the seekbar\n        else if (currentTimeDelta <= -currentTimeUpdateDeltaSecs) {\n          currentTimeSeekBar += currentTimeUpdateDeltaSecs;\n        }\n        // If currentTimeDelta is positive and above the adjustment threshold,\n        // the player is behind the seekbar and we 'rewind' the seekbar\n        else if (currentTimeDelta >= currentTimeUpdateDeltaSecs) {\n          currentTimeSeekBar -= currentTimeUpdateDeltaSecs;\n        }\n\n        let playbackPositionPercentage = (100 / player.getDuration()) * currentTimeSeekBar;\n        this.setPlaybackPosition(playbackPositionPercentage);\n      },\n      true,\n    );\n\n    let startSmoothPlaybackPositionUpdater = () => {\n      if (!player.isLive()) {\n        currentTimeSeekBar = this.getRelativeCurrentTime();\n        this.smoothPlaybackPositionUpdater.start();\n      }\n    };\n\n    let stopSmoothPlaybackPositionUpdater = () => {\n      this.smoothPlaybackPositionUpdater.clear();\n    };\n\n    player.on(player.exports.PlayerEvent.Play, startSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Playing, startSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Paused, stopSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.PlaybackFinished, stopSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Seeked, () => {\n      currentTimeSeekBar = this.getRelativeCurrentTime();\n    });\n    player.on(player.exports.PlayerEvent.SourceUnloaded, stopSmoothPlaybackPositionUpdater);\n\n    if (player.isPlaying()) {\n      startSmoothPlaybackPositionUpdater();\n    }\n  }\n\n  private getRelativeCurrentTime(): number {\n    return PlayerUtils.getCurrentTimeRelativeToSeekableRange(this.player);\n  }\n\n  release(): void {\n    super.release();\n\n    if (this.smoothPlaybackPositionUpdater) {\n      // object must not necessarily exist, e.g. in volume slider subclass\n      this.smoothPlaybackPositionUpdater.clear();\n    }\n\n    if (this.pausedTimeshiftUpdater) {\n      this.pausedTimeshiftUpdater.clear();\n    }\n\n    if (this.config.enableSeekPreview) {\n      this.onSeekPreview.unsubscribe(this.seekWhileScrubbing);\n    }\n  }\n\n  protected toDomElement(): DOM {\n    if (this.config.vertical) {\n      this.config.cssClasses.push('vertical');\n    }\n\n    let seekBarContainer = new DOM('div', {\n      id: this.config.id,\n      class: this.getCssClasses(),\n      role: 'slider',\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n      tabindex: this.config.tabIndex.toString(),\n    });\n\n    let seekBar = new DOM('div', {\n      class: this.prefixCss('seekbar'),\n    });\n    this.seekBar = seekBar;\n\n    // Indicator that shows the buffer fill level\n    let seekBarBufferLevel = new DOM('div', {\n      class: this.prefixCss('seekbar-bufferlevel'),\n    });\n    this.seekBarBufferPosition = seekBarBufferLevel;\n\n    // Indicator that shows the current playback position\n    let seekBarPlaybackPosition = new DOM('div', {\n      class: this.prefixCss('seekbar-playbackposition'),\n    });\n    this.seekBarPlaybackPosition = seekBarPlaybackPosition;\n\n    // A marker of the current playback position, e.g. a dot or line\n    let seekBarPlaybackPositionMarker = new DOM('div', {\n      class: this.prefixCss('seekbar-playbackposition-marker'),\n    });\n    this.seekBarPlaybackPositionMarker = seekBarPlaybackPositionMarker;\n\n    // Indicator that show where a seek will go to\n    let seekBarSeekPosition = new DOM('div', {\n      class: this.prefixCss('seekbar-seekposition'),\n    });\n    this.seekBarSeekPosition = seekBarSeekPosition;\n\n    // Indicator that shows the full seekbar\n    let seekBarBackdrop = new DOM('div', {\n      class: this.prefixCss('seekbar-backdrop'),\n    });\n    this.seekBarBackdrop = seekBarBackdrop;\n\n    let seekBarChapterMarkersContainer = new DOM('div', {\n      class: this.prefixCss('seekbar-markers'),\n    });\n    this.seekBarMarkersContainer = seekBarChapterMarkersContainer;\n\n    seekBar.append(\n      this.seekBarBackdrop,\n      this.seekBarBufferPosition,\n      this.seekBarSeekPosition,\n      this.seekBarPlaybackPosition,\n      this.seekBarMarkersContainer,\n      this.seekBarPlaybackPositionMarker,\n    );\n\n    let seeking = false;\n\n    // Define handler functions so we can attach/remove them later\n    let mouseTouchMoveHandler = (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n      // Avoid propagation to VR handler\n      if (this.player.vr != null) {\n        e.stopPropagation();\n      }\n\n      let targetPercentage = 100 * this.getOffset(e);\n      this.setSeekPosition(targetPercentage);\n      this.setPlaybackPosition(targetPercentage);\n      this.onSeekPreviewEvent(targetPercentage, true);\n    };\n\n    let mouseTouchUpHandler = (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      // Remove handlers, seek operation is finished\n      new DOM(document).off('touchmove mousemove', mouseTouchMoveHandler);\n      new DOM(document).off('touchend mouseup', mouseTouchUpHandler);\n\n      let targetPercentage = 100 * this.getOffset(e);\n      let snappedChapter =\n        this.timelineMarkersHandler &&\n        this.timelineMarkersHandler.getMarkerAtPosition(targetPercentage);\n\n      this.setSeeking(false);\n      seeking = false;\n\n      // Fire seeked event\n      this.onSeekedEvent(snappedChapter ? snappedChapter.position : targetPercentage);\n    };\n\n    // A seek always start with a touchstart or mousedown directly on the seekbar.\n    // To track a mouse seek also outside the seekbar (for touch events this works automatically),\n    // so the user does not need to take care that the mouse always stays on the seekbar, we attach the mousemove\n    // and mouseup handlers to the whole document. A seek is triggered when the user lifts the mouse key.\n    // A seek mouse gesture is thus basically a click with a long time frame between down and up events.\n    seekBar.on('touchstart mousedown', (e: MouseEvent | TouchEvent) => {\n      let isTouchEvent = BrowserUtils.isTouchSupported && this.isTouchEvent(e);\n\n      // Prevent selection of DOM elements (also prevents mousedown if current event is touchstart)\n      e.preventDefault();\n      // Avoid propagation to VR handler\n      if (this.player.vr != null) {\n        e.stopPropagation();\n      }\n\n      this.setSeeking(true); // Set seeking class on DOM element\n      seeking = true; // Set seek tracking flag\n\n      // Fire seeked event\n      this.onSeekEvent();\n\n      // Add handler to track the seek operation over the whole document\n      new DOM(document).on(isTouchEvent ? 'touchmove' : 'mousemove', mouseTouchMoveHandler);\n      new DOM(document).on(isTouchEvent ? 'touchend' : 'mouseup', mouseTouchUpHandler);\n    });\n\n    // Display seek target indicator when mouse hovers or finger slides over seekbar\n    seekBar.on('touchmove mousemove', (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      if (seeking) {\n        mouseTouchMoveHandler(e);\n      }\n\n      let position = 100 * this.getOffset(e);\n      this.setSeekPosition(position);\n\n      this.onSeekPreviewEvent(position, false);\n\n      if (this.hasLabel() && this.getLabel().isHidden()) {\n        this.getLabel().show();\n      }\n    });\n\n    // Hide seek target indicator when mouse or finger leaves seekbar\n    seekBar.on('touchend mouseleave', (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      this.setSeekPosition(0);\n\n      if (this.hasLabel()) {\n        this.getLabel().hide();\n      }\n    });\n\n    seekBarContainer.append(seekBar);\n\n    if (this.label) {\n      seekBarContainer.append(this.label.getDomElement());\n    }\n\n    return seekBarContainer;\n  }\n\n  /**\n   * Gets the horizontal offset of a mouse/touch event point from the left edge of the seek bar.\n   * @param eventPageX the pageX coordinate of an event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1], where 0 is the left edge and 1 is the right edge\n   */\n  private getHorizontalOffset(eventPageX: number): number {\n    let elementOffsetPx = this.seekBar.offset().left;\n    let widthPx = this.seekBar.width();\n    let offsetPx = eventPageX - elementOffsetPx;\n    let offset = (1 / widthPx) * offsetPx;\n\n    return this.sanitizeOffset(offset);\n  }\n\n  /**\n   * Gets the vertical offset of a mouse/touch event point from the bottom edge of the seek bar.\n   * @param eventPageY the pageX coordinate of an event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1], where 0 is the bottom edge and 1 is the top edge\n   */\n  private getVerticalOffset(eventPageY: number): number {\n    let elementOffsetPx = this.seekBar.offset().top;\n    let widthPx = this.seekBar.height();\n    let offsetPx = eventPageY - elementOffsetPx;\n    let offset = (1 / widthPx) * offsetPx;\n\n    return 1 - this.sanitizeOffset(offset);\n  }\n\n  /**\n   * Gets the mouse or touch event offset for the current configuration (horizontal or vertical).\n   * @param e the event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1]\n   * @see #getHorizontalOffset\n   * @see #getVerticalOffset\n   */\n  private getOffset(e: MouseEvent | TouchEvent): number {\n    if (BrowserUtils.isTouchSupported && this.isTouchEvent(e)) {\n      if (this.config.vertical) {\n        return this.getVerticalOffset(\n          e.type === 'touchend' ? e.changedTouches[0].pageY : e.touches[0].pageY,\n        );\n      } else {\n        return this.getHorizontalOffset(\n          e.type === 'touchend' ? e.changedTouches[0].pageX : e.touches[0].pageX,\n        );\n      }\n    } else if (e instanceof MouseEvent) {\n      if (this.config.vertical) {\n        return this.getVerticalOffset(e.pageY);\n      } else {\n        return this.getHorizontalOffset(e.pageX);\n      }\n    } else {\n      if (console) {\n        console.warn('invalid event');\n      }\n      return 0;\n    }\n  }\n\n  /**\n   * Sanitizes the mouse offset to the range of [0, 1].\n   *\n   * When tracking the mouse outside the seek bar, the offset can be outside the desired range and this method\n   * limits it to the desired range. E.g. a mouse event left of the left edge of a seek bar yields an offset below\n   * zero, but to display the seek target on the seek bar, we need to limit it to zero.\n   *\n   * @param offset the offset to sanitize\n   * @returns {number} the sanitized offset.\n   */\n  private sanitizeOffset(offset: number) {\n    // Since we track mouse moves over the whole document, the target can be outside the seek range,\n    // and we need to limit it to the [0, 1] range.\n    if (offset < 0) {\n      offset = 0;\n    } else if (offset > 1) {\n      offset = 1;\n    }\n\n    return offset;\n  }\n\n  /**\n   * Sets the position of the playback position indicator.\n   * @param percent a number between 0 and 100 as returned by the player\n   */\n  setPlaybackPosition(percent: number) {\n    this.playbackPositionPercentage = percent;\n\n    // Set position of the bar\n    this.setPosition(this.seekBarPlaybackPosition, percent);\n\n    // Set position of the marker\n    let totalSize = this.config.vertical\n      ? this.seekBar.height() - this.seekBarPlaybackPositionMarker.height()\n      : this.seekBar.width();\n    let px = (totalSize / 100) * percent;\n    if (this.config.vertical) {\n      px = this.seekBar.height() - px - this.seekBarPlaybackPositionMarker.height();\n    }\n\n    let style = this.config.vertical\n      ? // -ms-transform required for IE9\n        // -webkit-transform required for Android 4.4 WebView\n        {\n          transform: 'translateY(' + px + 'px)',\n          '-ms-transform': 'translateY(' + px + 'px)',\n          '-webkit-transform': 'translateY(' + px + 'px)',\n        }\n      : {\n          transform: 'translateX(' + px + 'px)',\n          '-ms-transform': 'translateX(' + px + 'px)',\n          '-webkit-transform': 'translateX(' + px + 'px)',\n        };\n    this.seekBarPlaybackPositionMarker.css(style);\n  }\n\n  /**\n   * Refreshes the playback position. Can be used by subclasses to refresh the position when\n   * the size of the component changes.\n   */\n  protected refreshPlaybackPosition() {\n    this.setPlaybackPosition(this.playbackPositionPercentage);\n  }\n\n  /**\n   * Sets the position until which media is buffered.\n   * @param percent a number between 0 and 100\n   */\n  setBufferPosition(percent: number) {\n    this.setPosition(this.seekBarBufferPosition, percent);\n  }\n\n  /**\n   * Sets the position where a seek, if executed, would jump to.\n   * @param percent a number between 0 and 100\n   */\n  setSeekPosition(percent: number) {\n    this.setPosition(this.seekBarSeekPosition, percent);\n  }\n\n  /**\n   * Set the actual position (width or height) of a DOM element that represent a bar in the seek bar.\n   * @param element the element to set the position for\n   * @param percent a number between 0 and 100\n   */\n  private setPosition(element: DOM, percent: number) {\n    let scale = percent / 100;\n\n    // When the scale is exactly 1 or very near 1 (and the browser internally rounds it to 1), browsers seem to render\n    // the elements differently and the height gets slightly off, leading to mismatching heights when e.g. the buffer\n    // level bar has a width of 1 and the playback position bar has a width < 1. A jittering buffer level around 1\n    // leads to an even worse flickering effect.\n    // Various changes in CSS styling and DOM hierarchy did not solve the issue so the workaround is to avoid a scale\n    // of exactly 1.\n    if (scale >= 0.99999 && scale <= 1.00001) {\n      scale = 0.99999;\n    }\n\n    let style = this.config.vertical\n      ? // -ms-transform required for IE9\n        // -webkit-transform required for Android 4.4 WebView\n        {\n          transform: 'scaleY(' + scale + ')',\n          '-ms-transform': 'scaleY(' + scale + ')',\n          '-webkit-transform': 'scaleY(' + scale + ')',\n        }\n      : {\n          transform: 'scaleX(' + scale + ')',\n          '-ms-transform': 'scaleX(' + scale + ')',\n          '-webkit-transform': 'scaleX(' + scale + ')',\n        };\n    element.css(style);\n  }\n\n  /**\n   * Puts the seek bar into or out of seeking state by adding/removing a class to the DOM element. This can be used\n   * to adjust the styling while seeking.\n   *\n   * @param seeking should be true when entering seek state, false when exiting the seek state\n   */\n  setSeeking(seeking: boolean) {\n    if (seeking) {\n      this.getDomElement().addClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n    } else {\n      this.getDomElement().removeClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n    }\n  }\n\n  /**\n   * Checks if the seek bar is currently in the seek state.\n   * @returns {boolean} true if in seek state, else false\n   */\n  isSeeking(): boolean {\n    return this.getDomElement().hasClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n  }\n\n  /**\n   * Checks if the seek bar has a {@link SeekBarLabel}.\n   * @returns {boolean} true if the seek bar has a label, else false\n   */\n  hasLabel(): boolean {\n    return this.label != null;\n  }\n\n  /**\n   * Gets the label of this seek bar.\n   * @returns {SeekBarLabel} the label if this seek bar has a label, else null\n   */\n  getLabel(): SeekBarLabel | null {\n    return this.label;\n  }\n\n  protected onSeekEvent() {\n    this.seekBarEvents.onSeek.dispatch(this);\n  }\n\n  protected onSeekPreviewEvent(percentage: number, scrubbing: boolean) {\n    let snappedMarker =\n      this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(percentage);\n\n    let seekPositionPercentage = percentage;\n\n    if (snappedMarker) {\n      if (snappedMarker.duration > 0) {\n        if (percentage < snappedMarker.position) {\n          // Snap the position to the start of the interval if the seek is within the left snap margin\n          // We know that we are within a snap margin when we are outside the marker interval but still\n          // have a snappedMarker\n          seekPositionPercentage = snappedMarker.position;\n        } else if (percentage > snappedMarker.position + snappedMarker.duration) {\n          // Snap the position to the end of the interval if the seek is within the right snap margin\n          seekPositionPercentage = snappedMarker.position + snappedMarker.duration;\n        }\n      } else {\n        // Position markers always snap to their marker position\n        seekPositionPercentage = snappedMarker.position;\n      }\n    }\n\n    if (this.label) {\n      this.label.getDomElement().css({\n        left: seekPositionPercentage + '%',\n      });\n    }\n\n    this.seekBarEvents.onSeekPreview.dispatch(this, {\n      scrubbing: scrubbing,\n      position: seekPositionPercentage,\n      marker: snappedMarker,\n    });\n  }\n\n  protected onSeekedEvent(percentage: number) {\n    this.seekBarEvents.onSeeked.dispatch(this, percentage);\n  }\n\n  /**\n   * Gets the event that is fired when a scrubbing seek operation is started.\n   * @returns {Event<SeekBar, NoArgs>}\n   */\n  get onSeek(): Event<SeekBar, NoArgs> {\n    return this.seekBarEvents.onSeek.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired during a scrubbing seek (to indicate that the seek preview, i.e. the video frame,\n   * should be updated), or during a normal seek preview when the seek bar is hovered (and the seek target,\n   * i.e. the seek bar label, should be updated).\n   * @returns {Event<SeekBar, SeekPreviewEventArgs>}\n   */\n  get onSeekPreview(): Event<SeekBar, SeekPreviewEventArgs> {\n    return this.seekBarEvents.onSeekPreview.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when a scrubbing seek has finished or when a direct seek is issued.\n   * @returns {Event<SeekBar, number>}\n   */\n  get onSeeked(): Event<SeekBar, number> {\n    return this.seekBarEvents.onSeeked.getEvent();\n  }\n\n  protected onShowEvent(): void {\n    super.onShowEvent();\n\n    // Refresh the position of the playback position when the seek bar becomes visible. To correctly set the position,\n    // the DOM element must be fully initialized an have its size calculated, because the position is set as an absolute\n    // value calculated from the size. This required size is not known when it is hidden.\n    // For such cases, we refresh the position here in onShow because here it is guaranteed that the component knows\n    // its size and can set the position correctly.\n    this.refreshPlaybackPosition();\n  }\n\n  /**\n   * Checks if TouchEvent is supported.\n   * @returns {boolean} true if TouchEvent not undefined, else false\n   */\n  isTouchEvent(e: UIEvent): e is TouchEvent {\n    return window.TouchEvent && e instanceof TouchEvent;\n  }\n}\n","import {PlayerAPI} from 'bitmovin-player';\n\nexport function getMinBufferLevel(player: PlayerAPI): number {\n\n    const playerDuration = player.getDuration();\n\n    const videoBufferLength = player.getVideoBufferLength();\n    const audioBufferLength = player.getAudioBufferLength();\n    // Calculate the buffer length which is the smaller length of the audio and video buffers. If one of these\n    // buffers is not available, we set it's value to MAX_VALUE to make sure that the other real value is taken\n    // as the buffer length.\n    let bufferLength = Math.min(\n        videoBufferLength != null ? videoBufferLength : Number.MAX_VALUE,\n        audioBufferLength != null ? audioBufferLength : Number.MAX_VALUE);\n    // If both buffer lengths are missing, we set the buffer length to zero\n    if (bufferLength === Number.MAX_VALUE) {\n        bufferLength = 0;\n    }\n\n    return 100 / playerDuration * bufferLength;\n}\n","import { UIUtils } from '../uiutils';\nimport { DOM } from '../dom';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { VolumeController } from '../volumecontroller';\n\nexport enum SeekBarType {\n  Vod,\n  Live,\n  Volume,\n}\n\ninterface Range {\n  min: number;\n  max: number;\n}\n\ninterface KeyStepIncrementsConfig {\n  leftRight: number;\n  upDown: number;\n}\n\nconst coerceValueIntoRange = (\n  value: number,\n  range: Range,\n  cb: (value: number) => void,\n) => {\n  if (value < range.min) {\n    cb(range.min);\n  } else if (value > range.max) {\n    cb(range.max);\n  } else {\n    cb(value);\n  }\n};\n\nexport class SeekBarController {\n  protected keyStepIncrements: KeyStepIncrementsConfig;\n  protected player: PlayerAPI;\n  protected volumeController: VolumeController;\n\n  constructor(\n    keyStepIncrements: KeyStepIncrementsConfig,\n    player: PlayerAPI,\n    volumeController: VolumeController,\n  ) {\n    this.keyStepIncrements = keyStepIncrements;\n    this.player = player;\n    this.volumeController = volumeController;\n  }\n\n  protected arrowKeyControls(\n    currentValue: number,\n    range: Range,\n    valueUpdate: (value: number) => void,\n  ) {\n    const controlValue = Math.floor(currentValue);\n\n    return {\n      left: () => coerceValueIntoRange(controlValue - this.keyStepIncrements.leftRight, range, valueUpdate),\n      right: () => coerceValueIntoRange(controlValue + this.keyStepIncrements.leftRight, range, valueUpdate),\n      up: () => coerceValueIntoRange(controlValue + this.keyStepIncrements.upDown, range, valueUpdate),\n      down: () => coerceValueIntoRange(controlValue - this.keyStepIncrements.upDown, range, valueUpdate),\n      home: () => coerceValueIntoRange(range.min, range, valueUpdate),\n      end: () => coerceValueIntoRange(range.max, range, valueUpdate),\n    };\n  }\n\n  protected seekBarControls(type: SeekBarType) {\n    if (type === SeekBarType.Live) {\n      return this.arrowKeyControls(this.player.getTimeShift(), { min: this.player.getMaxTimeShift(), max: 0 }, this.player.timeShift);\n    } else if (type === SeekBarType.Vod) {\n      return this.arrowKeyControls(this.player.getCurrentTime(), { min: 0, max: this.player.getDuration() }, this.player.seek);\n    } else if (type === SeekBarType.Volume && this.volumeController != null) {\n      const volumeTransition = this.volumeController.startTransition();\n      return this.arrowKeyControls(this.player.getVolume(), { min: 0, max: 100 }, volumeTransition.finish.bind(volumeTransition));\n    }\n  }\n\n  public setSeekBarControls(domElement: DOM, type: () => SeekBarType) {\n    domElement.on('keydown', (e: KeyboardEvent) => {\n      const controls = this.seekBarControls(type());\n      switch (e.keyCode) {\n        case UIUtils.KeyCode.LeftArrow: {\n          controls.left();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.RightArrow: {\n          controls.right();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.UpArrow: {\n          controls.up();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.DownArrow: {\n          controls.down();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.Home: {\n          controls.home();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.End: {\n          controls.end();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.Space: {\n          this.player.isPlaying() ? this.player.pause() : this.player.play();\n          e.preventDefault();\n          break;\n        }\n      }\n    });\n  }\n}","import {Container, ContainerConfig} from './container';\nimport {Label, LabelConfig} from './label';\nimport {Component, ComponentConfig} from './component';\nimport { UIInstanceManager } from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport {ImageLoader} from '../imageloader';\nimport {CssProperties} from '../dom';\nimport { PlayerAPI, Thumbnail } from 'bitmovin-player';\nimport { SeekBar, SeekPreviewEventArgs } from './seekbar';\nimport { PlayerUtils } from '../playerutils';\n\n/**\n * Configuration interface for a {@link SeekBarLabel}.\n */\nexport interface SeekBarLabelConfig extends ContainerConfig {\n  // nothing yet\n}\n\n/**\n * A label for a {@link SeekBar} that can display the seek target time, a thumbnail, and title (e.g. chapter title).\n */\nexport class SeekBarLabel extends Container<SeekBarLabelConfig> {\n\n  private timeLabel: Label<LabelConfig>;\n  private titleLabel: Label<LabelConfig>;\n  private thumbnail: Component<ComponentConfig>;\n\n  private thumbnailImageLoader: ImageLoader;\n\n  private timeFormat: string;\n\n  private appliedMarkerCssClasses: string[] = [];\n  private player: PlayerAPI;\n  private uiManager: UIInstanceManager;\n\n  constructor(config: SeekBarLabelConfig = {}) {\n    super(config);\n\n    this.timeLabel = new Label({ cssClasses: ['seekbar-label-time'] });\n    this.titleLabel = new Label({ cssClasses: ['seekbar-label-title'] });\n    this.thumbnail = new Component({ cssClasses: ['seekbar-thumbnail'], role: 'img' });\n    this.thumbnailImageLoader = new ImageLoader();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-seekbar-label',\n      components: [new Container({\n        components: [\n          this.thumbnail,\n          new Container({\n            components: [this.titleLabel, this.timeLabel],\n            cssClass: 'seekbar-label-metadata',\n          })],\n        cssClass: 'seekbar-label-inner',\n      })],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.player = player;\n    this.uiManager = uimanager;\n    uimanager.onSeekPreview.subscribeRateLimited(this.handleSeekPreview, 100);\n\n    let init = () => {\n      // Set time format depending on source duration\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\n        StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\n      // Set initial state of title and thumbnail to handle sourceLoaded when switching to a live-stream\n      this.setTitleText(null);\n      this.setThumbnail(null);\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n    init();\n  }\n\n  private handleSeekPreview = (sender: SeekBar, args: SeekPreviewEventArgs) => {\n    if (this.player.isLive()) {\n      let maxTimeShift = this.player.getMaxTimeShift();\n      let timeShiftPreview = maxTimeShift - maxTimeShift * (args.position / 100);\n\n      this.setTime(timeShiftPreview);\n\n      // In case of a live stream the player expects the time passed into the getThumbnail as a wallClockTime and not\n      // as a relative timeShift value.\n      const convertTimeShiftPreviewToWallClockTime = (targetTimeShift: number): number => {\n        const currentTimeShift = this.player.getTimeShift();\n        const currentTime = this.player.getCurrentTime();\n\n        const wallClockTimeOfLiveEdge = currentTime - currentTimeShift;\n        return wallClockTimeOfLiveEdge + targetTimeShift;\n      };\n\n      const wallClockTime = convertTimeShiftPreviewToWallClockTime(timeShiftPreview);\n      this.setThumbnail(this.player.getThumbnail(wallClockTime));\n\n    } else {\n      let time = this.player.getDuration() * (args.position / 100);\n      this.setTime(time);\n\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\n      const absoluteSeekTarget = time + seekableRangeStart;\n      this.setThumbnail(this.player.getThumbnail(absoluteSeekTarget));\n    }\n\n    if (args.marker) {\n      this.setTitleText(args.marker.marker.title);\n    } else {\n      this.setTitleText(null);\n    }\n\n    // Remove CSS classes from previous marker\n    if (this.appliedMarkerCssClasses.length > 0) {\n      this.getDomElement().removeClass(this.appliedMarkerCssClasses.join(' '));\n      this.appliedMarkerCssClasses = [];\n    }\n\n    // Add CSS classes of current marker\n    if (args.marker) {\n      const cssClasses = (args.marker.marker.cssClasses || []).map(cssClass => this.prefixCss(cssClass));\n      this.getDomElement().addClass(cssClasses.join(' '));\n      this.appliedMarkerCssClasses = cssClasses;\n    }\n  };\n\n  /**\n   * Sets arbitrary text on the label.\n   * @param text the text to show on the label\n   */\n  setText(text: string) {\n    this.timeLabel.setText(text);\n  }\n\n  /**\n   * Sets a time to be displayed on the label.\n   * @param seconds the time in seconds to display on the label\n   */\n  setTime(seconds: number) {\n    this.setText(StringUtils.secondsToTime(seconds, this.timeFormat));\n  }\n\n  /**\n   * Sets the text on the title label.\n   * @param text the text to show on the label\n   */\n  setTitleText(text = '') {\n    this.titleLabel.setText(text);\n  }\n\n  /**\n   * Sets or removes a thumbnail on the label.\n   * @param thumbnail the thumbnail to display on the label or null to remove a displayed thumbnail\n   */\n  setThumbnail(thumbnail: Thumbnail = null) {\n    let thumbnailElement = this.thumbnail.getDomElement();\n\n    if (thumbnail == null) {\n      thumbnailElement.css({\n        'background-image': null,\n        'display': null,\n        'width': null,\n        'height': null,\n      });\n    }\n    else {\n      // We use the thumbnail image loader to make sure the thumbnail is loaded and it's size is known before be can\n      // calculate the CSS properties and set them on the element.\n      this.thumbnailImageLoader.load(thumbnail.url, (url, width, height) => {\n        // can be checked like that because x/y/w/h are either all present or none\n        // https://www.w3.org/TR/media-frags/#naming-space\n        if (thumbnail.x !== undefined) {\n          thumbnailElement.css(this.thumbnailCssSprite(thumbnail, width, height));\n        } else {\n          thumbnailElement.css(this.thumbnailCssSingleImage(thumbnail, width, height));\n        }\n      });\n    }\n  }\n\n  private thumbnailCssSprite(thumbnail: Thumbnail, width: number, height: number): CssProperties {\n    let thumbnailCountX = width / thumbnail.width;\n    let thumbnailCountY = height / thumbnail.height;\n\n    let thumbnailIndexX = thumbnail.x / thumbnail.width;\n    let thumbnailIndexY = thumbnail.y / thumbnail.height;\n\n    let sizeX = 100 * thumbnailCountX;\n    let sizeY = 100 * thumbnailCountY;\n\n    let offsetX = 100 * thumbnailIndexX;\n    let offsetY = 100 * thumbnailIndexY;\n\n    let aspectRatio = 1 / thumbnail.width * thumbnail.height;\n\n    // The thumbnail size is set by setting the CSS 'width' and 'padding-bottom' properties. 'padding-bottom' is\n    // used because it is relative to the width and can be used to set the aspect ratio of the thumbnail.\n    // A default value for width is set in the stylesheet and can be overwritten from there or anywhere else.\n    return {\n      'display': 'inherit',\n      'background-image': `url(${thumbnail.url})`,\n      'padding-bottom': `${100 * aspectRatio}%`,\n      'background-size': `${sizeX}% ${sizeY}%`,\n      'background-position': `-${offsetX}% -${offsetY}%`,\n    };\n  }\n\n  private thumbnailCssSingleImage(thumbnail: Thumbnail, width: number, height: number): CssProperties {\n    let aspectRatio = 1 / width * height;\n\n    return {\n      'display': 'inherit',\n      'background-image': `url(${thumbnail.url})`,\n      'padding-bottom': `${100 * aspectRatio}%`,\n      'background-size': `100% 100%`,\n      'background-position': `0 0`,\n    };\n  }\n\n  release(): void {\n    super.release();\n\n    this.uiManager.onSeekPreview.unsubscribe(this.handleSeekPreview);\n  }\n}\n","import {ListSelector, ListSelectorConfig} from './listselector';\nimport {DOM} from '../dom';\nimport { i18n, LocalizableText } from '../localization/i18n';\n\n/**\n * A simple select box providing the possibility to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *     <select class='ui-selectbox'>\n *         <option value='key'>label</option>\n *         ...\n *     </select>\n * </code>\n */\n\nexport class SelectBox extends ListSelector<ListSelectorConfig> {\n\n  private selectElement: DOM;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-selectbox',\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let selectElement = new DOM('select', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n    });\n\n    this.selectElement = selectElement;\n    this.updateDomItems();\n\n    selectElement.on('change', () => {\n      let value = selectElement.val();\n      this.onItemSelectedEvent(value, false);\n    });\n\n    return selectElement;\n  }\n\n  protected updateDomItems(selectedValue: string = null) {\n    // Delete all children\n    this.selectElement.empty();\n\n    // Add updated children\n    for (let item of this.items) {\n      let optionElement = new DOM('option', {\n        'value': String(item.key),\n      }).html(i18n.performLocalization(item.label));\n\n      if (item.key === String(selectedValue)) { // convert selectedValue to string to catch 'null'/null case\n        optionElement.attr('selected', 'selected');\n      }\n\n      this.selectElement.append(optionElement);\n    }\n  }\n\n  protected onItemAddedEvent(value: string) {\n    super.onItemAddedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemRemovedEvent(value: string) {\n    super.onItemRemovedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\n    super.onItemSelectedEvent(value);\n    if (updateDomItems) {\n      this.updateDomItems(value);\n    }\n  }\n}\n","import { Container, ContainerConfig } from './container';\nimport { SelectBox } from './selectbox';\nimport { UIInstanceManager } from '../uimanager';\nimport { Timeout } from '../timeout';\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\nimport { SettingsPanelPage } from './settingspanelpage';\nimport { SettingsPanelItem } from './settingspanelitem';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { Component, ComponentConfig } from './component';\n\n/**\n * Configuration interface for a {@link SettingsPanel}.\n */\nexport interface SettingsPanelConfig extends ContainerConfig {\n  /**\n   * The delay in milliseconds after which the settings panel will be hidden when there is no user interaction.\n   * Set to -1 to disable automatic hiding.\n   * Default: 3 seconds (3000)\n   */\n  hideDelay?: number;\n\n  /**\n   * Flag to specify if there should be an animation when switching SettingsPanelPages.\n   * Default: true\n   */\n  pageTransitionAnimation?: boolean;\n}\n\nenum NavigationDirection {\n  Forwards,\n  Backwards,\n}\n\n/**\n * A panel containing a list of {@link SettingsPanelPage items}.\n *\n * To configure pages just pass them in the components array.\n *\n * Example:\n *  let settingsPanel = new SettingsPanel({\n *    hidden: true,\n *  });\n *\n *  let settingsPanelPage = new SettingsPanelPage({\n *    components: […]\n *  });\n *\n *  let secondSettingsPanelPage = new SettingsPanelPage({\n *    components: […]\n *  });\n *\n *  settingsPanel.addComponent(settingsPanelPage);\n *  settingsPanel.addComponent(secondSettingsPanelPage);\n *\n * For an example how to navigate between pages @see SettingsPanelPageNavigatorButton\n */\nexport class SettingsPanel extends Container<SettingsPanelConfig> {\n\n  private static readonly CLASS_ACTIVE_PAGE = 'active';\n\n  // navigation handling\n  private activePage: SettingsPanelPage;\n  private navigationStack: SettingsPanelPage[] = [];\n\n  private settingsPanelEvents = {\n    onSettingsStateChanged: new EventDispatcher<SettingsPanel, NoArgs>(),\n  };\n\n  private hideTimeout: Timeout;\n\n  constructor(config: SettingsPanelConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settings-panel',\n      hideDelay: 3000,\n      pageTransitionAnimation: true,\n    } as SettingsPanelConfig, this.config);\n\n    this.activePage = this.getRootPage();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    uimanager.onControlsHide.subscribe(() => this.hideHoveredSelectBoxes());\n\n    if (config.hideDelay > -1) {\n      this.hideTimeout = new Timeout(config.hideDelay, () => {\n        this.hide();\n        this.hideHoveredSelectBoxes();\n      });\n      this.getDomElement().on('mouseenter', () => {\n        // On mouse enter clear the timeout\n        this.hideTimeout.clear();\n      });\n      this.getDomElement().on('mouseleave', () => {\n        // On mouse leave activate the timeout\n        this.hideTimeout.reset();\n      });\n      this.getDomElement().on('focusin', () => {\n        this.hideTimeout.clear();\n      });\n      this.getDomElement().on('focusout', () => {\n        this.hideTimeout.reset();\n      });\n    }\n\n    this.onHide.subscribe(() => {\n      if (config.hideDelay > -1) {\n        // Clear timeout when hidden from outside\n        this.hideTimeout.clear();\n      }\n\n      // Since we don't reset the actual navigation here we need to simulate a onInactive event in case some panel\n      // needs to do something when they become invisible / inactive.\n      this.activePage.onInactiveEvent();\n    });\n\n    this.onShow.subscribe(() => {\n      // Reset navigation when te panel gets visible to avoid a weird animation when hiding\n      this.resetNavigation(true);\n      // Since we don't need to navigate to the root page again we need to fire the onActive event when the settings\n      // panel gets visible.\n      this.activePage.onActiveEvent();\n\n      if (config.hideDelay > -1) {\n        // Activate timeout when shown\n        this.hideTimeout.start();\n      }\n    });\n\n    // pass event from root page through\n    this.getRootPage().onSettingsStateChanged.subscribe(() => {\n      this.onSettingsStateChangedEvent();\n    });\n\n    this.updateActivePageClass();\n  }\n\n  /**\n   * Returns the current active / visible page\n   * @return {SettingsPanelPage}\n   */\n  getActivePage(): SettingsPanelPage {\n    return this.activePage;\n  }\n\n  /**\n   * Sets the\n   * @deprecated Use {@link setActivePage} instead\n   * @param index\n   */\n  setActivePageIndex(index: number): void {\n    this.setActivePage(this.getPages()[index]);\n  }\n\n  /**\n   * Adds the passed page to the navigation stack and makes it visible.\n   * Use {@link popSettingsPanelPage} to navigate backwards.\n   *\n   * Results in no-op if the target page is the current page.\n   * @params page\n   */\n  setActivePage(targetPage: SettingsPanelPage): void {\n    if (targetPage === this.getActivePage()) {\n      console.warn('Page is already the current one ... skipping navigation');\n      return;\n    }\n\n    this.navigateToPage(\n      targetPage,\n      this.getActivePage(),\n      NavigationDirection.Forwards,\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\n    );\n  }\n\n  /**\n   * Resets the navigation stack by navigating back to the root page and displaying it.\n   */\n  popToRootSettingsPanelPage(): void {\n    this.resetNavigation((this.config as SettingsPanelConfig).pageTransitionAnimation);\n  }\n\n  /**\n   * Removes the current page from the navigation stack and makes the previous one visible.\n   * Results in a no-op if we are already on the root page.\n   */\n  popSettingsPanelPage() {\n    if (this.navigationStack.length === 0) {\n      console.warn('Already on the root page ... skipping navigation');\n      return;\n    }\n\n    let targetPage = this.navigationStack[this.navigationStack.length - 2];\n    // The root part isn't part of the navigation stack so handle it explicitly here\n    if (!targetPage) {\n      targetPage = this.getRootPage();\n    }\n\n    this.navigateToPage(\n      targetPage,\n      this.activePage,\n      NavigationDirection.Backwards,\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\n    );\n  }\n\n  /**\n   * Checks if there are active settings within the root page of the settings panel.\n   * An active setting is a setting that is visible and enabled, which the user can interact with.\n   * @returns {boolean} true if there are active settings, false if the panel is functionally empty to a user\n   */\n  rootPageHasActiveSettings(): boolean {\n    return this.getRootPage().hasActiveSettings();\n  }\n\n  /**\n   * Return all configured pages\n   * @returns {SettingsPanelPage[]}\n   */\n  getPages(): SettingsPanelPage[] {\n    return <SettingsPanelPage[]>this.config.components.filter(component => component instanceof SettingsPanelPage);\n  }\n\n  get onSettingsStateChanged(): Event<SettingsPanel, NoArgs> {\n    return this.settingsPanelEvents.onSettingsStateChanged.getEvent();\n  }\n\n  release(): void {\n    super.release();\n    if (this.hideTimeout) {\n      this.hideTimeout.clear();\n    }\n  }\n\n  // Support adding settingsPanelPages after initialization\n  addComponent(component: Component<ComponentConfig>) {\n    if (this.getPages().length === 0 && component instanceof SettingsPanelPage) {\n      this.activePage = component;\n    }\n    super.addComponent(component);\n  }\n\n  private updateActivePageClass(): void {\n    this.getPages().forEach((page: SettingsPanelPage) => {\n      if (page === this.activePage) {\n        page.getDomElement().addClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\n      } else {\n        page.getDomElement().removeClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\n      }\n    });\n  }\n\n  private resetNavigation(resetNavigationOnShow: boolean): void {\n    const sourcePage = this.getActivePage();\n    const rootPage = this.getRootPage();\n    if (sourcePage) {\n      // Since the onInactiveEvent was already fired in the onHide we need to suppress it here\n      if (!resetNavigationOnShow) {\n        sourcePage.onInactiveEvent();\n      }\n    }\n    this.navigationStack = [];\n    this.animateNavigation(rootPage, sourcePage, resetNavigationOnShow);\n    this.activePage = rootPage;\n    this.updateActivePageClass();\n  }\n\n  private navigateToPage(\n    targetPage: SettingsPanelPage,\n    sourcePage: SettingsPanelPage,\n    direction: NavigationDirection,\n    skipAnimation: boolean,\n  ): void {\n    this.activePage = targetPage;\n\n    if (direction === NavigationDirection.Forwards) {\n      this.navigationStack.push(targetPage);\n    } else {\n      this.navigationStack.pop();\n    }\n\n    this.animateNavigation(targetPage, sourcePage, skipAnimation);\n\n    this.updateActivePageClass();\n    targetPage.onActiveEvent();\n    sourcePage.onInactiveEvent();\n  }\n\n  /**\n   * @param targetPage\n   * @param sourcePage\n   * @param skipAnimation This is just an internal flag if we want to have an animation. It is set true when we reset\n   * the navigation within the onShow callback of the settingsPanel. In this case we don't want an actual animation but\n   * the recalculation of the dimension of the settingsPanel.\n   * This is independent of the pageTransitionAnimation flag.\n   */\n  private animateNavigation(targetPage: SettingsPanelPage, sourcePage: SettingsPanelPage, skipAnimation: boolean) {\n    if (!(this.config as SettingsPanelConfig).pageTransitionAnimation) {\n      return;\n    }\n\n    const settingsPanelDomElement = this.getDomElement();\n    const settingsPanelHTMLElement = this.getDomElement().get(0);\n\n    // get current dimension\n    const settingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\n    const settingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\n\n    // calculate target size of the settings panel\n    sourcePage.getDomElement().css('display', 'none');\n    this.getDomElement().css({ width: '', height: '' }); // let css auto settings kick in again\n\n    const targetPageHtmlElement = targetPage.getDomElement().get(0);\n    // clone the targetPage DOM element so that we can calculate the width / height how they will be after\n    // switching the page. We are using a clone to prevent (mostly styling) side-effects on the real DOM element\n    const clone = targetPageHtmlElement.cloneNode(true) as HTMLElement;\n    // append to parent so we get the 'real' size\n    const containerWrapper = targetPageHtmlElement.parentNode;\n    containerWrapper.appendChild(clone);\n    // set clone visible\n    clone.style.display = 'block';\n\n    // collect target dimension\n    const targetSettingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\n    const targetSettingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\n\n    // remove clone from the DOM\n    clone.parentElement.removeChild(clone); // .remove() is not working in IE\n    sourcePage.getDomElement().css('display', '');\n\n    // set the values back to the current ones that the browser animates it (browsers don't animate 'auto' values)\n    settingsPanelDomElement.css({\n      width: settingsPanelWidth + 'px',\n      height: settingsPanelHeight + 'px',\n    });\n\n    if (!skipAnimation) {\n      // We need to force the browser to reflow between setting the width and height that we actually get a animation\n      this.forceBrowserReflow();\n    }\n\n    // set the values to the target dimension\n    settingsPanelDomElement.css({\n      width: targetSettingsPanelWidth + 'px',\n      height: targetSettingsPanelHeight + 'px',\n    });\n  }\n\n  private forceBrowserReflow(): void {\n    // Force the browser to reflow the layout\n    // https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    this.getDomElement().get(0).offsetLeft;\n  }\n\n  /**\n   * Hack for IE + Firefox\n   * when the settings panel fades out while an item of a select box is still hovered, the select box will not fade out\n   * while the settings panel does. This would leave a floating select box, which is just weird\n   */\n  private hideHoveredSelectBoxes(): void {\n    this.getComputedItems().forEach((item: SettingsPanelItem) => {\n      if (item.isActive() && (item as any).setting instanceof SelectBox) {\n        const selectBox = (item as any).setting as SelectBox;\n        const oldDisplay = selectBox.getDomElement().css('display');\n        if (oldDisplay === 'none') {\n          // if oldDisplay is already 'none', no need to set to 'none' again. It could lead to race condition\n          // wherein the display is irreversibly set to 'none' when browser tab/window is not active because\n          // requestAnimationFrame is either delayed or paused in some browsers in inactive state\n          return;\n        }\n\n        // updating the display to none marks the select-box as inactive, so it will be hidden with the rest\n        // we just have to make sure to reset this as soon as possible\n        selectBox.getDomElement().css('display', 'none');\n        if (window.requestAnimationFrame) {\n          requestAnimationFrame(() => {\n            selectBox.getDomElement().css('display', oldDisplay);\n          });\n        } else {\n          // IE9 has no requestAnimationFrame, set the value directly. It has no optimization about ignoring DOM-changes\n          // between animationFrames\n          selectBox.getDomElement().css('display', oldDisplay);\n        }\n      }\n    });\n  }\n\n  // collect all items from all pages (see hideHoveredSelectBoxes)\n  private getComputedItems(): SettingsPanelItem[] {\n    const allItems: SettingsPanelItem[] = [];\n    for (let page of this.getPages()) {\n      allItems.push(...page.getItems());\n    }\n    return allItems;\n  }\n\n  private getRootPage(): SettingsPanelPage {\n    return this.getPages()[0];\n  }\n\n  protected onSettingsStateChangedEvent() {\n    this.settingsPanelEvents.onSettingsStateChanged.dispatch(this);\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {Component, ComponentConfig} from './component';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport { Label, LabelConfig } from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {SelectBox} from './selectbox';\nimport {ListBox} from './listbox';\nimport {VideoQualitySelectBox} from './videoqualityselectbox';\nimport {AudioQualitySelectBox} from './audioqualityselectbox';\nimport {PlaybackSpeedSelectBox} from './playbackspeedselectbox';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { LocalizableText } from '../localization/i18n';\n\n/**\n * An item for a {@link SettingsPanelPage},\n * Containing an optional {@link Label} and a component that configures a setting.\n * If the components is a {@link SelectBox} it will handle the logic of displaying it or not\n */\nexport class SettingsPanelItem extends Container<ContainerConfig> {\n\n  private label: Component<ComponentConfig>;\n  private setting: Component<ComponentConfig>;\n\n  private settingsPanelItemEvents = {\n    onActiveChanged: new EventDispatcher<SettingsPanelItem, NoArgs>(),\n  };\n\n  constructor(label: LocalizableText | Component<ComponentConfig>, setting: Component<ComponentConfig>, config: ContainerConfig = {}) {\n    super(config);\n\n    this.setting = setting;\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settings-panel-item',\n      role: 'menuitem',\n    }, this.config);\n\n    if (label !== null) {\n      if (label instanceof Component) {\n        this.label = label;\n      } else {\n        this.label = new Label({ text: label, for: this.setting.getConfig().id } as LabelConfig);\n      }\n      this.addComponent(this.label);\n    }\n\n    this.addComponent(this.setting);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    if (this.setting instanceof SelectBox || this.setting instanceof ListBox) {\n      let handleConfigItemChanged = () => {\n        if (!(this.setting instanceof SelectBox) && !(this.setting instanceof ListBox)) {\n          return;\n        }\n        // The minimum number of items that must be available for the setting to be displayed\n        // By default, at least two items must be available, else a selection is not possible\n        let minItemsToDisplay = 2;\n        // Audio/video quality select boxes contain an additional 'auto' mode, which in combination with a single\n        // available quality also does not make sense\n        if ((this.setting instanceof VideoQualitySelectBox && this.setting.hasAutoItem())\n          || this.setting instanceof AudioQualitySelectBox) {\n          minItemsToDisplay = 3;\n        }\n\n        if (this.setting.itemCount() < minItemsToDisplay) {\n          // Hide the setting if no meaningful choice is available\n          this.hide();\n        } else if (this.setting instanceof PlaybackSpeedSelectBox\n          && !uimanager.getConfig().playbackSpeedSelectionEnabled) {\n          // Hide the PlaybackSpeedSelectBox if disabled in config\n          this.hide();\n        } else {\n          this.show();\n        }\n\n        // Visibility might have changed and therefore the active state might have changed so we fire the event\n        // TODO fire only when state has really changed (e.g. check if visibility has really changed)\n        this.onActiveChangedEvent();\n\n        this.getDomElement().attr('aria-haspopup', 'true');\n      };\n\n      this.setting.onItemAdded.subscribe(handleConfigItemChanged);\n      this.setting.onItemRemoved.subscribe(handleConfigItemChanged);\n\n      // Initialize hidden state\n      handleConfigItemChanged();\n    }\n  }\n\n  /**\n   * Checks if this settings panel item is active, i.e. visible and enabled and a user can interact with it.\n   * @returns {boolean} true if the panel is active, else false\n   */\n  isActive(): boolean {\n    return this.isShown();\n  }\n\n  protected onActiveChangedEvent() {\n    this.settingsPanelItemEvents.onActiveChanged.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the 'active' state of this item changes.\n   * @see #isActive\n   * @returns {Event<SettingsPanelItem, NoArgs>}\n   */\n  get onActiveChanged(): Event<SettingsPanelItem, NoArgs> {\n    return this.settingsPanelItemEvents.onActiveChanged.getEvent();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {SettingsPanelItem} from './settingspanelitem';\nimport {UIInstanceManager} from '../uimanager';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { BrowserUtils } from '../browserutils';\n\n/**\n * A panel containing a list of {@link SettingsPanelItem items} that represent labelled settings.\n */\nexport class SettingsPanelPage extends Container<ContainerConfig> {\n\n  private static readonly CLASS_LAST = 'last';\n\n  private settingsPanelPageEvents = {\n    onSettingsStateChanged: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n    onActive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n    onInactive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n  };\n\n  constructor(config: ContainerConfig) {\n    super(config);\n\n    this.config = this.mergeConfig<ContainerConfig>(config, {\n      cssClass: 'ui-settings-panel-page',\n      role: 'menu',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // Fire event when the state of a settings-item has changed\n    let settingsStateChangedHandler = () => {\n      this.onSettingsStateChangedEvent();\n\n      // Attach marker class to last visible item\n      let lastShownItem = null;\n      for (let component of this.getItems()) {\n        component.getDomElement().removeClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\n        if (component.isShown()) {\n          lastShownItem = component;\n        }\n      }\n      if (lastShownItem) {\n        lastShownItem.getDomElement().addClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\n      }\n    };\n    for (let component of this.getItems()) {\n      component.onActiveChanged.subscribe(settingsStateChangedHandler);\n    }\n  }\n\n  hasActiveSettings(): boolean {\n    for (let component of this.getItems()) {\n      if (component.isActive()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getItems(): SettingsPanelItem[] {\n    return <SettingsPanelItem[]>this.config.components.filter(component => component instanceof SettingsPanelItem);\n  }\n\n  onSettingsStateChangedEvent() {\n    this.settingsPanelPageEvents.onSettingsStateChanged.dispatch(this);\n  }\n\n  get onSettingsStateChanged(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onSettingsStateChanged.getEvent();\n  }\n\n  onActiveEvent() {\n    const activeItems = this.getItems().filter((item) => item.isActive());\n\n    this.settingsPanelPageEvents.onActive.dispatch(this);\n    // Disable focus for iOS and iPadOS 13. They open select boxes automatically on focus and we want to avoid that.\n    if (activeItems.length > 0 && !BrowserUtils.isIOS && !(BrowserUtils.isMacIntel && BrowserUtils.isTouchSupported)) {\n      activeItems[0].getDomElement().focusToFirstInput();\n    }\n  }\n\n  get onActive(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onActive.getEvent();\n  }\n\n  onInactiveEvent() {\n    this.settingsPanelPageEvents.onInactive.dispatch(this);\n  }\n\n  get onInactive(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onInactive.getEvent();\n  }\n}\n","import {UIInstanceManager} from '../uimanager';\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport class SettingsPanelPageBackButton extends SettingsPanelPageNavigatorButton {\n\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingspanelpagebackbutton',\n      text: 'back',\n    } as SettingsPanelPageNavigatorConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      this.popPage();\n    });\n  }\n}\n","import {Button, ButtonConfig} from './button';\nimport {SettingsPanel} from './settingspanel';\nimport {SettingsPanelPage} from './settingspanelpage';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\n\n/**\n * Configuration interface for a {@link SettingsPanelPageNavigatorButton}\n */\nexport interface SettingsPanelPageNavigatorConfig extends ButtonConfig {\n  /**\n   * Container `SettingsPanel` where the navigation takes place\n   */\n  container: SettingsPanel;\n  /**\n   * Page where the button should navigate to\n   * If empty it will navigate to the root page (not intended to use as navigate back behavior)\n   */\n  targetPage?: SettingsPanelPage;\n\n  /**\n   * WCAG20 standard: Establishes relationships between objects and their label(s)\n   */\n  ariaLabelledBy?: string;\n}\n\n/**\n * Can be used to navigate between SettingsPanelPages\n *\n * Example:\n *  let settingPanelNavigationButton = new SettingsPanelPageNavigatorButton({\n *    container: settingsPanel,\n *    targetPage: settingsPanelPage,\n *  });\n *\n *  settingsPanelPage.addComponent(settingPanelNavigationButton);\n *\n * Don't forget to add the settingPanelNavigationButton to the settingsPanelPage.\n */\nexport class SettingsPanelPageNavigatorButton extends Button<SettingsPanelPageNavigatorConfig> {\n  private readonly container: SettingsPanel;\n  private readonly targetPage?: SettingsPanelPage;\n\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n    this.config = this.mergeConfig(config, {} as SettingsPanelPageNavigatorConfig, this.config);\n\n    this.container = (this.config as SettingsPanelPageNavigatorConfig).container;\n    this.targetPage = (this.config as SettingsPanelPageNavigatorConfig).targetPage;\n  }\n\n  /**\n   * navigate one level back\n   */\n  popPage() {\n    this.container.popSettingsPanelPage();\n  }\n\n  /**\n   * navigate to the target page\n   */\n  pushTargetPage() {\n    this.container.setActivePage(this.targetPage);\n  }\n}\n","import {UIInstanceManager} from '../uimanager';\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport class SettingsPanelPageOpenButton extends SettingsPanelPageNavigatorButton {\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingspanelpageopenbutton',\n      text: i18n.getLocalizer('open'),\n      role: 'menuitem',\n    } as SettingsPanelPageNavigatorConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.getDomElement().attr('aria-haspopup', 'true');\n    this.getDomElement().attr('aria-owns', this.config.targetPage.getConfig().id);\n\n    this.onClick.subscribe(() => {\n      this.pushTargetPage();\n    });\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { SettingsPanel } from './settingspanel';\nimport { UIInstanceManager } from '../uimanager';\nimport { Component, ComponentConfig } from './component';\nimport { ArrayUtils } from '../arrayutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link SettingsToggleButton}.\n */\nexport interface SettingsToggleButtonConfig extends ToggleButtonConfig {\n  /**\n   * The settings panel whose visibility the button should toggle.\n   */\n  settingsPanel: SettingsPanel;\n\n  /**\n   * Decides if the button should be automatically hidden when the settings panel does not contain any active settings.\n   * Default: true\n   */\n  autoHideWhenNoActiveSettings?: boolean;\n}\n\n/**\n * A button that toggles visibility of a settings panel.\n */\nexport class SettingsToggleButton extends ToggleButton<SettingsToggleButtonConfig> {\n  private visibleSettingsPanels: SettingsPanel[] = [];\n\n  constructor(config: SettingsToggleButtonConfig) {\n    super(config);\n\n    if (!config.settingsPanel) {\n      throw new Error('Required SettingsPanel is missing');\n    }\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClass: 'ui-settingstogglebutton',\n        text: i18n.getLocalizer('settings'),\n        settingsPanel: null,\n        autoHideWhenNoActiveSettings: true,\n        role: 'pop-up button',\n      },\n      <SettingsToggleButtonConfig>this.config,\n    );\n\n    /**\n     * WCAG20 standard defines which popup menu (element id) is owned by the button\n     */\n    this.getDomElement().attr('aria-owns', config.settingsPanel.getActivePage().getConfig().id);\n\n    /**\n     * WCAG20 standard defines that a button has a popup menu bound to it\n     */\n    this.getDomElement().attr('aria-haspopup', 'true');\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let settingsPanel = config.settingsPanel;\n\n    this.onClick.subscribe(() => {\n      if (player.isPlaying()) {\n        player.pause();\n      }\n      // only hide other `SettingsPanel`s if a new one will be opened\n      if (!settingsPanel.isShown()) {\n        // Hide all open SettingsPanels before opening this button's panel\n        // (We need to iterate a copy because hiding them will automatically remove themselves from the array\n        // due to the subscribeOnce above)\n        this.visibleSettingsPanels.slice().forEach((settingsPanel) => settingsPanel.hide());\n      }\n      settingsPanel.toggleHidden();\n    });\n    settingsPanel.onShow.subscribe(() => {\n      // Set toggle status to on when the settings panel shows\n      this.on();\n    });\n    settingsPanel.onHide.subscribe(() => {\n      // Set toggle status to off when the settings panel hides\n      this.off();\n    });\n\n    // Ensure that only one `SettingPanel` is visible at once\n    // Keep track of shown SettingsPanels\n    uimanager.onComponentShow.subscribe((sender: Component<ComponentConfig>) => {\n      if (sender instanceof SettingsPanel) {\n        this.visibleSettingsPanels.push(sender);\n        sender.onHide.subscribeOnce(() => ArrayUtils.remove(this.visibleSettingsPanels, sender));\n      }\n    });\n\n    // Handle automatic hiding of the button if there are no settings for the user to interact with\n    if (config.autoHideWhenNoActiveSettings) {\n      // Setup handler to show/hide button when the settings change\n      let settingsPanelItemsChangedHandler = () => {\n        if (settingsPanel.rootPageHasActiveSettings()) {\n          if (this.isHidden()) {\n            this.show();\n          }\n        } else {\n          if (this.isShown()) {\n            this.hide();\n          }\n        }\n      };\n      // Wire the handler to the event\n      settingsPanel.onSettingsStateChanged.subscribe(settingsPanelItemsChangedHandler);\n      // Call handler for first init at startup\n      settingsPanelItemsChangedHandler();\n    }\n  }\n}\n","import {Component, ComponentConfig} from './component';\n\n/**\n * A dummy component that just reserves some space and does nothing else.\n */\nexport class Spacer extends Component<ComponentConfig> {\n\n  constructor(config: ComponentConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-spacer',\n    }, this.config);\n  }\n\n\n  protected onShowEvent(): void {\n    // disable event firing by overwriting and not calling super\n  }\n\n  protected onHideEvent(): void {\n    // disable event firing by overwriting and not calling super\n  }\n\n  protected onHoverChangedEvent(hovered: boolean): void {\n    // disable event firing by overwriting and not calling super\n  }\n}","import {ListBox} from './listbox';\nimport {UIInstanceManager} from '../uimanager';\nimport {SubtitleSwitchHandler} from '../subtitleutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A element that is similar to a select box where the user can select a subtitle\n */\nexport class SubtitleListBox extends ListBox {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new SubtitleSwitchHandler(player, this, uimanager);\n  }\n}\n","import { Container, ContainerConfig } from './container';\nimport { UIInstanceManager } from '../uimanager';\nimport { Label, LabelConfig } from './label';\nimport { ComponentConfig, Component } from './component';\nimport { ControlBar } from './controlbar';\nimport { EventDispatcher } from '../eventdispatcher';\nimport { DOM, Size } from '../dom';\nimport { PlayerAPI, SubtitleCueEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { VttUtils } from '../vttutils';\nimport { VTTProperties } from 'bitmovin-player/types/subtitles/vtt/API';\n\ninterface SubtitleCropDetectionResult {\n  top: boolean;\n  right: boolean;\n  bottom: boolean;\n  left: boolean;\n}\n\n/**\n * Overlays the player to display subtitles.\n */\nexport class SubtitleOverlay extends Container<ContainerConfig> {\n\n  private subtitleManager: ActiveSubtitleManager;\n  private previewSubtitleActive: boolean;\n  private previewSubtitle: SubtitleLabel;\n\n  private preprocessLabelEventCallback = new EventDispatcher<SubtitleCueEvent, SubtitleLabel>();\n  private subtitleContainerManager: SubtitleRegionContainerManager;\n\n  private static readonly CLASS_CONTROLBAR_VISIBLE = 'controlbar-visible';\n  private static readonly CLASS_CEA_608 = 'cea608';\n\n  // The number of rows in a cea608 grid\n  private static readonly CEA608_NUM_ROWS = 15;\n  // The number of columns in a cea608 grid\n  private static readonly CEA608_NUM_COLUMNS = 32;\n  // The offset in percent for one row (which is also the height of a row)\n  private static readonly CEA608_ROW_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_ROWS;\n  // The offset in percent for one column (which is also the width of a column)\n  private static readonly CEA608_COLUMN_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_COLUMNS;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.previewSubtitleActive = false;\n    this.previewSubtitle = new SubtitleLabel({ text: i18n.getLocalizer('subtitle.example') });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitle-overlay',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let subtitleManager = new ActiveSubtitleManager();\n    this.subtitleManager = subtitleManager;\n\n    this.subtitleContainerManager = new SubtitleRegionContainerManager(this);\n\n    player.on(player.exports.PlayerEvent.CueEnter, (event: SubtitleCueEvent) => {\n      const label = this.generateLabel(event);\n      subtitleManager.cueEnter(event, label);\n\n      this.preprocessLabelEventCallback.dispatch(event, label);\n\n      if (this.previewSubtitleActive) {\n        this.subtitleContainerManager.removeLabel(this.previewSubtitle);\n      }\n\n      this.show();\n\n      this.subtitleContainerManager.addLabel(label, this.getDomElement().size());\n      this.updateComponents();\n\n      if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {\n        this.handleSubtitleCropping(label);\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.CueUpdate, (event: SubtitleCueEvent) => {\n      const label = this.generateLabel(event);\n      const labelToReplace = subtitleManager.cueUpdate(event, label);\n\n      this.preprocessLabelEventCallback.dispatch(event, label);\n\n      if (labelToReplace) {\n        this.subtitleContainerManager.replaceLabel(labelToReplace, label);\n      }\n\n      if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {\n        this.handleSubtitleCropping(label);\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.CueExit, (event: SubtitleCueEvent) => {\n      let labelToRemove = subtitleManager.cueExit(event);\n\n      if (labelToRemove) {\n        this.subtitleContainerManager.removeLabel(labelToRemove);\n        this.updateComponents();\n      }\n\n      if (!subtitleManager.hasCues) {\n        if (!this.previewSubtitleActive) {\n          this.hide();\n        } else {\n          this.subtitleContainerManager.addLabel(this.previewSubtitle);\n          this.updateComponents();\n        }\n      }\n    });\n\n    let subtitleClearHandler = () => {\n      this.hide();\n      this.subtitleContainerManager.clear();\n      subtitleManager.clear();\n      this.removeComponents();\n      this.updateComponents();\n    };\n\n    const clearInactiveCues = () => {\n      const removedActiveCues = subtitleManager.clearInactiveCues(player.getCurrentTime());\n      removedActiveCues.forEach(toRemove => {\n        this.subtitleContainerManager.removeLabel(toRemove.label);\n      });\n    };\n\n    player.on(player.exports.PlayerEvent.AudioChanged, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.Seeked, clearInactiveCues);\n    player.on(player.exports.PlayerEvent.TimeShifted, clearInactiveCues);\n    player.on(player.exports.PlayerEvent.PlaybackFinished, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, subtitleClearHandler);\n\n    uimanager.onComponentShow.subscribe((component: Component<ComponentConfig>) => {\n      if (component instanceof ControlBar) {\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\n      }\n    });\n    uimanager.onComponentHide.subscribe((component: Component<ComponentConfig>) => {\n      if (component instanceof ControlBar) {\n        this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\n      }\n    });\n\n    this.configureCea608Captions(player, uimanager);\n    // Init\n    subtitleClearHandler();\n  }\n\n  detectCroppedSubtitleLabel(\n    labelElement: HTMLElement,\n  ): SubtitleCropDetectionResult {\n    const parent = this.getDomElement().get(0);\n\n    const childRect = labelElement.getBoundingClientRect();\n    const parentRect = parent.getBoundingClientRect();\n\n    return {\n      top: childRect.top < parentRect.top,\n      right: childRect.right > parentRect.right,\n      bottom: childRect.bottom > parentRect.bottom,\n      left: childRect.left < parentRect.left,\n    };\n  }\n\n  handleSubtitleCropping(label: SubtitleLabel) {\n    const labelDomElement = label.getDomElement();\n    const cropDetection = this.detectCroppedSubtitleLabel(\n      labelDomElement.get(0),\n    );\n\n    if (cropDetection.top) {\n      labelDomElement.css('top', '0');\n      labelDomElement.removeCss('bottom');\n    }\n\n    if (cropDetection.right) {\n      labelDomElement.css('right', '0');\n      labelDomElement.removeCss('left');\n    }\n\n    if (cropDetection.bottom) {\n      labelDomElement.css('bottom', '0');\n      labelDomElement.removeCss('top');\n    }\n\n    if (cropDetection.left) {\n      labelDomElement.css('left', '0');\n      labelDomElement.removeCss('right');\n    }\n  }\n\n  generateLabel(event: SubtitleCueEvent): SubtitleLabel {\n    // Sanitize cue data (must be done before the cue ID is generated in subtitleManager.cueEnter / update)\n    if (event.position) {\n      // Sometimes the positions are undefined, we assume them to be zero\n      event.position.row = event.position.row || 0;\n      event.position.column = event.position.column || 0;\n    }\n\n    const label = new SubtitleLabel({\n      // Prefer the HTML subtitle text if set, else try generating a image tag as string from the image attribute,\n      // else use the plain text\n      text: event.html || ActiveSubtitleManager.generateImageTagText(event.image) || event.text,\n      vtt: event.vtt,\n      region: event.region,\n      regionStyle: event.regionStyle,\n    });\n\n    return label;\n  }\n\n  configureCea608Captions(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // The calculated font size\n    let fontSize = 0;\n    // The required letter spacing spread the text characters evenly across the grid\n    let fontLetterSpacing = 0;\n    // Flag telling if a font size calculation is required of if the current values are valid\n    let fontSizeCalculationRequired = true;\n    // Flag telling if the CEA-608 mode is enabled\n    let enabled = false;\n\n    const updateCEA608FontSize = () => {\n      const dummyLabel = new SubtitleLabel({ text: 'X' });\n      dummyLabel.getDomElement().css({\n        // By using a large font size we do not need to use multiple letters and can get still an\n        // accurate measurement even though the returned size is an integer value\n        'font-size': '200px',\n        'line-height': '200px',\n        'visibility': 'hidden',\n      });\n      this.addComponent(dummyLabel);\n      this.updateComponents();\n      this.show();\n\n      const dummyLabelCharWidth = dummyLabel.getDomElement().width();\n      const dummyLabelCharHeight = dummyLabel.getDomElement().height();\n      const fontSizeRatio = dummyLabelCharWidth / dummyLabelCharHeight;\n\n      this.removeComponent(dummyLabel);\n      this.updateComponents();\n      if (!this.subtitleManager.hasCues) {\n        this.hide();\n      }\n\n      // We subtract 1px here to avoid line breaks at the right border of the subtitle overlay that can happen\n      // when texts contain whitespaces. It's probably some kind of pixel rounding issue in the browser's\n      // layouting, but the actual reason could not be determined. Aiming for a target width - 1px would work in\n      // most browsers, but Safari has a \"quantized\" font size rendering with huge steps in between so we need\n      // to subtract some more pixels to avoid line breaks there as well.\n      const subtitleOverlayWidth = this.getDomElement().width() - 10;\n      const subtitleOverlayHeight = this.getDomElement().height();\n\n      // The size ratio of the letter grid\n      const fontGridSizeRatio = (dummyLabelCharWidth * SubtitleOverlay.CEA608_NUM_COLUMNS) /\n        (dummyLabelCharHeight * SubtitleOverlay.CEA608_NUM_ROWS);\n      // The size ratio of the available space for the grid\n      const subtitleOverlaySizeRatio = subtitleOverlayWidth / subtitleOverlayHeight;\n\n      if (subtitleOverlaySizeRatio > fontGridSizeRatio) {\n        // When the available space is wider than the text grid, the font size is simply\n        // determined by the height of the available space.\n        fontSize = subtitleOverlayHeight / SubtitleOverlay.CEA608_NUM_ROWS;\n\n        // Calculate the additional letter spacing required to evenly spread the text across the grid's width\n        const gridSlotWidth = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS;\n        const fontCharWidth = fontSize * fontSizeRatio;\n        fontLetterSpacing = gridSlotWidth - fontCharWidth;\n      } else {\n        // When the available space is not wide enough, texts would vertically overlap if we take\n        // the height as a base for the font size, so we need to limit the height. We do that\n        // by determining the font size by the width of the available space.\n        fontSize = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS / fontSizeRatio;\n        fontLetterSpacing = 0;\n      }\n\n      // Update font-size of all active subtitle labels\n      for (let label of this.getComponents()) {\n        if (label instanceof SubtitleLabel) {\n          label.getDomElement().css({\n            'font-size': `${fontSize}px`,\n            'letter-spacing': `${fontLetterSpacing}px`,\n          });\n        }\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      if (enabled) {\n        updateCEA608FontSize();\n      } else {\n        fontSizeCalculationRequired = true;\n      }\n    });\n\n    this.preprocessLabelEventCallback.subscribe((event: SubtitleCueEvent, label: SubtitleLabel) => {\n      const isCEA608 = event.position != null;\n      if (!isCEA608) {\n        // Skip all non-CEA608 cues\n        return;\n      }\n\n      if (!enabled) {\n        enabled = true;\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\n\n        // We conditionally update the font size by this flag here to avoid updating every time a subtitle\n        // is added into an empty overlay. Because we reset the overlay when all subtitles are gone, this\n        // would trigger an unnecessary update every time, but it's only required under certain conditions,\n        // e.g. after the player size has changed.\n        if (fontSizeCalculationRequired) {\n          updateCEA608FontSize();\n          fontSizeCalculationRequired = false;\n        }\n      }\n\n      label.getDomElement().css({\n        'left': `${event.position.column * SubtitleOverlay.CEA608_COLUMN_OFFSET}%`,\n        'top': `${event.position.row * SubtitleOverlay.CEA608_ROW_OFFSET}%`,\n        'font-size': `${fontSize}px`,\n        'letter-spacing': `${fontLetterSpacing}px`,\n      });\n    });\n\n    const reset = () => {\n      this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\n      enabled = false;\n    };\n\n    player.on(player.exports.PlayerEvent.CueExit, () => {\n      if (!this.subtitleManager.hasCues) {\n        // Disable CEA-608 mode when all subtitles are gone (to allow correct formatting and\n        // display of other types of subtitles, e.g. the formatting preview subtitle)\n        reset();\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.SourceUnloaded, reset);\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, reset);\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, reset);\n  }\n\n  enablePreviewSubtitleLabel(): void {\n    if (!this.subtitleManager.hasCues) {\n      this.previewSubtitleActive = true;\n      this.subtitleContainerManager.addLabel(this.previewSubtitle);\n      this.updateComponents();\n      this.show();\n    }\n  }\n\n  removePreviewSubtitleLabel(): void {\n    if (this.previewSubtitleActive) {\n      this.previewSubtitleActive = false;\n      this.subtitleContainerManager.removeLabel(this.previewSubtitle);\n      this.updateComponents();\n    }\n  }\n}\n\ninterface ActiveSubtitleCue {\n  event: SubtitleCueEvent;\n  label: SubtitleLabel;\n}\n\ninterface ActiveSubtitleCueMap {\n  [id: string]: ActiveSubtitleCue[];\n}\n\ninterface SubtitleLabelConfig extends LabelConfig {\n  vtt?: VTTProperties;\n  region?: string;\n  regionStyle?: string;\n}\n\nexport class SubtitleLabel extends Label<SubtitleLabelConfig> {\n\n  constructor(config: SubtitleLabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitle-label',\n    }, this.config);\n  }\n\n  get vtt(): VTTProperties {\n    return this.config.vtt;\n  }\n\n  get region(): string {\n    return this.config.region;\n  }\n\n  get regionStyle(): string {\n    return this.config.regionStyle;\n  }\n}\n\nclass ActiveSubtitleManager {\n\n  private activeSubtitleCueMap: ActiveSubtitleCueMap;\n  private activeSubtitleCueCount: number;\n\n  constructor() {\n    this.activeSubtitleCueMap = {};\n    this.activeSubtitleCueCount = 0;\n  }\n\n  /**\n   * Calculates a unique ID for a subtitle cue, which is needed to associate an CueEnter with its CueExit\n   * event so we can remove the correct subtitle in CueExit when multiple subtitles are active at the same time.\n   * The start time plus the text should make a unique identifier, and in the only case where a collision\n   * can happen, two similar texts will be displayed at a similar time and a similar position (or without position).\n   * The start time should always be known, because it is required to schedule the CueEnter event. The end time\n   * must not necessarily be known and therefore cannot be used for the ID.\n   * @param event\n   * @return {string}\n   */\n  private static calculateId(event: SubtitleCueEvent): string {\n    let id = event.start + '-' + event.text;\n\n    if (event.position) {\n      id += '-' + event.position.row + '-' + event.position.column;\n    }\n\n    return id;\n  }\n\n  cueEnter(event: SubtitleCueEvent, label: SubtitleLabel): void {\n    this.addCueToMap(event, label);\n  }\n\n  cueUpdate(event: SubtitleCueEvent, label: SubtitleLabel): SubtitleLabel | undefined {\n    const labelToReplace = this.popCueFromMap(event);\n\n    if (labelToReplace) {\n      this.addCueToMap(event, label);\n      return labelToReplace;\n    }\n\n    return undefined;\n  }\n\n  private addCueToMap(event: SubtitleCueEvent, label: SubtitleLabel): void {\n    let id = ActiveSubtitleManager.calculateId(event);\n\n    // Create array for id if it does not exist\n    this.activeSubtitleCueMap[id] = this.activeSubtitleCueMap[id] || [];\n\n    // Add cue\n    this.activeSubtitleCueMap[id].push({ event, label });\n    this.activeSubtitleCueCount++;\n  }\n\n  private popCueFromMap(event: SubtitleCueEvent): SubtitleLabel | undefined {\n    let id = ActiveSubtitleManager.calculateId(event);\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\n\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\n      // Remove cue\n      /* We apply the FIFO approach here and remove the oldest cue from the associated id. When there are multiple cues\n       * with the same id, there is no way to know which one of the cues is to be deleted, so we just hope that FIFO\n       * works fine. Theoretically it can happen that two cues with colliding ids are removed at different times, in\n       * the wrong order. This rare case has yet to be observed. If it ever gets an issue, we can take the unstable\n       * cue end time (which can change between CueEnter and CueExit IN CueUpdate) and use it as an\n       * additional hint to try and remove the correct one of the colliding cues.\n       */\n      let activeSubtitleCue = activeSubtitleCues.shift();\n      this.activeSubtitleCueCount--;\n\n      return activeSubtitleCue.label;\n    }\n  }\n\n  /**\n   * Removes all active cues which don't enclose the given time\n   * @param time the time for which subtitles should remain\n   */\n  public clearInactiveCues(time: number): ActiveSubtitleCue[] {\n    const removedCues: ActiveSubtitleCue[] = [];\n    Object.keys(this.activeSubtitleCueMap).forEach(key => {\n      const activeCues = this.activeSubtitleCueMap[key];\n      activeCues.forEach(cue => {\n        if (time < cue.event.start || time > cue.event.end) {\n          this.popCueFromMap(cue.event);\n          removedCues.push(cue);\n        }\n      });\n    });\n    return removedCues;\n  }\n\n  static generateImageTagText(imageData: string): string | undefined {\n    if (!imageData) {\n      return;\n    }\n\n    const imgTag = new DOM('img', {\n      src: imageData,\n    });\n    imgTag.css('width', '100%');\n    return imgTag.get(0).outerHTML; // return the html as string\n  }\n\n  /**\n   * Returns the label associated with an already added cue.\n   * @param event\n   * @return {SubtitleLabel}\n   */\n  getCues(event: SubtitleCueEvent): SubtitleLabel[] | undefined {\n    let id = ActiveSubtitleManager.calculateId(event);\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\n      return activeSubtitleCues.map((cue) => cue.label);\n    }\n  }\n\n  /**\n   * Removes the subtitle cue from the manager and returns the label that should be removed from the subtitle overlay,\n   * or null if there is no associated label existing (e.g. because all labels have been {@link #clear cleared}.\n   * @param event\n   * @return {SubtitleLabel|null}\n   */\n  cueExit(event: SubtitleCueEvent): SubtitleLabel {\n    return this.popCueFromMap(event);\n  }\n\n  /**\n   * Returns the number of active subtitle cues.\n   * @return {number}\n   */\n  get cueCount(): number {\n    // We explicitly count the cues to save an Array.reduce on every cueCount call (which can happen frequently)\n    return this.activeSubtitleCueCount;\n  }\n\n  /**\n   * Returns true if there are active subtitle cues, else false.\n   * @return {boolean}\n   */\n  get hasCues(): boolean {\n    return this.cueCount > 0;\n  }\n\n  /**\n   * Removes all subtitle cues from the manager.\n   */\n  clear(): void {\n    this.activeSubtitleCueMap = {};\n    this.activeSubtitleCueCount = 0;\n  }\n}\n\nexport class SubtitleRegionContainerManager {\n  private subtitleRegionContainers: { [regionName: string]: SubtitleRegionContainer } = {};\n\n  /**\n   * @param subtitleOverlay Reference to the subtitle overlay for adding and removing the containers.\n   */\n  constructor(private subtitleOverlay: SubtitleOverlay) {\n    this.subtitleOverlay = subtitleOverlay;\n  }\n\n  private getRegion(label: SubtitleLabel): { regionContainerId: string, regionName: string } {\n    if (label.vtt) {\n      return {\n        regionContainerId: label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt',\n        regionName: 'vtt',\n      };\n    }\n\n    return {\n      regionContainerId: label.region || 'default',\n      regionName: label.region || 'default',\n    };\n  }\n\n  /**\n   * Creates and wraps a subtitle label into a container div based on the subtitle region.\n   * If the subtitle has positioning information it is added to the container.\n   * @param label The subtitle label to wrap\n   */\n  addLabel(label: SubtitleLabel, overlaySize?: Size): void {\n    const { regionContainerId, regionName } = this.getRegion(label);\n    const cssClasses = [`subtitle-position-${regionName}`];\n\n    if (label.vtt && label.vtt.region) {\n      cssClasses.push(`vtt-region-${label.vtt.region.id}`);\n    }\n\n    if (!this.subtitleRegionContainers[regionContainerId]) {\n      const regionContainer = new SubtitleRegionContainer({\n        cssClasses,\n      });\n\n      this.subtitleRegionContainers[regionContainerId] = regionContainer;\n\n      if (label.regionStyle) {\n        regionContainer.getDomElement().attr('style', label.regionStyle);\n      } else if (label.vtt && !label.vtt.region) {\n        /**\n         * If there is no region present to wrap the Cue Box, the Cue box becomes the\n         * region itself. Therefore the positioning values have to come from the box.\n         */\n        regionContainer.getDomElement().css('position', 'static');\n      } else {\n        // getDomElement needs to be called at least once to ensure the component exists\n        regionContainer.getDomElement();\n      }\n\n      for (const regionContainerId in this.subtitleRegionContainers) {\n        this.subtitleOverlay.addComponent(this.subtitleRegionContainers[regionContainerId]);\n      }\n    }\n\n    this.subtitleRegionContainers[regionContainerId].addLabel(label, overlaySize);\n  }\n\n  replaceLabel(previousLabel: SubtitleLabel, newLabel: SubtitleLabel): void {\n    const { regionContainerId } = this.getRegion(previousLabel);\n\n    this.subtitleRegionContainers[regionContainerId].removeLabel(previousLabel);\n    this.subtitleRegionContainers[regionContainerId].addLabel(newLabel);\n  }\n\n  /**\n   * Removes a subtitle label from a container.\n   */\n  removeLabel(label: SubtitleLabel): void {\n    let regionContainerId;\n\n    if (label.vtt) {\n      regionContainerId = label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt';\n    } else {\n      regionContainerId = label.region || 'default';\n    }\n\n    this.subtitleRegionContainers[regionContainerId].removeLabel(label);\n\n    // Remove container if no more labels are displayed\n    if (this.subtitleRegionContainers[regionContainerId].isEmpty()) {\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionContainerId]);\n      delete this.subtitleRegionContainers[regionContainerId];\n    }\n  }\n\n  /**\n   * Removes all subtitle containers.\n   */\n  clear(): void {\n    for (const regionName in this.subtitleRegionContainers) {\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionName]);\n    }\n\n    this.subtitleRegionContainers = {};\n  }\n}\n\nexport class SubtitleRegionContainer extends Container<ContainerConfig> {\n  private labelCount = 0;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'subtitle-region-container',\n    }, this.config);\n  }\n\n  addLabel(labelToAdd: SubtitleLabel, overlaySize?: Size) {\n    this.labelCount++;\n\n    if (labelToAdd.vtt) {\n      if (labelToAdd.vtt.region && overlaySize) {\n        VttUtils.setVttRegionStyles(this, labelToAdd.vtt.region, overlaySize);\n      }\n\n      VttUtils.setVttCueBoxStyles(labelToAdd, overlaySize);\n    }\n\n    this.addComponent(labelToAdd);\n    this.updateComponents();\n  }\n\n  removeLabel(labelToRemove: SubtitleLabel): void {\n    this.labelCount--;\n    this.removeComponent(labelToRemove);\n    this.updateComponents();\n  }\n\n  public isEmpty(): boolean {\n    return this.labelCount === 0;\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport {SubtitleSwitchHandler} from '../subtitleutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between available subtitle and caption tracks.\n */\nexport class SubtitleSelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitleselectbox'],\n      ariaLabel: i18n.getLocalizer('subtitle.select'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new SubtitleSwitchHandler(player, this, uimanager);\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background colors.\n */\nexport class BackgroundColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsbackgroundcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.backgroundColor.isSet() && this.settingsManager.backgroundOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'bgcolor-' + this.settingsManager.backgroundColor.value + this.settingsManager.backgroundOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.backgroundColor.value = key;\n    });\n\n    this.settingsManager.backgroundColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.backgroundColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.backgroundOpacity.clear();\n      } else if (!this.settingsManager.backgroundOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.backgroundOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.backgroundOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.backgroundColor.isSet()) {\n      this.selectItem(this.settingsManager.backgroundColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background opacity.\n */\nexport class BackgroundOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsbackgroundopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.backgroundOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.backgroundOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.backgroundColor.clear();\n      } else if (!this.settingsManager.backgroundColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.backgroundColor.value = 'black';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.backgroundOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.backgroundOpacity.isSet()) {\n      this.selectItem(this.settingsManager.backgroundOpacity.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different character edge.\n */\nexport class CharacterEdgeSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingscharacteredgeselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('raised', i18n.getLocalizer('settings.subtitles.characterEdge.raised'));\n    this.addItem('depressed', i18n.getLocalizer('settings.subtitles.characterEdge.depressed'));\n    this.addItem('uniform', i18n.getLocalizer('settings.subtitles.characterEdge.uniform'));\n    this.addItem('dropshadowed', i18n.getLocalizer('settings.subtitles.characterEdge.dropshadowed'));\n\n    this.settingsManager.characterEdge.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('characteredge-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.characterEdge.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.characterEdge.isSet()) {\n      this.selectItem(this.settingsManager.characterEdge.value);\n    }\n  }\n}\n","import {\n  SubtitleCloseCaptionsListBox,\n  CloseCaptionsListBoxConfig,\n} from './subtitleclosecaptionslistbox';\nimport { UIInstanceManager } from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\nimport { SubtitleClosedCaptionsManager } from './subtitleclosedcaptionsmanager';\n// import { SubtitleSwitchHandler } from '../../subtitleutils';\nimport { SubtitleSwitchHandler } from '../../subtitleutilsbritbox';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class CloseCaptionsListBox extends SubtitleCloseCaptionsListBox {\n  protected settingsManager: SubtitleClosedCaptionsManager;\n\n  constructor(config: CloseCaptionsListBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClasses: ['ui-subtitlesettingsfontsizeselectbox right'],\n      },\n      this.config,\n    );\n\n    this.settingsManager = config.settingsManager;\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('false', 'Off');\n    this.addItem('true', 'On');\n\n    this.settingsManager.closedCaptions.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      const component = this.getItemForKey(key);\n      this.settingsManager.closedCaptions.value = (component?.label as string) || 'Off';\n    });\n\n    // Load initial value\n    // if (this.settingsManager.closedCaptions.isSet()) {\n    //   this.selectItem(this.settingsManager.closedCaptions.value);\n    // } else {\n    //   this.selectItem('false');\n    // }\n\n    new SubtitleSwitchHandler(player, this, uimanager, this.settingsManager);\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.fontColor.isSet() && this.settingsManager.fontOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'fontcolor-' + this.settingsManager.fontColor.value + this.settingsManager.fontOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontColor.value = key;\n    });\n\n    this.settingsManager.fontColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.fontColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.fontOpacity.clear();\n      } else if (!this.settingsManager.fontOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.fontOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.fontOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontColor.isSet()) {\n      this.selectItem(this.settingsManager.fontColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font family.\n */\nexport class FontFamilySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontfamilyselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('monospacedserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedserif'));\n    this.addItem('proportionalserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));\n    this.addItem('monospacedsansserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedsansserif'));\n    this.addItem('proportionalsansserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalsansserif'));\n    this.addItem('casual', i18n.getLocalizer('settings.subtitles.font.family.casual'));\n    this.addItem('cursive', i18n.getLocalizer('settings.subtitles.font.family.cursive'));\n    this.addItem('smallcapital', i18n.getLocalizer('settings.subtitles.font.family.smallcapital'));\n\n    this.settingsManager.fontFamily.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontfamily-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontFamily.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontFamily.isSet()) {\n      this.selectItem(this.settingsManager.fontFamily.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.fontOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.fontColor.clear();\n      } else if (!this.settingsManager.fontColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.fontColor.value = 'white';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.fontOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontOpacity.isSet()) {\n      this.selectItem(this.settingsManager.fontOpacity.value);\n    }\n  }\n}\n","import { SubtitleSettingListBox, SubtitleSettingListBoxConfig } from './subtitlesettinglistbox';\nimport { UIInstanceManager } from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontSizeListBox extends SubtitleSettingListBox {\n  constructor(config: SubtitleSettingListBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClasses: ['ui-subtitlesettingsfontsizeselectbox'],\n      },\n      this.config,\n    );\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem('100', 'Aa');\n    this.addItem('150', 'Aa');\n    this.addItem('200', 'Aa');\n\n    this.settingsManager.fontSize.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontsize-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontSize.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontSize.isSet()) {\n      this.selectItem(this.settingsManager.fontSize.value);\n    } else {\n      this.selectItem('100');\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontSizeSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontsizeselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('150', i18n.getLocalizer('percent', { value: 150 }));\n    this.addItem('200', i18n.getLocalizer('percent', { value: 200 }));\n    this.addItem('300', i18n.getLocalizer('percent', { value: 300 }));\n    this.addItem('400', i18n.getLocalizer('percent', { value: 400 }));\n\n    this.settingsManager.fontSize.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontsize-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontSize.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontSize.isSet()) {\n      this.selectItem(this.settingsManager.fontSize.value);\n    }\n  }\n}\n","import { BritboxListBox } from '../britboxlistbox';\nimport { SubtitleOverlay } from '../subtitleoverlay';\nimport { ListSelectorConfig } from '../listselector';\nimport { SubtitleClosedCaptionsManager } from './subtitleclosedcaptionsmanager';\n\nexport interface CloseCaptionsListBoxConfig extends ListSelectorConfig {\n  overlay: SubtitleOverlay;\n  settingsManager: SubtitleClosedCaptionsManager;\n}\n\n/**\n * Base class for all subtitles settings list box\n **/\nexport class SubtitleCloseCaptionsListBox extends BritboxListBox {\n  protected settingsManager: SubtitleClosedCaptionsManager;\n  protected overlay: SubtitleOverlay;\n  private currentCssClass: string;\n\n  constructor(config: CloseCaptionsListBoxConfig) {\n    super(config);\n\n    this.settingsManager = config.settingsManager;\n    this.overlay = config.overlay;\n  }\n\n  /**\n   * Removes a previously set class and adds the passed in class.\n   * @param cssClass The new class to replace the previous class with or null to just remove the previous class\n   */\n  protected toggleOverlayClass(cssClass: string): void {\n    // Remove previous class if existing\n    if (this.currentCssClass) {\n      this.overlay.getDomElement().removeClass(this.currentCssClass);\n      this.currentCssClass = null;\n    }\n\n    // Add new class if specified. If the new class is null, we don't add anything.\n    if (cssClass) {\n      this.currentCssClass = this.prefixCss(cssClass);\n      this.overlay.getDomElement().addClass(this.currentCssClass);\n    }\n  }\n}\n","import { StorageUtils } from '../../storageutils';\nimport { Component, ComponentConfig } from '../component';\nimport { EventDispatcher, Event } from '../../eventdispatcher';\n\ninterface SubtitleClosedCaptions {\n  fontColor?: string;\n  fontOpacity?: string;\n  fontFamily?: string;\n  fontSize?: string;\n  characterEdge?: string;\n  backgroundColor?: string;\n  backgroundOpacity?: string;\n  windowColor?: string;\n  windowOpacity?: string;\n}\n\ninterface Properties {\n  [name: string]: SubtitleClosedCaptionsProperty<string>;\n}\n\nexport class SubtitleClosedCaptionsManager {\n  private userSettings: SubtitleClosedCaptions;\n  private localStorageKey: string;\n\n  private _properties: Properties = {\n    closedCaptions: new SubtitleClosedCaptionsProperty<string>(this),\n  };\n\n  constructor() {\n    this.userSettings = {};\n    this.localStorageKey = DummyComponent.instance().prefixCss('subtitleclosedcaptions');\n\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].onChanged.subscribe((sender, property) => {\n        if (property.isSet()) {\n          (<any>this.userSettings)[propertyName] = property.value;\n        } else {\n          // Delete the property from the settings object if unset to avoid serialization of null values\n          delete (<any>this.userSettings)[propertyName];\n        }\n\n        // Save the settings object when a property has changed\n        this.save();\n      });\n    }\n\n    this.load();\n  }\n\n  public reset(): void {\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].clear();\n    }\n  }\n\n  public get closedCaptions(): SubtitleClosedCaptionsProperty<string> {\n    return this._properties.closedCaptions;\n  }\n\n  /**\n   * Saves the settings to local storage.\n   */\n  public save(): void {\n    StorageUtils.setObject(this.localStorageKey, this.userSettings);\n  }\n\n  /**\n   * Loads the settings from local storage\n   */\n  public load(): void {\n    this.userSettings = StorageUtils.getObject<SubtitleClosedCaptions>(this.localStorageKey) || {};\n    // Apply the loaded settings\n    for (let property in this.userSettings) {\n      this._properties[property].value = (<any>this.userSettings)[property];\n    }\n  }\n}\n\n/**\n * A dummy component whose sole purpose is to expose the {@link #prefixCss} method to the\n * {@link SubtitleClosedCaptionsManager}.\n */\nclass DummyComponent extends Component<ComponentConfig> {\n  private static _instance: DummyComponent;\n\n  public static instance(): DummyComponent {\n    if (!DummyComponent._instance) {\n      DummyComponent._instance = new DummyComponent();\n    }\n\n    return DummyComponent._instance;\n  }\n\n  public prefixCss(cssClassOrId: string): string {\n    return super.prefixCss(cssClassOrId);\n  }\n}\n\nexport class SubtitleClosedCaptionsProperty<T> {\n  private _manager: SubtitleClosedCaptionsManager;\n  private _onChanged: EventDispatcher<\n    SubtitleClosedCaptionsManager,\n    SubtitleClosedCaptionsProperty<T>\n  >;\n  private _value: T;\n\n  constructor(manager: SubtitleClosedCaptionsManager) {\n    this._manager = manager;\n    this._onChanged = new EventDispatcher<\n      SubtitleClosedCaptionsManager,\n      SubtitleClosedCaptionsProperty<T>\n    >();\n  }\n\n  public isSet(): boolean {\n    return this._value != null;\n  }\n\n  public clear(): void {\n    this._value = null;\n    this.onChangedEvent(null);\n  }\n\n  public get value(): T {\n    return this._value;\n  }\n\n  public set value(value: T) {\n    if (typeof value === 'string' && value === 'null') {\n      value = null;\n    }\n\n    this._value = value;\n    this.onChangedEvent(value);\n  }\n\n  protected onChangedEvent(value: T) {\n    this._onChanged.dispatch(this._manager, this);\n  }\n\n  public get onChanged(): Event<SubtitleClosedCaptionsManager, SubtitleClosedCaptionsProperty<T>> {\n    return this._onChanged.getEvent();\n  }\n}\n","import { BritboxListBox } from './../britboxlistbox';\nimport { SubtitleOverlay } from '../subtitleoverlay';\nimport { ListSelectorConfig } from '../listselector';\nimport { SubtitleSettingsManager } from './subtitlesettingsmanager';\n\nexport interface SubtitleSettingListBoxConfig extends ListSelectorConfig {\n  overlay: SubtitleOverlay;\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * Base class for all subtitles settings list box\n **/\nexport class SubtitleSettingListBox extends BritboxListBox {\n  protected settingsManager: SubtitleSettingsManager;\n  protected overlay: SubtitleOverlay;\n  private currentCssClass: string;\n\n  constructor(config: SubtitleSettingListBoxConfig) {\n    super(config);\n\n    this.settingsManager = config.settingsManager;\n    this.overlay = config.overlay;\n  }\n\n  /**\n   * Removes a previously set class and adds the passed in class.\n   * @param cssClass The new class to replace the previous class with or null to just remove the previous class\n   */\n  protected toggleOverlayClass(cssClass: string): void {\n    // Remove previous class if existing\n    if (this.currentCssClass) {\n      this.overlay.getDomElement().removeClass(this.currentCssClass);\n      this.currentCssClass = null;\n    }\n\n    // Add new class if specified. If the new class is null, we don't add anything.\n    if (cssClass) {\n      this.currentCssClass = this.prefixCss(cssClass);\n      this.overlay.getDomElement().addClass(this.currentCssClass);\n    }\n  }\n}\n","import {SubtitleOverlay} from '../subtitleoverlay';\nimport {ListSelectorConfig} from '../listselector';\nimport {SelectBox} from '../selectbox';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\n\nexport interface SubtitleSettingSelectBoxConfig extends ListSelectorConfig {\n  overlay: SubtitleOverlay;\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * Base class for all subtitles settings select box\n **/\nexport class SubtitleSettingSelectBox extends SelectBox {\n\n  protected settingsManager: SubtitleSettingsManager;\n  protected overlay: SubtitleOverlay;\n  private currentCssClass: string;\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.settingsManager = config.settingsManager;\n    this.overlay = config.overlay;\n  }\n\n  /**\n   * Removes a previously set class and adds the passed in class.\n   * @param cssClass The new class to replace the previous class with or null to just remove the previous class\n   */\n  protected toggleOverlayClass(cssClass: string): void {\n    // Remove previous class if existing\n    if (this.currentCssClass) {\n      this.overlay.getDomElement().removeClass(this.currentCssClass);\n      this.currentCssClass = null;\n    }\n\n    // Add new class if specified. If the new class is null, we don't add anything.\n    if (cssClass) {\n      this.currentCssClass = this.prefixCss(cssClass);\n      this.overlay.getDomElement().addClass(this.currentCssClass);\n    }\n  }\n}\n","import {LabelConfig} from '../label';\nimport {Container, ContainerConfig} from '../container';\nimport {DOM} from '../../dom';\nimport {SettingsPanelPageOpenButton} from '../settingspanelpageopenbutton';\nimport { LocalizableText, i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsLabelConfig extends LabelConfig {\n  opener: SettingsPanelPageOpenButton;\n}\n\nexport class SubtitleSettingsLabel extends Container<ContainerConfig> {\n\n  private opener: SettingsPanelPageOpenButton;\n\n  private text: LocalizableText;\n\n  private for: string;\n\n  constructor(config: SubtitleSettingsLabelConfig) {\n    super(config);\n\n    this.opener = config.opener;\n    this.text = config.text;\n    this.for = config.for;\n\n    this.config = this.mergeConfig(<ContainerConfig>config, {\n      cssClass: 'ui-label',\n      components: [\n        this.opener,\n      ],\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let labelElement = new DOM('label', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'for': this.for,\n    }).append(\n      new DOM('span', {}).html(i18n.performLocalization(this.text)),\n      this.opener.getDomElement(),\n    );\n\n    return labelElement;\n  }\n}\n","import { StorageUtils } from '../../storageutils';\nimport { Component, ComponentConfig } from '../component';\nimport { EventDispatcher, Event } from '../../eventdispatcher';\n\ninterface SubtitleSettings {\n  fontColor?: string;\n  fontOpacity?: string;\n  fontFamily?: string;\n  fontSize?: string;\n  characterEdge?: string;\n  backgroundColor?: string;\n  backgroundOpacity?: string;\n  windowColor?: string;\n  windowOpacity?: string;\n}\n\ninterface Properties {\n  [name: string]: SubtitleSettingsProperty<string>;\n}\n\nexport class SubtitleSettingsManager {\n  private userSettings: SubtitleSettings;\n  private localStorageKey: string;\n\n  private _properties: Properties = {\n    fontColor: new SubtitleSettingsProperty<string>(this),\n    fontOpacity: new SubtitleSettingsProperty<string>(this),\n    fontFamily: new SubtitleSettingsProperty<string>(this),\n    fontSize: new SubtitleSettingsProperty<string>(this),\n    characterEdge: new SubtitleSettingsProperty<string>(this),\n    backgroundColor: new SubtitleSettingsProperty<string>(this),\n    backgroundOpacity: new SubtitleSettingsProperty<string>(this),\n    windowColor: new SubtitleSettingsProperty<string>(this),\n    windowOpacity: new SubtitleSettingsProperty<string>(this),\n    closedCaptions: new SubtitleSettingsProperty<string>(this),\n  };\n\n  constructor() {\n    this.userSettings = {};\n    this.localStorageKey = DummyComponent.instance().prefixCss('subtitlesettings');\n\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].onChanged.subscribe((sender, property) => {\n        if (property.isSet()) {\n          (<any>this.userSettings)[propertyName] = property.value;\n        } else {\n          // Delete the property from the settings object if unset to avoid serialization of null values\n          delete (<any>this.userSettings)[propertyName];\n        }\n\n        // Save the settings object when a property has changed\n        this.save();\n      });\n    }\n\n    this.load();\n  }\n\n  public reset(): void {\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].clear();\n    }\n  }\n\n  public get fontColor(): SubtitleSettingsProperty<string> {\n    return this._properties.fontColor;\n  }\n\n  public get fontOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.fontOpacity;\n  }\n\n  public get fontFamily(): SubtitleSettingsProperty<string> {\n    return this._properties.fontFamily;\n  }\n\n  public get fontSize(): SubtitleSettingsProperty<string> {\n    return this._properties.fontSize;\n  }\n\n  public get characterEdge(): SubtitleSettingsProperty<string> {\n    return this._properties.characterEdge;\n  }\n\n  public get backgroundColor(): SubtitleSettingsProperty<string> {\n    return this._properties.backgroundColor;\n  }\n\n  public get backgroundOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.backgroundOpacity;\n  }\n\n  public get windowColor(): SubtitleSettingsProperty<string> {\n    return this._properties.windowColor;\n  }\n\n  public get windowOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.windowOpacity;\n  }\n\n  public get closedCaptions(): SubtitleSettingsProperty<string> {\n    return this._properties.closedCaptions;\n  }\n\n  /**\n   * Saves the settings to local storage.\n   */\n  public save(): void {\n    StorageUtils.setObject(this.localStorageKey, this.userSettings);\n  }\n\n  /**\n   * Loads the settings from local storage\n   */\n  public load(): void {\n    this.userSettings = StorageUtils.getObject<SubtitleSettings>(this.localStorageKey) || {};\n\n    // Apply the loaded settings\n    for (let property in this.userSettings) {\n      this._properties[property].value = (<any>this.userSettings)[property];\n    }\n  }\n}\n\n/**\n * A dummy component whose sole purpose is to expose the {@link #prefixCss} method to the\n * {@link SubtitleSettingsManager}.\n */\nclass DummyComponent extends Component<ComponentConfig> {\n  private static _instance: DummyComponent;\n\n  public static instance(): DummyComponent {\n    if (!DummyComponent._instance) {\n      DummyComponent._instance = new DummyComponent();\n    }\n\n    return DummyComponent._instance;\n  }\n\n  public prefixCss(cssClassOrId: string): string {\n    return super.prefixCss(cssClassOrId);\n  }\n}\n\nexport class SubtitleSettingsProperty<T> {\n  private _manager: SubtitleSettingsManager;\n  private _onChanged: EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>;\n  private _value: T;\n\n  constructor(manager: SubtitleSettingsManager) {\n    this._manager = manager;\n    this._onChanged = new EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>();\n  }\n\n  public isSet(): boolean {\n    return this._value != null;\n  }\n\n  public clear(): void {\n    this._value = null;\n    this.onChangedEvent(null);\n  }\n\n  public get value(): T {\n    return this._value;\n  }\n\n  public set value(value: T) {\n    if (typeof value === 'string' && value === 'null') {\n      value = null;\n    }\n\n    this._value = value;\n    this.onChangedEvent(value);\n  }\n\n  protected onChangedEvent(value: T) {\n    this._onChanged.dispatch(this._manager, this);\n  }\n\n  public get onChanged(): Event<SubtitleSettingsManager, SubtitleSettingsProperty<T>> {\n    return this._onChanged.getEvent();\n  }\n}\n","import {SettingsPanelPage} from '../settingspanelpage';\nimport {SettingsPanel} from '../settingspanel';\nimport {SubtitleOverlay} from '../subtitleoverlay';\nimport {ContainerConfig} from '../container';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\nimport {Component, ComponentConfig} from '../component';\nimport {FontSizeSelectBox} from './fontsizeselectbox';\nimport {FontFamilySelectBox} from './fontfamilyselectbox';\nimport {FontColorSelectBox} from './fontcolorselectbox';\nimport {FontOpacitySelectBox} from './fontopacityselectbox';\nimport {CharacterEdgeSelectBox} from './characteredgeselectbox';\nimport {BackgroundColorSelectBox} from './backgroundcolorselectbox';\nimport {BackgroundOpacitySelectBox} from './backgroundopacityselectbox';\nimport {WindowColorSelectBox} from './windowcolorselectbox';\nimport {WindowOpacitySelectBox} from './windowopacityselectbox';\nimport {SubtitleSettingsResetButton} from './subtitlesettingsresetbutton';\nimport {UIInstanceManager} from '../../uimanager';\nimport {SettingsPanelPageBackButton} from '../settingspanelpagebackbutton';\nimport {SettingsPanelItem} from '../settingspanelitem';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsPanelPageConfig extends ContainerConfig {\n  settingsPanel: SettingsPanel;\n  overlay: SubtitleOverlay;\n}\n\nexport class SubtitleSettingsPanelPage extends SettingsPanelPage {\n\n  private readonly overlay: SubtitleOverlay;\n  private readonly settingsPanel: SettingsPanel;\n\n  constructor(config: SubtitleSettingsPanelPageConfig) {\n    super(config);\n\n    this.overlay = config.overlay;\n    this.settingsPanel = config.settingsPanel;\n\n    let manager = new SubtitleSettingsManager();\n\n    this.config = this.mergeConfig(config, {\n      components: <Component<ComponentConfig>[]>[\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.size'), new FontSizeSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.family'), new FontFamilySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.color'), new FontColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.opacity'), new FontOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.characterEdge'), new CharacterEdgeSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.color'), new BackgroundColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.opacity'), new BackgroundOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.color'), new WindowColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.opacity'), new WindowOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(new SettingsPanelPageBackButton({\n          container: this.settingsPanel,\n          text: i18n.getLocalizer('back'),\n        }), new SubtitleSettingsResetButton({\n          settingsManager: manager,\n        }), {\n          role: 'menubar',\n        }),\n      ],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onActive.subscribe(() => {\n      this.overlay.enablePreviewSubtitleLabel();\n    });\n\n    this.onInactive.subscribe(() => {\n      this.overlay.removePreviewSubtitleLabel();\n    });\n  }\n}","import {UIInstanceManager} from '../../uimanager';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\nimport {Button, ButtonConfig} from '../button';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsResetButtonConfig extends ButtonConfig {\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * A button that resets all subtitle settings to their defaults.\n */\nexport class SubtitleSettingsResetButton extends Button<ButtonConfig> {\n\n  constructor(config: SubtitleSettingsResetButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitlesettingsresetbutton',\n      text: i18n.getLocalizer('reset'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      (<SubtitleSettingsResetButtonConfig>this.config).settingsManager.reset();\n    });\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background colors.\n */\nexport class WindowColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingswindowcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.windowColor.isSet() && this.settingsManager.windowOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'windowcolor-' + this.settingsManager.windowColor.value + this.settingsManager.windowOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.windowColor.value = key;\n    });\n\n    this.settingsManager.windowColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.windowColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.windowOpacity.clear();\n      } else if (!this.settingsManager.windowOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.windowOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.windowOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.windowColor.isSet()) {\n      this.selectItem(this.settingsManager.windowColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background opacity.\n */\nexport class WindowOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingswindowopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.windowOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.windowOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.windowColor.clear();\n      } else if (!this.settingsManager.windowColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.windowColor.value = 'black';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.windowOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.windowOpacity.isSet()) {\n      this.selectItem(this.settingsManager.windowOpacity.value);\n    }\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\nimport { DOM } from '../dom';\nimport { ComponentConfig } from './component';\nimport { TimelineMarker } from '../uiconfig';\nimport { SeekBarMarker } from './seekbar';\nimport { PlayerUtils } from '../playerutils';\nimport { Timeout } from '../timeout';\n\nexport interface MarkersConfig extends ComponentConfig {\n  /**\n   * Used for seekBar marker snapping range percentage\n   */\n  snappingRange?: number;\n}\n\nexport class TimelineMarkersHandler {\n  private markersContainer: DOM;\n  private timelineMarkers: SeekBarMarker[];\n  private player: PlayerAPI;\n  private uimanager: UIInstanceManager;\n  private pausedTimeshiftUpdater: Timeout;\n  private getSeekBarWidth: () => number;\n  protected config: MarkersConfig;\n\n  constructor(config: MarkersConfig, getSeekBarWidth: () => number, markersContainer: DOM) {\n    this.config = config;\n    this.getSeekBarWidth = getSeekBarWidth;\n    this.markersContainer = markersContainer;\n    this.timelineMarkers = [];\n  }\n\n  public initialize(player: PlayerAPI, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.uimanager = uimanager;\n    this.configureMarkers();\n  }\n\n  private configureMarkers(): void {\n    // Remove markers when unloaded\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, () => this.clearMarkers());\n    this.player.on(this.player.exports.PlayerEvent.AdBreakStarted, () => this.clearMarkers());\n    this.player.on(this.player.exports.PlayerEvent.AdBreakFinished, () => this.updateMarkers());\n    // Update markers when the size of the seekbar changes\n    this.player.on(this.player.exports.PlayerEvent.PlayerResized, () => this.updateMarkersDOM());\n\n    this.player.on(this.player.exports.PlayerEvent.SourceLoaded, () => {\n      if (this.player.isLive()) {\n        // Update marker position as timeshift range changes\n        this.player.on(this.player.exports.PlayerEvent.TimeChanged, () => this.updateMarkers());\n        // Update marker postion when paused as timeshift range changes\n        this.configureLivePausedTimeshiftUpdater(() => this.updateMarkers());\n      }\n    });\n    this.uimanager.getConfig().events.onUpdated.subscribe(() => this.updateMarkers());\n    this.uimanager.onRelease.subscribe(() => this.uimanager.getConfig().events.onUpdated.unsubscribe(() => this.updateMarkers()));\n\n    // Init markers at startup\n    this.updateMarkers();\n  }\n\n  public getMarkerAtPosition(percentage: number): SeekBarMarker | null {\n    const snappingRange = this.config.snappingRange;\n\n    const matchingMarker = this.timelineMarkers.find(marker => {\n      const hasDuration = marker.duration > 0;\n      // Handle interval markers\n      const intervalMarkerMatch =\n        hasDuration &&\n        percentage >= marker.position - snappingRange &&\n        percentage <= marker.position + marker.duration + snappingRange;\n\n      // Handle position markers\n      const positionMarkerMatch =\n        percentage >= marker.position - snappingRange &&\n        percentage <= marker.position + snappingRange;\n\n      return intervalMarkerMatch || positionMarkerMatch;\n    });\n\n    return matchingMarker || null;\n  }\n\n  private clearMarkers(): void {\n    this.timelineMarkers = [];\n    this.markersContainer.empty();\n  }\n\n  private removeMarkerFromConfig(marker: TimelineMarker): void {\n    this.uimanager.getConfig().metadata.markers = this.uimanager.getConfig().metadata.markers.filter(_marker => marker !== _marker);\n  }\n\n  private filterRemovedMarkers(): void {\n    this.timelineMarkers = this.timelineMarkers.filter(seekbarMarker => {\n      const matchingMarker = this.uimanager.getConfig().metadata.markers.find(_marker => seekbarMarker.marker === _marker);\n      if (!matchingMarker) {\n        this.removeMarkerFromDOM(seekbarMarker);\n      }\n      return matchingMarker;\n    });\n  }\n\n  private removeMarkerFromDOM(marker: SeekBarMarker): void {\n    if (marker.element) {\n      marker.element.remove();\n    }\n  }\n\n  private updateMarkers(): void {\n    if (!shouldProcessMarkers(this.player, this.uimanager)) {\n      this.clearMarkers();\n      return;\n    }\n\n    this.filterRemovedMarkers();\n\n    this.uimanager.getConfig().metadata.markers.forEach(marker => {\n      const { markerPosition, markerDuration } = getMarkerPositions(this.player, marker);\n\n      if (shouldRemoveMarker(markerPosition, markerDuration)) {\n        this.removeMarkerFromConfig(marker);\n      } else if (markerPosition <= 100) {\n        const matchingMarker = this.timelineMarkers.find(seekbarMarker => seekbarMarker.marker === marker);\n\n        if (matchingMarker) {\n          matchingMarker.position = markerPosition;\n          matchingMarker.duration = markerDuration;\n\n          this.updateMarkerDOM(matchingMarker);\n        } else {\n          const newMarker: SeekBarMarker = { marker, position: markerPosition, duration: markerDuration };\n          this.timelineMarkers.push(newMarker);\n\n          this.createMarkerDOM(newMarker);\n        }\n      }\n    });\n  }\n\n  private getMarkerCssProperties(marker: SeekBarMarker): { [propertyName: string]: string } {\n    const seekBarWidthPx = this.getSeekBarWidth();\n\n    const positionInPx = (seekBarWidthPx / 100) * (marker.position < 0 ? 0 : marker.position);\n    const cssProperties: { [propertyName: string]: string } = {\n      'transform': `translateX(${positionInPx}px)`,\n    };\n\n    if (marker.duration > 0) {\n      const markerWidthPx = Math.round(seekBarWidthPx / 100 * marker.duration);\n      cssProperties['width'] = `${markerWidthPx}px`;\n    }\n\n    return cssProperties;\n  }\n\n  private updateMarkerDOM(marker: SeekBarMarker): void {\n    marker.element.css(this.getMarkerCssProperties(marker));\n  }\n\n  private createMarkerDOM(marker: SeekBarMarker): void {\n    const markerClasses = ['seekbar-marker'].concat(marker.marker.cssClasses || [])\n      .map(cssClass => this.prefixCss(cssClass));\n\n    const markerElement = new DOM('div', {\n      'class': markerClasses.join(' '),\n      'data-marker-time': String(marker.marker.time),\n      'data-marker-title': String(marker.marker.title),\n    }).css(this.getMarkerCssProperties(marker));\n\n    if (marker.marker.imageUrl) {\n      const removeImage = () => {\n        imageElement.remove();\n      };\n\n      const imageElement = new DOM('img', {\n        'class': this.prefixCss('seekbar-marker-image'),\n        'src': marker.marker.imageUrl,\n      }).on('error', removeImage);\n\n      markerElement.append(imageElement);\n    }\n\n    marker.element = markerElement;\n    this.markersContainer.append(markerElement);\n  }\n\n  private updateMarkersDOM(): void {\n    this.timelineMarkers.forEach(marker => {\n      if (marker.element) {\n        this.updateMarkerDOM(marker);\n      } else {\n        this.createMarkerDOM(marker);\n      }\n    });\n  }\n\n  private configureLivePausedTimeshiftUpdater(\n    handler: () => void,\n  ): void {\n    // Regularly update the marker position while the timeout is active\n    this.pausedTimeshiftUpdater = new Timeout(1000, handler, true);\n\n    this.player.on(this.player.exports.PlayerEvent.Paused, () => {\n      if (this.player.isLive() && this.player.getMaxTimeShift() < 0) {\n        this.pausedTimeshiftUpdater.start();\n      }\n    });\n\n    // Stop updater when playback continues (no matter if the updater was started before)\n    this.player.on(this.player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\n    this.player.on(this.player.exports.PlayerEvent.Destroy, () => this.pausedTimeshiftUpdater.clear());\n  }\n\n  protected prefixCss(cssClassOrId: string): string {\n    return this.config.cssPrefix + '-' + cssClassOrId;\n  }\n}\n\nfunction getMarkerPositions(player: PlayerAPI, marker: TimelineMarker) {\n  const duration = getDuration(player);\n\n  const markerPosition = 100 / duration * getMarkerTime(marker, player, duration); // convert absolute time to percentage\n  let markerDuration = 100 / duration * marker.duration;\n\n  if (markerPosition < 0 && !isNaN(markerDuration)) {\n    // Shrink marker duration for on live streams as they reach end\n    markerDuration = markerDuration + markerPosition;\n  }\n\n  if (100 - markerPosition < markerDuration) {\n    // Shrink marker if it overflows timeline\n    markerDuration = 100 - markerPosition;\n  }\n\n  return { markerDuration, markerPosition };\n}\n\nfunction getMarkerTime(marker: TimelineMarker, player: PlayerAPI, duration: number): number {\n  if (!player.isLive()) {\n    return marker.time;\n  }\n\n  return duration - (PlayerUtils.getSeekableRangeRespectingLive(player).end - marker.time);\n}\n\nfunction getDuration(player: PlayerAPI): number {\n  if (!player.isLive()) {\n    return player.getDuration();\n  }\n  const { start, end } = PlayerUtils.getSeekableRangeRespectingLive(player);\n\n  return end - start;\n}\n\nfunction shouldRemoveMarker(markerPosition: number, markerDuration: number): boolean {\n  return (markerDuration < 0 || isNaN(markerDuration)) && markerPosition < 0;\n}\n\nfunction shouldProcessMarkers(player: PlayerAPI, uimanager: UIInstanceManager): boolean {\n  // Don't generate timeline markers if we don't yet have a duration\n  // The duration check is for buggy platforms where the duration is not available instantly (Chrome on Android 4.3)\n  const validToProcess = player.getDuration() !== Infinity || player.isLive();\n  const hasMarkers = uimanager.getConfig().metadata.markers.length > 0;\n\n  return validToProcess && hasMarkers;\n}\n","import { Container, ContainerConfig } from './container';\nimport { UIInstanceManager } from '../uimanager';\nimport { MetadataLabel, MetadataLabelContent } from './metadatalabel';\nimport { PlayerAPI, WarningEvent } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link TitleBar}.\n */\nexport interface TitleBarConfig extends ContainerConfig {\n  /**\n   * Specifies if the title bar should stay hidden when no metadata label contains any text. Does not make a lot\n   * of sense if the title bar contains other components than just MetadataLabels (like in the default configuration).\n   * Default: false\n   */\n  keepHiddenWithoutMetadata?: boolean;\n  keepWithError?: boolean;\n}\n\n/**\n * Displays a title bar containing a label with the title of the video.\n */\nexport class TitleBar extends Container<TitleBarConfig> {\n  constructor(config: TitleBarConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClass: 'ui-titlebar',\n        hidden: true,\n        components: [\n          new MetadataLabel({ content: MetadataLabelContent.Title }),\n          new MetadataLabel({ content: MetadataLabelContent.Description }),\n        ],\n        keepHiddenWithoutMetadata: false,\n      },\n      <TitleBarConfig>this.config,\n    );\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let shouldBeShown = !this.isHidden();\n    let hasMetadataText = true; // Flag to track if any metadata label contains text\n    let errorOccured = false;\n\n    let checkMetadataTextAndUpdateVisibility = () => {\n      hasMetadataText = false;\n\n      // Iterate through metadata labels and check if at least one of them contains text\n      for (let component of this.getComponents()) {\n        if (component instanceof MetadataLabel) {\n          if (!component.isEmpty()) {\n            hasMetadataText = true;\n            break;\n          }\n        }\n      }\n\n      if (this.isShown()) {\n        // Hide a visible titlebar if it does not contain any text and the hidden flag is set\n        if (config.keepHiddenWithoutMetadata && !hasMetadataText) {\n          this.hide();\n        }\n      } else if (shouldBeShown) {\n        // Show a hidden titlebar if it should actually be shown\n        this.show();\n      }\n    };\n\n    // Listen to text change events to update the hasMetadataText flag when the metadata dynamically changes\n    for (let component of this.getComponents()) {\n      if (component instanceof MetadataLabel) {\n        component.onTextChanged.subscribe(checkMetadataTextAndUpdateVisibility);\n      }\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      shouldBeShown = true;\n      if (!(config.keepHiddenWithoutMetadata && !hasMetadataText)) {\n        this.show();\n      }\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      shouldBeShown = false;\n      if (!errorOccured) {\n        this.hide();\n      }\n    });\n\n    // init\n    checkMetadataTextAndUpdateVisibility();\n\n    const checkErrorVisibility = () => {\n      if (config.keepWithError) {\n        errorOccured = true;\n        this.show();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Error, checkErrorVisibility);\n\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        checkErrorVisibility();\n      }\n    });\n\n    uimanager.onLoadingShow.subscribe(() => {\n      if (!config.hidden) {\n        this.show();\n      }\n    });\n  }\n}\n","import { Button, ButtonConfig } from './button';\nimport { NoArgs, EventDispatcher, Event } from '../eventdispatcher';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { LocalizableText } from '../localization/i18n';\n\n/**\n * Configuration interface for a toggle button component.\n */\nexport interface ToggleButtonConfig extends ButtonConfig {\n  /**\n   * The CSS class that marks the on-state of the button.\n   */\n  onClass?: string;\n  /**\n   * The CSS class that marks the off-state of the button.\n   */\n  offClass?: string;\n  /**\n   * WCAG20 standard for defining info about the component (usually the name)\n   *\n   * It is recommended to use `onAriaLabel` and `offAriaLabel` for toggle buttons\n   * as the component can then update them as the button is used.\n   *\n   * If both `ariaLabel` and `onAriaLabel` are set, `onAriaLabel` is used.\n   */\n  ariaLabel?: LocalizableText;\n  /**\n   * The aria label that marks the on-state of the button.\n   */\n  onAriaLabel?: LocalizableText;\n  /**\n   * The aria label that marks the off-state of the button.\n   */\n  offAriaLabel?: LocalizableText;\n  /**\n   * The text as string or as localize callback on the button.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A button that can be toggled between 'on' and 'off' states.\n */\nexport class ToggleButton<Config extends ToggleButtonConfig> extends Button<Config> {\n  private onState: boolean;\n\n  private toggleButtonEvents = {\n    onToggle: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n    onToggleOn: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n    onToggleOff: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n  };\n\n  constructor(config: Config) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-togglebutton',\n      onClass: 'on',\n      offClass: 'off',\n    };\n\n    if (config.onAriaLabel) {\n      config.ariaLabel = config.onAriaLabel;\n    }\n\n    this.config = this.mergeConfig(config, defaultConfig as Config, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    const config = this.getConfig();\n    this.getDomElement().addClass(this.prefixCss(config.offClass));\n  }\n\n  /**\n   * Toggles the button to the 'on' state.\n   */\n  on() {\n    if (this.isOff()) {\n      const config = this.getConfig();\n\n      this.onState = true;\n      this.getDomElement().removeClass(this.prefixCss(config.offClass));\n      this.getDomElement().addClass(this.prefixCss(config.onClass));\n\n      this.onToggleEvent();\n      this.onToggleOnEvent();\n\n      this.setAriaAttr('pressed', 'true');\n\n      if (this.config.onAriaLabel) {\n        this.setAriaLabel(this.config.onAriaLabel);\n      }\n    }\n  }\n\n  /**\n   * Toggles the button to the 'off' state.\n   */\n  off() {\n    if (this.isOn()) {\n      const config = this.getConfig();\n\n      this.onState = false;\n      this.getDomElement().removeClass(this.prefixCss(config.onClass));\n      this.getDomElement().addClass(this.prefixCss(config.offClass));\n\n      this.onToggleEvent();\n      this.onToggleOffEvent();\n\n      this.setAriaAttr('pressed', 'false');\n\n      if (this.config.offAriaLabel) {\n        this.setAriaLabel(this.config.offAriaLabel);\n      }\n    }\n  }\n\n  /**\n   * Toggle the button 'on' if it is 'off', or 'off' if it is 'on'.\n   */\n  toggle() {\n    if (this.isOn()) {\n      this.off();\n    } else {\n      this.on();\n    }\n  }\n\n  /**\n   * Checks if the toggle button is in the 'on' state.\n   * @returns {boolean} true if button is 'on', false if 'off'\n   */\n  isOn(): boolean {\n    return this.onState;\n  }\n\n  /**\n   * Checks if the toggle button is in the 'off' state.\n   * @returns {boolean} true if button is 'off', false if 'on'\n   */\n  isOff(): boolean {\n    return !this.isOn();\n  }\n\n  protected onClickEvent() {\n    super.onClickEvent();\n\n    // Fire the toggle event together with the click event\n    // (they are technically the same, only the semantics are different)\n    this.onToggleEvent();\n  }\n\n  protected onToggleEvent() {\n    this.toggleButtonEvents.onToggle.dispatch(this);\n  }\n\n  protected onToggleOnEvent() {\n    this.toggleButtonEvents.onToggleOn.dispatch(this);\n  }\n\n  protected onToggleOffEvent() {\n    this.toggleButtonEvents.onToggleOff.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggle(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggle.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled 'on'.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggleOn(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggleOn.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled 'off'.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggleOff(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggleOff.getEvent();\n  }\n}\n","import { ContainerConfig, Container } from './container';\nimport { UIInstanceManager } from '../uimanager';\nimport { DOM } from '../dom';\nimport { Timeout } from '../timeout';\nimport { PlayerUtils } from '../playerutils';\nimport { CancelEventArgs, EventDispatcher } from '../eventdispatcher';\nimport { PlayerAPI, PlayerResizedEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link UIContainer}.\n */\nexport interface UIContainerConfig extends ContainerConfig {\n  /**\n   * The delay in milliseconds after which the control bar will be hidden when there is no user interaction.\n   * Set to -1 for the UI to be always shown.\n   * Default: 5 seconds (5000)\n   */\n  hideDelay?: number;\n  /**\n   * An array of player states in which the UI will not be hidden, no matter what the {@link hideDelay} is.\n   */\n  hidePlayerStateExceptions?: PlayerUtils.PlayerState[];\n  /**\n   * The HTML element on which user interaction events (e.g. mouse and touch events) will be tracked to detect\n   * interaction with the UI. These basically trigger showing and hiding of the UI.\n   * Default: the UI container itself\n   */\n  userInteractionEventSource?: HTMLElement;\n}\n\n/**\n * The base container that contains all of the UI. The UIContainer is passed to the {@link UIManager} to build and\n * setup the UI.\n */\nexport class UIContainer extends Container<UIContainerConfig> {\n  private static readonly STATE_PREFIX = 'player-state-';\n\n  private static readonly FULLSCREEN = 'fullscreen';\n  private static readonly BUFFERING = 'buffering';\n  private static readonly REMOTE_CONTROL = 'remote-control';\n  private static readonly CONTROLS_SHOWN = 'controls-shown';\n  private static readonly CONTROLS_HIDDEN = 'controls-hidden';\n\n  private uiHideTimeout: Timeout;\n  private playerStateChange: EventDispatcher<UIContainer, PlayerUtils.PlayerState>;\n\n  private userInteractionEventSource: DOM;\n  private userInteractionEvents: { name: string; handler: EventListenerOrEventListenerObject }[];\n\n  public hideUi: () => void = () => {};\n  public showUi: () => void = () => {};\n\n  public hideLoading: () => void = () => {};\n  public showLoading: () => void = () => {};\n\n  constructor(config: UIContainerConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(\n      config,\n      <UIContainerConfig>{\n        cssClass: 'ui-uicontainer',\n        role: 'region',\n        ariaLabel: i18n.getLocalizer('player'),\n        hideDelay: 5000,\n      },\n      this.config,\n    );\n\n    this.playerStateChange = new EventDispatcher<UIContainer, PlayerUtils.PlayerState>();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    const config = this.getConfig();\n\n    if (config.userInteractionEventSource) {\n      this.userInteractionEventSource = new DOM(config.userInteractionEventSource);\n    } else {\n      this.userInteractionEventSource = this.getDomElement();\n    }\n\n    super.configure(player, uimanager);\n\n    this.configureUIShowHide(player, uimanager);\n    this.configurePlayerStates(player, uimanager);\n  }\n\n  private configureUIShowHide(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let config = this.getConfig();\n\n    if (config.hideDelay === -1) {\n      uimanager.onConfigured.subscribe(() => uimanager.onControlsShow.dispatch(this));\n      return;\n    }\n\n    let isUiShown = false;\n    let isSeeking = false;\n    let isFirstTouch = true;\n    let isShowLoading = true;\n    let playerState: PlayerUtils.PlayerState;\n\n    const hidingPrevented = (): boolean => {\n      return (\n        config.hidePlayerStateExceptions &&\n        config.hidePlayerStateExceptions.indexOf(playerState) > -1\n      );\n    };\n\n    this.showUi = () => {\n      if (!isUiShown && !isShowLoading) {\n        // Let subscribers know that they should reveal themselves\n        uimanager.onControlsShow.dispatch(this);\n        isUiShown = true;\n      }\n      // Don't trigger timeout while seeking (it will be triggered once the seek is finished) or casting\n      if (!isSeeking && !player.isCasting() && !hidingPrevented()) {\n        this.uiHideTimeout.start();\n      }\n    };\n\n    this.showLoading = () => {\n      // Let subscribers know that they should reveal themselves\n      isShowLoading = true;\n      uimanager.onLoadingShow.dispatch(this);\n    };\n\n    this.hideUi = () => {\n      // Hide the UI only if it is shown, and if not casting\n      if (isUiShown && !player.isCasting()) {\n        // Issue a preview event to check if we are good to hide the controls\n        let previewHideEventArgs = <CancelEventArgs>{};\n        uimanager.onPreviewControlsHide.dispatch(this, previewHideEventArgs);\n\n        if (!previewHideEventArgs.cancel) {\n          // If the preview wasn't canceled, let subscribers know that they should now hide themselves\n          uimanager.onControlsHide.dispatch(this);\n          isUiShown = false;\n        } else {\n          // If the hide preview was canceled, continue to show UI\n          this.showUi();\n        }\n      }\n    };\n\n    this.hideLoading = () => {\n      isShowLoading = false;\n      uimanager.onLoadingHide.dispatch(this);\n    };\n\n    // Timeout to defer UI hiding by the configured delay time\n    this.uiHideTimeout = new Timeout(config.hideDelay, this.hideUi);\n\n    this.userInteractionEvents = [\n      {\n        // On touch displays, the first touch reveals the UI\n        name: 'touchend',\n        handler: (e) => {\n          if (!isUiShown) {\n            // Only if the UI is hidden, we prevent other actions (except for the first touch) and reveal the UI\n            // instead. The first touch is not prevented to let other listeners receive the event and trigger an\n            // initial action, e.g. the huge playback button can directly start playback instead of requiring a double\n            // tap which 1. reveals the UI and 2. starts playback.\n            if (isFirstTouch && !player.isPlaying()) {\n              isFirstTouch = false;\n            } else {\n              e.preventDefault();\n            }\n            this.showUi();\n          }\n        },\n      },\n      {\n        // When the mouse enters, we show the UI\n        name: 'mouseenter',\n        handler: () => {\n          this.showUi();\n        },\n      },\n      {\n        // When the mouse moves within, we show the UI\n        name: 'mousemove',\n        handler: () => {\n          this.showUi();\n        },\n      },\n      {\n        name: 'focusin',\n        handler: () => {\n          this.showUi();\n        },\n      },\n      {\n        name: 'keydown',\n        handler: () => {\n          this.showUi();\n        },\n      },\n      {\n        // When the mouse leaves, we can prepare to hide the UI, except a seek is going on\n        name: 'mouseleave',\n        handler: () => {\n          // When a seek is going on, the seek scrub pointer may exit the UI area while still seeking, and we do not\n          // hide the UI in such cases\n          if (!isSeeking && !hidingPrevented()) {\n            this.uiHideTimeout.start();\n          }\n        },\n      },\n    ];\n\n    this.userInteractionEvents.forEach((event) =>\n      this.userInteractionEventSource.on(event.name, event.handler),\n    );\n\n    uimanager.onSeek.subscribe(() => {\n      this.uiHideTimeout.clear(); // Don't hide UI while a seek is in progress\n      isSeeking = true;\n    });\n    uimanager.onSeeked.subscribe(() => {\n      isSeeking = false;\n      if (!hidingPrevented()) {\n        this.uiHideTimeout.start(); // Re-enable UI hide timeout after a seek\n      }\n    });\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      this.showUi(); // Show UI when a Cast session has started (UI will then stay permanently on during the session)\n    });\n    this.playerStateChange.subscribe((_, state) => {\n      playerState = state;\n      if (hidingPrevented()) {\n        // Entering a player state that prevents hiding and forces the controls to be shown\n        this.uiHideTimeout.clear();\n        this.showUi();\n      } else {\n        // Entering a player state that allows hiding\n        this.uiHideTimeout.start();\n      }\n    });\n  }\n\n  private configurePlayerStates(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let container = this.getDomElement();\n\n    // Convert player states into CSS class names\n    let stateClassNames = <any>[];\n    for (let state in PlayerUtils.PlayerState) {\n      if (isNaN(Number(state))) {\n        let enumName = PlayerUtils.PlayerState[<any>PlayerUtils.PlayerState[state]];\n        stateClassNames[PlayerUtils.PlayerState[state]] = this.prefixCss(\n          UIContainer.STATE_PREFIX + enumName.toLowerCase(),\n        );\n      }\n    }\n\n    let removeStates = () => {\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Idle]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Prepared]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Playing]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Paused]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Finished]);\n    };\n\n    const updateState = (state: PlayerUtils.PlayerState) => {\n      removeStates();\n      container.addClass(stateClassNames[state]);\n      this.playerStateChange.dispatch(this, state);\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      updateState(PlayerUtils.PlayerState.Prepared);\n    });\n    player.on(player.exports.PlayerEvent.Play, () => {\n      updateState(PlayerUtils.PlayerState.Playing);\n    });\n    player.on(player.exports.PlayerEvent.Playing, () => {\n      updateState(PlayerUtils.PlayerState.Playing);\n    });\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      updateState(PlayerUtils.PlayerState.Paused);\n    });\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\n      updateState(PlayerUtils.PlayerState.Finished);\n    });\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\n      updateState(PlayerUtils.PlayerState.Idle);\n    });\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      updateState(PlayerUtils.getState(player));\n    });\n\n    // Fullscreen marker class\n    player.on(player.exports.PlayerEvent.ViewModeChanged, () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\n      } else {\n        container.removeClass(this.prefixCss(UIContainer.FULLSCREEN));\n      }\n    });\n    // Init fullscreen state\n    if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n      container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\n    }\n\n    // Buffering marker class\n    player.on(player.exports.PlayerEvent.StallStarted, () => {\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\n    });\n    player.on(player.exports.PlayerEvent.StallEnded, () => {\n      container.removeClass(this.prefixCss(UIContainer.BUFFERING));\n    });\n    // Init buffering state\n    if (player.isStalled()) {\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\n    }\n\n    // RemoteControl marker class\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\n      container.removeClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    });\n    // Init RemoteControl state\n    if (player.isCasting()) {\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    }\n\n    // Controls visibility marker class\n    uimanager.onControlsShow.subscribe(() => {\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\n    });\n\n    // Layout size classes\n    let updateLayoutSizeClasses = (width: number, height: number) => {\n      container.removeClass(this.prefixCss('layout-max-width-400'));\n      container.removeClass(this.prefixCss('layout-max-width-600'));\n      container.removeClass(this.prefixCss('layout-max-width-800'));\n      container.removeClass(this.prefixCss('layout-max-width-1200'));\n\n      if (width <= 400) {\n        container.addClass(this.prefixCss('layout-max-width-400'));\n      } else if (width <= 600) {\n        container.addClass(this.prefixCss('layout-max-width-600'));\n      } else if (width <= 800) {\n        container.addClass(this.prefixCss('layout-max-width-800'));\n      } else if (width <= 1200) {\n        container.addClass(this.prefixCss('layout-max-width-1200'));\n      }\n    };\n    player.on(player.exports.PlayerEvent.PlayerResized, (e: PlayerResizedEvent) => {\n      // Convert strings (with \"px\" suffix) to ints\n      let width = Math.round(Number(e.width.substring(0, e.width.length - 2)));\n      let height = Math.round(Number(e.height.substring(0, e.height.length - 2)));\n\n      updateLayoutSizeClasses(width, height);\n    });\n    // Init layout state\n    updateLayoutSizeClasses(\n      new DOM(player.getContainer()).width(),\n      new DOM(player.getContainer()).height(),\n    );\n  }\n\n  release(): void {\n    // Explicitly unsubscribe user interaction event handlers because they could be attached to an external element\n    // that isn't owned by the UI and therefore not removed on release.\n    if (this.userInteractionEvents) {\n      this.userInteractionEvents.forEach((event) =>\n        this.userInteractionEventSource.off(event.name, event.handler),\n      );\n    }\n\n    super.release();\n\n    if (this.uiHideTimeout) {\n      this.uiHideTimeout.clear();\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let container = super.toDomElement();\n\n    // Detect flexbox support (not supported in IE9)\n    if (document && typeof document.createElement('p').style.flex !== 'undefined') {\n      container.addClass(this.prefixCss('flexbox'));\n    } else {\n      container.addClass(this.prefixCss('no-flexbox'));\n    }\n\n    return container;\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between 'auto' and the available video qualities.\n */\nexport class VideoQualitySelectBox extends SelectBox {\n\n  private hasAuto: boolean;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-videoqualityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let selectCurrentVideoQuality = () => {\n      this.selectItem(player.getVideoQuality().id);\n    };\n\n    let updateVideoQualities = () => {\n      let videoQualities = player.getAvailableVideoQualities();\n\n      this.clearItems();\n\n      // Progressive streams do not support automatic quality selection\n      this.hasAuto = player.getStreamType() !== 'progressive';\n\n      if (this.hasAuto) {\n        // Add entry for automatic quality switching (default setting)\n        this.addItem('auto', i18n.getLocalizer('auto'));\n      }\n\n      // Add video qualities\n      for (let videoQuality of videoQualities) {\n        this.addItem(videoQuality.id, videoQuality.label);\n      }\n\n      // Select initial quality\n      selectCurrentVideoQuality();\n    };\n\n    this.onItemSelected.subscribe((sender: VideoQualitySelectBox, value: string) => {\n      player.setVideoQuality(value);\n    });\n\n    // Update qualities when source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateVideoQualities);\n    // Update qualities when the period within a source changes\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateVideoQualities);\n    // Update quality selection when quality is changed (from outside)\n    player.on(player.exports.PlayerEvent.VideoQualityChanged, selectCurrentVideoQuality);\n\n    if ((player.exports.PlayerEvent as any).VideoQualityAdded) {\n      // Update qualities when their availability changed\n      // TODO: remove any cast after next player release\n      player.on((player.exports.PlayerEvent as any).VideoQualityAdded, updateVideoQualities);\n      player.on((player.exports.PlayerEvent as any).VideoQualityRemoved, updateVideoQualities);\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(updateVideoQualities);\n  }\n\n  /**\n   * Returns true if the select box contains an 'auto' item for automatic quality selection mode.\n   * @return {boolean}\n   */\n  hasAutoItem(): boolean {\n    return this.hasAuto;\n  }\n}","import {Container, ContainerConfig} from './container';\nimport {VolumeSlider} from './volumeslider';\nimport {VolumeToggleButton} from './volumetogglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link VolumeControlButton}.\n */\nexport interface VolumeControlButtonConfig extends ContainerConfig {\n  /**\n   * The delay after which the volume slider will be hidden when there is no user interaction.\n   * Care must be taken that the delay is long enough so users can reach the slider from the toggle button, e.g. by\n   * mouse movement. If the delay is too short, the sliders disappears before the mouse pointer has reached it and\n   * the user is not able to use it.\n   * Default: 500ms\n   */\n  hideDelay?: number;\n  /**\n   * Specifies if the volume slider should be vertically or horizontally aligned.\n   * Default: true\n   */\n  vertical?: boolean;\n}\n\n/**\n * A composite volume control that consists of and internally manages a volume control button that can be used\n * for muting, and a (depending on the CSS style, e.g. slide-out) volume control bar.\n */\nexport class VolumeControlButton extends Container<VolumeControlButtonConfig> {\n\n  private volumeToggleButton: VolumeToggleButton;\n  private volumeSlider: VolumeSlider;\n\n  private volumeSliderHideTimeout: Timeout;\n\n  constructor(config: VolumeControlButtonConfig = {}) {\n    super(config);\n\n    this.volumeToggleButton = new VolumeToggleButton();\n    this.volumeSlider = new VolumeSlider({\n      vertical: config.vertical != null ? config.vertical : true,\n      hidden: true,\n    });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-volumecontrolbutton',\n      components: [this.volumeToggleButton, this.volumeSlider],\n      hideDelay: 500,\n    }, <VolumeControlButtonConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let volumeToggleButton = this.getVolumeToggleButton();\n    let volumeSlider = this.getVolumeSlider();\n\n    this.volumeSliderHideTimeout = new Timeout(this.getConfig().hideDelay, () => {\n      volumeSlider.hide();\n    });\n\n    /*\n     * Volume Slider visibility handling\n     *\n     * The volume slider shall be visible while the user hovers the mute toggle button, while the user hovers the\n     * volume slider, and while the user slides the volume slider. If none of these situations are true, the slider\n     * shall disappear.\n     */\n    let volumeSliderHovered = false;\n    volumeToggleButton.getDomElement().on('mouseenter', () => {\n      // Show volume slider when mouse enters the button area\n      if (volumeSlider.isHidden()) {\n        volumeSlider.show();\n      }\n      // Avoid hiding of the slider when button is hovered\n      this.volumeSliderHideTimeout.clear();\n    });\n    volumeToggleButton.getDomElement().on('mouseleave', () => {\n      // Hide slider delayed when button is left\n      this.volumeSliderHideTimeout.reset();\n    });\n    volumeSlider.getDomElement().on('mouseenter', () => {\n      // When the slider is entered, cancel the hide timeout activated by leaving the button\n      this.volumeSliderHideTimeout.clear();\n      volumeSliderHovered = true;\n    });\n    volumeSlider.getDomElement().on('mouseleave', () => {\n      // When mouse leaves the slider, only hide it if there is no slide operation in progress\n      if (volumeSlider.isSeeking()) {\n        this.volumeSliderHideTimeout.clear();\n      } else {\n        this.volumeSliderHideTimeout.reset();\n      }\n      volumeSliderHovered = false;\n    });\n    volumeSlider.onSeeked.subscribe(() => {\n      // When a slide operation is done and the slider not hovered (mouse outside slider), hide slider delayed\n      if (!volumeSliderHovered) {\n        this.volumeSliderHideTimeout.reset();\n      }\n    });\n  }\n\n  release(): void {\n    super.release();\n    this.volumeSliderHideTimeout.clear();\n  }\n\n  /**\n   * Provides access to the internally managed volume toggle button.\n   * @returns {VolumeToggleButton}\n   */\n  getVolumeToggleButton(): VolumeToggleButton {\n    return this.volumeToggleButton;\n  }\n\n  /**\n   * Provides access to the internally managed volume silder.\n   * @returns {VolumeSlider}\n   */\n  getVolumeSlider(): VolumeSlider {\n    return this.volumeSlider;\n  }\n}","import { SeekBar, SeekBarConfig, SeekPreviewEventArgs } from './seekbar';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { VolumeTransition } from '../volumecontroller';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link VolumeSlider} component.\n */\nexport interface VolumeSliderConfig extends SeekBarConfig {\n  /**\n   * Specifies if the volume slider should be automatically hidden when volume control is prohibited by the\n   * browser or platform. This currently only applies to iOS.\n   * Default: true\n   */\n  hideIfVolumeControlProhibited?: boolean;\n}\n\n/**\n * A simple volume slider component to adjust the player's volume setting.\n */\nexport class VolumeSlider extends SeekBar {\n  private volumeTransition: VolumeTransition;\n\n  constructor(config: VolumeSliderConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <VolumeSliderConfig>{\n      cssClass: 'ui-volumeslider',\n      hideIfVolumeControlProhibited: true,\n      ariaLabel: i18n.getLocalizer('settings.audio.volume'),\n      tabIndex: 0,\n    }, this.config);\n  }\n\n  private setVolumeAriaSliderValues(value: number) {\n    this.getDomElement().attr('aria-valuenow', Math.ceil(value).toString());\n    this.getDomElement().attr('aria-valuetext', `${i18n.performLocalization(i18n.getLocalizer('seekBar.value'))}: ${Math.ceil(value)}`);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager, false);\n\n    this.setAriaSliderMinMax('0', '100');\n\n    let config = <VolumeSliderConfig>this.getConfig();\n\n    const volumeController = uimanager.getConfig().volumeController;\n\n    if (config.hideIfVolumeControlProhibited && !this.detectVolumeControlAvailability()) {\n      this.hide();\n\n      // We can just return from here, because the user will never interact with the control and any configured\n      // functionality would only eat resources for no reason.\n      return;\n    }\n\n    volumeController.onChanged.subscribe((_, args) => {\n      if (args.muted) {\n        this.setVolumeAriaSliderValues(0);\n        this.setPlaybackPosition(0);\n      } else {\n        this.setPlaybackPosition(args.volume);\n        this.setVolumeAriaSliderValues(args.volume);\n      }\n    });\n\n    this.onSeek.subscribe(() => {\n      this.volumeTransition = volumeController.startTransition();\n    });\n\n    this.onSeekPreview.subscribeRateLimited(this.updateVolumeWhileScrubbing, 50);\n    this.onSeeked.subscribe((sender, percentage) => {\n      if (this.volumeTransition) {\n        this.volumeTransition.finish(percentage);\n      }\n    });\n\n    // Update the volume slider marker when the player resized, a source is loaded,\n    // or the UI is configured. Check the seekbar for a detailed description.\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      this.refreshPlaybackPosition();\n    });\n    uimanager.onConfigured.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    uimanager.onComponentShow.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n    uimanager.onComponentHide.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    // Init volume bar\n    volumeController.onChangedEvent();\n  }\n\n  private updateVolumeWhileScrubbing = (sender: VolumeSlider, args: SeekPreviewEventArgs) => {\n    if (args.scrubbing && this.volumeTransition) {\n      this.volumeTransition.update(args.position);\n    }\n  };\n\n  private detectVolumeControlAvailability(): boolean {\n    /*\n     * \"On iOS devices, the audio level is always under the user’s physical control. The volume property is not\n     * settable in JavaScript. Reading the volume property always returns 1.\"\n     * https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html\n     */\n    // as muted autoplay gets paused as soon as we unmute it, we may not touch the volume of the actual player so we\n    // probe a dummy audio element\n    const dummyVideoElement = document.createElement('video');\n    // try setting the volume to 0.7 and if it's still 1 we are on a volume control restricted device\n    dummyVideoElement.volume = 0.7;\n    return dummyVideoElement.volume !== 1;\n  }\n\n  release(): void {\n    super.release();\n\n    this.onSeekPreview.unsubscribe(this.updateVolumeWhileScrubbing);\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles audio muting.\n */\nexport class VolumeToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-volumetogglebutton',\n      text: i18n.getLocalizer('settings.audio.mute'),\n      onClass: 'muted',\n      offClass: 'unmuted',\n      ariaLabel: i18n.getLocalizer('settings.audio.mute'),\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const volumeController = uimanager.getConfig().volumeController;\n\n    volumeController.onChanged.subscribe((_, args) => {\n      if (args.muted) {\n        this.on();\n      } else {\n        this.off();\n      }\n\n      const volumeLevelTens = Math.ceil(args.volume / 10);\n      this.getDomElement().data(this.prefixCss('volume-level-tens'), String(volumeLevelTens));\n    });\n\n    this.onClick.subscribe(() => {\n      volumeController.toggleMuted();\n    });\n\n    // Startup init\n    volumeController.onChangedEvent();\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles the video view between normal/mono and VR/stereo.\n */\nexport class VRToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-vrtogglebutton',\n      text: i18n.getLocalizer('vr'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let isVRConfigured = () => {\n      // VR availability cannot be checked through getVRStatus() because it is asynchronously populated and not\n      // available at UI initialization. As an alternative, we check the VR settings in the config.\n      // TODO use getVRStatus() through isVRStereoAvailable() once the player has been rewritten and the status is\n      // available in Ready\n      const source = player.getSource();\n      return source && Boolean(source.vr);\n    };\n\n    let isVRStereoAvailable = () => {\n      const source = player.getSource();\n      return player.vr && Boolean(source.vr);\n    };\n\n    let vrStateHandler = (ev: PlayerEventBase) => {\n      if (ev.type === player.exports.PlayerEvent.Warning\n        && (ev as WarningEvent).code !== player.exports.WarningCode.VR_RENDERING_ERROR) {\n        return;\n      }\n\n      if (isVRConfigured() && isVRStereoAvailable()) {\n        this.show(); // show button in case it is hidden\n\n        if (player.vr && player.vr.getStereo()) {\n          this.on();\n        } else {\n          this.off();\n        }\n      } else {\n        this.hide(); // hide button if no stereo mode available\n      }\n    };\n\n    let vrButtonVisibilityHandler = () => {\n      if (isVRConfigured()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.VRStereoChanged, vrStateHandler);\n    player.on(player.exports.PlayerEvent.Warning, vrStateHandler);\n    // Hide button when VR source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, vrButtonVisibilityHandler);\n    uimanager.getConfig().events.onUpdated.subscribe(vrButtonVisibilityHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isVRStereoAvailable()) {\n        if (console) {\n          console.log('No VR content');\n        }\n      } else {\n        if (player.vr && player.vr.getStereo()) {\n          player.vr.setStereo(false);\n        } else {\n          player.vr.setStereo(true);\n        }\n      }\n    });\n\n    // Set startup visibility\n    vrButtonVisibilityHandler();\n  }\n}","import {ClickOverlay, ClickOverlayConfig} from './clickoverlay';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link ClickOverlay}.\n */\nexport interface WatermarkConfig extends ClickOverlayConfig {\n  // nothing yet\n}\n\n/**\n * A watermark overlay with a clickable logo.\n */\nexport class Watermark extends ClickOverlay {\n\n  constructor(config: WatermarkConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-watermark',\n      url: 'http://bitmovin.com',\n      role: 'link',\n      text: 'logo',\n      ariaLabel: i18n.getLocalizer('watermarkLink'),\n    }, <WatermarkConfig>this.config);\n  }\n}","import {VRToggleButton} from './components/vrtogglebutton';\nimport {SettingsToggleButton} from './components/settingstogglebutton';\nimport {VolumeSlider} from './components/volumeslider';\nimport {PlaybackTimeLabel, PlaybackTimeLabelMode} from './components/playbacktimelabel';\nimport {AirPlayToggleButton} from './components/airplaytogglebutton';\nimport {ErrorMessageOverlay} from './components/errormessageoverlay';\nimport {ControlBar} from './components/controlbar';\nimport {CastToggleButton} from './components/casttogglebutton';\nimport {FullscreenToggleButton} from './components/fullscreentogglebutton';\nimport {RecommendationOverlay} from './components/recommendationoverlay';\nimport {PlaybackSpeedSelectBox} from './components/playbackspeedselectbox';\nimport {AudioQualitySelectBox} from './components/audioqualityselectbox';\nimport {CastStatusOverlay} from './components/caststatusoverlay';\nimport {UIContainer} from './components/uicontainer';\nimport {Watermark} from './components/watermark';\nimport {SubtitleOverlay} from './components/subtitleoverlay';\nimport {SettingsPanel} from './components/settingspanel';\nimport {SeekBarLabel} from './components/seekbarlabel';\nimport {PlaybackToggleOverlay} from './components/playbacktoggleoverlay';\nimport {PictureInPictureToggleButton} from './components/pictureinpicturetogglebutton';\nimport {Spacer} from './components/spacer';\nimport {Container} from './components/container';\nimport {VolumeToggleButton} from './components/volumetogglebutton';\nimport {PlaybackToggleButton} from './components/playbacktogglebutton';\nimport {SeekBar} from './components/seekbar';\nimport {VideoQualitySelectBox} from './components/videoqualityselectbox';\nimport {UIConditionContext, UIManager} from './uimanager';\nimport {TitleBar} from './components/titlebar';\nimport {BufferingOverlay} from './components/bufferingoverlay';\nimport {SubtitleListBox} from './components/subtitlelistbox';\nimport {AudioTrackListBox} from './components/audiotracklistbox';\nimport {SettingsPanelItem} from './components/settingspanelitem';\nimport {SettingsPanelPage} from './components/settingspanelpage';\nimport { UIFactory } from './uifactory';\nimport { UIConfig } from './uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport namespace DemoFactory {\n\n  export function buildDemoWithSeparateAudioSubtitlesButtons(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    // show smallScreen UI only on mobile/handheld devices\n    let smallScreenSwitchWidth = 600;\n\n    return new UIManager(player, [{\n      ui: UIFactory.modernSmallScreenAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth\n          && context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: UIFactory.modernAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: UIFactory.modernSmallScreenUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth;\n      },\n    }, {\n      ui: modernUIWithSeparateAudioSubtitlesButtons(),\n    }], config);\n  }\n\n  function modernUIWithSeparateAudioSubtitlesButtons() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let settingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem('Video Quality', new VideoQualitySelectBox()),\n            new SettingsPanelItem('Speed', new PlaybackSpeedSelectBox()),\n            new SettingsPanelItem('Audio Quality', new AudioQualitySelectBox()),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let subtitleListBox = new SubtitleListBox();\n    let subtitleSettingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, subtitleListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let audioTrackListBox = new AudioTrackListBox();\n    let audioTrackSettingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, audioTrackListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let controlBar = new ControlBar({\n      components: [\n        audioTrackSettingsPanel,\n        subtitleSettingsPanel,\n        settingsPanel,\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n        new Container({\n          components: [\n            new PlaybackToggleButton(),\n            new VolumeToggleButton(),\n            new VolumeSlider(),\n            new Spacer(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new SettingsToggleButton({\n              settingsPanel: audioTrackSettingsPanel,\n              cssClass: 'ui-audiotracksettingstogglebutton',\n            }),\n            new SettingsToggleButton({\n              settingsPanel: subtitleSettingsPanel,\n              cssClass: 'ui-subtitlesettingstogglebutton',\n            }),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n          cssClasses: ['controlbar-bottom'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new CastStatusOverlay(),\n        controlBar,\n        new TitleBar(),\n        new RecommendationOverlay(),\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n    });\n  }\n}","export interface Offset {\n  left: number;\n  top: number;\n}\n\nexport interface Size {\n  width: number;\n  height: number;\n}\n\nexport interface CssProperties {\n  [propertyName: string]: string;\n}\n\n/**\n * Simple DOM manipulation and DOM element event handling modeled after jQuery (as replacement for jQuery).\n *\n * Like jQuery, DOM operates on single elements and lists of elements. For example: creating an element returns a DOM\n * instance with a single element, selecting elements returns a DOM instance with zero, one, or many elements. Similar\n * to jQuery, setters usually affect all elements, while getters operate on only the first element.\n * Also similar to jQuery, most methods (except getters) return the DOM instance facilitating easy chaining of method\n * calls.\n *\n * Built with the help of: http://youmightnotneedjquery.com/\n */\nexport class DOM {\n\n  private document: Document;\n\n  /**\n   * The list of elements that the instance wraps. Take care that not all methods can operate on the whole list,\n   * getters usually just work on the first element.\n   */\n  private elements: HTMLElement[];\n\n  /**\n   * Creates a DOM element.\n   * @param tagName the tag name of the DOM element\n   * @param attributes a list of attributes of the element\n   */\n  constructor(tagName: string, attributes: {[name: string]: string});\n  /**\n   * Selects all elements from the DOM that match the specified selector.\n   * @param selector the selector to match DOM elements with\n   */\n  constructor(selector: string);\n  /**\n   * Wraps a plain HTMLElement with a DOM instance.\n   * @param element the HTMLElement to wrap with DOM\n   */\n  constructor(element: HTMLElement);\n  /**\n   * Wraps a list of plain HTMLElements with a DOM instance.\n   * @param elements the HTMLElements to wrap with DOM\n   */\n  constructor(elements: HTMLElement[]);\n  /**\n   * Wraps the document with a DOM instance. Useful to attach event listeners to the document.\n   * @param document the document to wrap\n   */\n  constructor(document: Document);\n  constructor(something: string | HTMLElement | HTMLElement[] | Document, attributes?: {[name: string]: string}) {\n    this.document = document; // Set the global document to the local document field\n\n    if (something instanceof Array) {\n      if (something.length > 0 && something[0] instanceof HTMLElement) {\n        let elements = something;\n        this.elements = elements;\n      }\n    }\n    else if (something instanceof HTMLElement) {\n      let element = something;\n      this.elements = [element];\n    }\n    else if (something instanceof Document) {\n      // When a document is passed in, we do not do anything with it, but by setting this.elements to null\n      // we give the event handling method a means to detect if the events should be registered on the document\n      // instead of elements.\n      this.elements = null;\n    }\n    else if (attributes) {\n      let tagName = something;\n      let element = document.createElement(tagName);\n\n      for (let attributeName in attributes) {\n        let attributeValue = attributes[attributeName];\n        if (attributeValue != null) {\n          element.setAttribute(attributeName, attributeValue);\n        }\n      }\n\n      this.elements = [element];\n    }\n    else {\n      let selector = something;\n      this.elements = this.findChildElements(selector);\n    }\n  }\n\n  /**\n   * Gets the number of elements that this DOM instance currently holds.\n   * @returns {number} the number of elements\n   */\n  get length(): number {\n    return this.elements ? this.elements.length : 0;\n  }\n\n  /**\n   * Gets the HTML elements that this DOM instance currently holds.\n   * @returns {HTMLElement[]} the raw HTML elements\n   */\n  get(): HTMLElement[];\n  /**\n   * Gets an HTML element from the list elements that this DOM instance currently holds.\n   * @param index The zero-based index into the element list. Can be negative to return an element from the end,\n   *    e.g. -1 returns the last element.\n   */\n  get(index: number): HTMLElement;\n  get(index?: number): HTMLElement | HTMLElement[] {\n    if (index === undefined) {\n      return this.elements;\n    } else if (!this.elements || index >= this.elements.length || index < -this.elements.length) {\n      return undefined;\n    } else if (index < 0) {\n      return this.elements[this.elements.length - index];\n    } else {\n      return this.elements[index];\n    }\n  }\n\n  /**\n   * A shortcut method for iterating all elements. Shorts this.elements.forEach(...) to this.forEach(...).\n   * @param handler the handler to execute an operation on an element\n   */\n  private forEach(handler: (element: HTMLElement) => void): void {\n    if (!this.elements) {\n      return;\n    }\n    this.elements.forEach((element) => {\n      handler(element);\n    });\n  }\n\n  private findChildElementsOfElement(element: HTMLElement | Document, selector: string): HTMLElement[] {\n    let childElements = element.querySelectorAll(selector);\n\n    // Convert NodeList to Array\n    // https://toddmotto.com/a-comprehensive-dive-into-nodelists-arrays-converting-nodelists-and-understanding-the-dom/\n    return [].slice.call(childElements);\n  }\n\n  private findChildElements(selector: string): HTMLElement[] {\n    let allChildElements = <HTMLElement[]>[];\n\n    if (this.elements) {\n      this.forEach((element) => {\n        allChildElements = allChildElements.concat(this.findChildElementsOfElement(element, selector));\n      });\n    }\n    else {\n      return this.findChildElementsOfElement(document, selector);\n    }\n\n    return allChildElements;\n  }\n\n  /**\n   * Finds all child elements of all elements matching the supplied selector.\n   * @param selector the selector to match with child elements\n   * @returns {DOM} a new DOM instance representing all matched children\n   */\n  find(selector: string): DOM {\n    let allChildElements = this.findChildElements(selector);\n    return new DOM(allChildElements);\n  }\n\n  /**\n   * Focuses to the first input element\n   */\n  focusToFirstInput() {\n    const inputElements = this.findChildElements('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n\n    if (inputElements.length > 0) {\n      inputElements[0].focus();\n    }\n  }\n\n  /**\n   * Focuses to the first input element\n   */\n  scrollTo(x: number, y: number) {\n    this.elements[0].scrollTo(x, y);\n  }\n\n  /**\n   * Returns a string of the inner HTML content of the first element.\n   */\n  html(): string;\n  /**\n   * Sets the inner HTML content of all elements.\n   * @param content a string of plain text or HTML markup\n   */\n  html(content: string): DOM;\n  html(content?: string): string | DOM {\n    if (arguments.length > 0) {\n      return this.setHtml(content);\n    }\n    else {\n      return this.getHtml();\n    }\n  }\n\n  private getHtml(): string | null {\n    return this.elements[0].innerHTML;\n  }\n\n  private setHtml(content: string): DOM {\n    if (content === undefined || content == null) {\n      // Set to empty string to avoid innerHTML getting set to 'undefined' (all browsers) or 'null' (IE9)\n      content = '';\n    }\n\n    this.forEach((element) => {\n      element.innerHTML = content;\n    });\n\n    return this;\n  }\n\n  /**\n   * Clears the inner HTML of all elements (deletes all children).\n   * @returns {DOM}\n   */\n  empty(): DOM {\n    this.forEach((element) => {\n      element.innerHTML = '';\n    });\n    return this;\n  }\n\n  /**\n   * Returns the current value of the first form element, e.g. the selected value of a select box or the text if an\n   * input field.\n   * @returns {string} the value of a form element\n   */\n  val(): string {\n    let element = this.elements[0];\n\n    if (element instanceof HTMLSelectElement || element instanceof HTMLInputElement) {\n      return element.value;\n    }\n    else {\n      // TODO add support for missing form elements\n      throw new Error(`val() not supported for ${typeof element}`);\n    }\n  }\n\n  /**\n   * Returns the value of an attribute on the first element.\n   * @param attribute\n   */\n  attr(attribute: string): string | null;\n  /**\n   * Sets an attribute on all elements.\n   * @param attribute the name of the attribute\n   * @param value the value of the attribute\n   */\n  attr(attribute: string, value: string): DOM;\n  attr(attribute: string, value?: string): string | null | DOM {\n    if (arguments.length > 1) {\n      return this.setAttr(attribute, value);\n    }\n    else {\n      return this.getAttr(attribute);\n    }\n  }\n\n  /**\n   * Removes the attribute of the element.\n   * @param attribute\n   */\n  removeAttr(attribute: string) {\n    this.forEach((element) => {\n      element.removeAttribute(attribute);\n    });\n  }\n\n  private getAttr(attribute: string): string | null {\n    return this.elements[0].getAttribute(attribute);\n  }\n\n  private setAttr(attribute: string, value: string): DOM {\n    this.forEach((element) => {\n      element.setAttribute(attribute, value);\n    });\n    return this;\n  }\n\n  /**\n   * Returns the value of a data element on the first element.\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\n   */\n  data(dataAttribute: string): string | null;\n  /**\n   * Sets a data attribute on all elements.\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\n   * @param value the value of the data attribute\n   */\n  data(dataAttribute: string, value: string): DOM;\n  data(dataAttribute: string, value?: string): string | null | DOM {\n    if (arguments.length > 1) {\n      return this.setData(dataAttribute, value);\n    }\n    else {\n      return this.getData(dataAttribute);\n    }\n  }\n\n  private getData(dataAttribute: string): string | null {\n    return this.elements[0].getAttribute('data-' + dataAttribute);\n  }\n\n  private setData(dataAttribute: string, value: string): DOM {\n    this.forEach((element) => {\n      element.setAttribute('data-' + dataAttribute, value);\n    });\n    return this;\n  }\n\n  /**\n   * Appends one or more DOM elements as children to all elements.\n   * @param childElements the chrild elements to append\n   * @returns {DOM}\n   */\n  append(...childElements: DOM[]): DOM {\n    this.forEach((element) => {\n      childElements.forEach((childElement) => {\n        childElement.elements.forEach((_, index) => {\n          element.appendChild(childElement.elements[index]);\n        });\n      });\n    });\n    return this;\n  }\n\n  /**\n   * Removes all elements from the DOM.\n   */\n  remove(): void {\n    this.forEach((element) => {\n      let parent = element.parentNode;\n      if (parent) {\n        parent.removeChild(element);\n      }\n    });\n  }\n\n  /**\n   * Returns the offset of the first element from the document's top left corner.\n   * @returns {Offset}\n   */\n  offset(): Offset {\n    let element = this.elements[0];\n    let elementRect = element.getBoundingClientRect();\n    let htmlRect = document.body.parentElement.getBoundingClientRect();\n\n    // Virtual viewport scroll handling (e.g. pinch zoomed viewports in mobile browsers or desktop Chrome/Edge)\n    // 'normal' zooms and virtual viewport zooms (aka layout viewport) result in different\n    // element.getBoundingClientRect() results:\n    //  - with normal scrolls, the clientRect decreases with an increase in scroll(Top|Left)/page(X|Y)Offset\n    //  - with pinch zoom scrolls, the clientRect stays the same while scroll/pageOffset changes\n    // This means, that the combination of clientRect + scroll/pageOffset does not work to calculate the offset\n    // from the document's upper left origin when pinch zoom is used.\n    // To work around this issue, we do not use scroll/pageOffset but get the clientRect of the html element and\n    // subtract it from the element's rect, which always results in the offset from the document origin.\n    // NOTE: the current way of offset calculation was implemented specifically to track event positions on the\n    // seek bar, and it might break compatibility with jQuery's offset() method. If this ever turns out to be a\n    // problem, this method should be reverted to the old version and the offset calculation moved to the seek bar.\n\n    return {\n      top: elementRect.top - htmlRect.top,\n      left: elementRect.left - htmlRect.left,\n    };\n  }\n\n  /**\n   * Returns the width of the first element.\n   * @returns {number} the width of the first element\n   */\n  width(): number {\n    // TODO check if this is the same as jQuery's width() (probably not)\n    return this.elements[0].offsetWidth;\n  }\n\n  /**\n   * Returns the height of the first element.\n   * @returns {number} the height of the first element\n   */\n  height(): number {\n    // TODO check if this is the same as jQuery's height() (probably not)\n    return this.elements[0].offsetHeight;\n  }\n\n  /**\n   * Returns the size of the first element.\n   * @return {Size} the size of the first element\n   */\n  size(): Size {\n    return { width: this.width(), height: this.height() };\n  }\n\n  /**\n   * Attaches an event handler to one or more events on all elements.\n   * @param eventName the event name (or multiple names separated by space) to listen to\n   * @param eventHandler the event handler to call when the event fires\n   * @returns {DOM}\n   */\n  on(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\n    let events = eventName.split(' ');\n\n    events.forEach((event) => {\n      if (this.elements == null) {\n        this.document.addEventListener(event, eventHandler);\n      }\n      else {\n        this.forEach((element) => {\n          element.addEventListener(event, eventHandler);\n        });\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Removes an event handler from one or more events on all elements.\n   * @param eventName the event name (or multiple names separated by space) to remove the handler from\n   * @param eventHandler the event handler to remove\n   * @returns {DOM}\n   */\n  off(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\n    let events = eventName.split(' ');\n\n    events.forEach((event) => {\n      if (this.elements == null) {\n        this.document.removeEventListener(event, eventHandler);\n      }\n      else {\n        this.forEach((element) => {\n          element.removeEventListener(event, eventHandler);\n        });\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds the specified class(es) to all elements.\n   * @param className the class(es) to add, multiple classes separated by space\n   * @returns {DOM}\n   */\n  addClass(className: string): DOM {\n    this.forEach((element) => {\n      if (element.classList) {\n        const classNames = className.split(' ')\n          .filter(className => className.length > 0);\n\n        if (classNames.length > 0) {\n          element.classList.add(...classNames);\n        }\n      }\n      else {\n        element.className += ' ' + className;\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Removed the specified class(es) from all elements.\n   * @param className the class(es) to remove, multiple classes separated by space\n   * @returns {DOM}\n   */\n  removeClass(className: string): DOM {\n    this.forEach((element) => {\n      if (element.classList) {\n        const classNames = className.split(' ')\n          .filter(className => className.length > 0);\n\n        if (classNames.length > 0) {\n          element.classList.remove(...classNames);\n        }\n      }\n      else {\n        element.className = element.className.replace(\n          new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Checks if any of the elements has the specified class.\n   * @param className the class name to check\n   * @returns {boolean} true if one of the elements has the class attached, else if no element has it attached\n   */\n  hasClass(className: string): boolean {\n    let hasClass = false;\n\n    this.forEach((element) => {\n      if (element.classList) {\n        if (element.classList.contains(className)) {\n          // Since we are inside a handler, we can't just 'return true'. Instead, we save it to a variable\n          // and return it at the end of the function body.\n          hasClass = true;\n        }\n      }\n      else {\n        if (new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)) {\n          // See comment above\n          hasClass = true;\n        }\n      }\n    });\n\n    return hasClass;\n  }\n\n  /**\n   * Returns the value of a CSS property of the first element.\n   * @param propertyName the name of the CSS property to retrieve the value of\n   */\n  css(propertyName: string): string | null;\n  /**\n   * Sets the value of a CSS property on all elements.\n   * @param propertyName the name of the CSS property to set the value for\n   * @param value the value to set for the given CSS property\n   */\n  css(propertyName: string, value: string): DOM;\n  /**\n   * Sets a collection of CSS properties and their values on all elements.\n   * @param propertyValueCollection an object containing pairs of property names and their values\n   */\n  css(propertyValueCollection: CssProperties): DOM;\n  css(propertyNameOrCollection: string | CssProperties, value?: string): string | null | DOM {\n    if (typeof propertyNameOrCollection === 'string') {\n      let propertyName = propertyNameOrCollection;\n\n      if (arguments.length === 2) {\n        return this.setCss(propertyName, value);\n      }\n      else {\n        return this.getCss(propertyName);\n      }\n    }\n    else {\n      let propertyValueCollection = propertyNameOrCollection;\n      return this.setCssCollection(propertyValueCollection);\n    }\n  }\n\n  /**\n   * Removes an inline CSS property if it exists\n   * @param propertyName name of the property to remove\n   * @param elementIndex index of the element whose CSS property should get removed\n   */\n  removeCss(propertyName: string, elementIndex = 0): string {\n    return this.elements[elementIndex].style.removeProperty(propertyName);\n  }\n\n  private getCss(propertyName: string): string | null {\n    return getComputedStyle(this.elements[0])[<any>propertyName];\n  }\n\n  private setCss(propertyName: string, value: string): DOM {\n    this.forEach((element) => {\n      // <any> cast to resolve TS7015: http://stackoverflow.com/a/36627114/370252\n      element.style[<any>propertyName] = value;\n    });\n    return this;\n  }\n\n  private setCssCollection(ruleValueCollection: {[ruleName: string]: string}): DOM {\n    this.forEach((element) => {\n      // http://stackoverflow.com/a/34490573/370252\n      Object.assign(element.style, ruleValueCollection);\n    });\n\n    return this;\n  }\n}\n","import {ErrorMessageMap, ErrorMessageTranslator} from './components/errormessageoverlay';\nimport { ErrorEvent } from 'bitmovin-player';\nimport { MobileV3PlayerErrorEvent, MobileV3SourceErrorEvent } from './mobilev3playerapi';\n\nexport namespace ErrorUtils {\n\n  export const defaultErrorMessages: ErrorMessageMap = {\n    1000: 'Error is unknown',\n    1001: 'The player API is not available after a call to PlayerAPI.destroy.',\n    1100: 'General setup error',\n    1101: 'There was an error when inserting the HTML video element',\n    1102: 'No configuration was provided',\n    1103: 'The license is not valid',\n    1104: 'The the domain-locked player is not authorized to playback on this domain',\n    1105: 'The domain is not allowlisted',\n    1106: 'The license server URL is invalid',\n    1107: 'The impression server URL is invalid',\n    1108: 'Could not initialize a rendering engine',\n    1109: 'The used flash version does not support playback',\n    1110: 'Native Flash is not authorized by a valid Adobe token',\n    1111: 'Flash doesn\\'t have sufficient resources',\n    1112: 'Flash container API not available',\n    1113: 'Protocol not supported. This site has been loaded using \"file\" protocol, but unfortunately this is not supported. Please load the page using a web server (using http or https)',\n    1200: 'General source error',\n    1201: 'No valid source was provided',\n    1202: 'The downloaded manifest is invalid',\n    1203: 'There was no technology detected to playback the provided source',\n    1204: 'The stream type is not supported',\n    1205: 'The forced technology is not supported',\n    1206: 'No stream found for supported technologies.',\n    1207: 'The downloaded segment is empty',\n    1208: 'The manifest could not be loaded',\n    1209: 'Progressive stream type not supported or the stream has an error',\n    1210: 'HLS stream has an error',\n    1211: 'The encryption method is not supported',\n    1300: 'General playback error',\n    1301: 'Video decoder or demuxer had an error with the content',\n    1302: 'General error if Flash renderer has an error',\n    1303: 'Flash doesn\\'t have sufficient resources',\n    1304: 'The transmuxer could not be initialized',\n    1400: 'Network error while downloading',\n    1401: 'The manifest download timed out',\n    1402: 'The segment download timed out',\n    1403: 'The progressive stream download timed out',\n    1404: 'The Certificate could not be loaded',\n    2000: 'General DRM error',\n    2001: 'Required DRM configuration is missing',\n    2002: 'The licensing server URL is missing',\n    2003: 'License request failed',\n    2004: 'Key or KeyId is missing',\n    2005: 'Key size is not supported',\n    2006: 'Unable to instantiate a key system supporting the required combinations',\n    2007: 'Unable to create or initialize key session',\n    2008: 'The MediaKey object could not be created/initialized',\n    2009: 'Key error',\n    2010: 'The key system is not supported',\n    2011: 'The certificate is not valid',\n    2012: 'Invalid header key/value pair for PlayReady license request',\n    2013: 'Content cannot be played back because the output is restricted on this machine',\n    2014: 'DRM error for the Flash renderer',\n    2100: 'General VR error',\n    2101: 'Player technology not compatible with VR playback',\n    3000: 'General module error',\n    3001: 'The definition of the module is invalid (e.g. incomplete).',\n    3002: 'The module definition specifies dependencies but the module is not provided via a function for deferred loading.',\n    3003: 'A module cannot be loaded because it has not been added to the player core.',\n    3004: 'A module cannot be loaded because one or more dependencies are missing.',\n    3100: 'An Advertising module error has occurred. Refer to the attached AdvertisingError.',\n  };\n\n  export const defaultMobileV3ErrorMessageTranslator = (error: MobileV3PlayerErrorEvent | MobileV3SourceErrorEvent) => {\n    return error.message;\n  };\n\n  export const defaultWebErrorMessageTranslator: ErrorMessageTranslator = (error: ErrorEvent) => {\n    const errorMessage = ErrorUtils.defaultErrorMessages[error.code];\n\n    if (errorMessage) {\n      // Use the error message text if there is one\n      return `${errorMessage}\\n(${error.name})`; // default error message style\n    } else {\n      // Fallback to error code/name if no message is defined\n      return `${error.code} ${error.name}`;\n    }\n  };\n}\n","import {ArrayUtils} from './arrayutils';\nimport { Timeout } from './timeout';\n/**\n * Function interface for event listeners on the {@link EventDispatcher}.\n */\nexport interface EventListener<Sender, Args> {\n  (sender: Sender, args: Args): void;\n}\n\n/**\n * Empty type for creating {@link EventDispatcher event dispatchers} that do not carry any arguments.\n */\nexport interface NoArgs {\n}\n\n/**\n * Event args for an event that can be canceled.\n */\nexport interface CancelEventArgs extends NoArgs {\n  /**\n   * Gets or sets a flag whether the event should be canceled.\n   */\n  cancel?: boolean;\n}\n\n/**\n * Public interface that represents an event. Can be used to subscribe to and unsubscribe from events.\n */\nexport interface Event<Sender, Args> {\n  /**\n   * Subscribes an event listener to this event dispatcher.\n   * @param listener the listener to add\n   */\n  subscribe(listener: EventListener<Sender, Args>): void;\n\n  /**\n   * Subscribes an event listener to this event dispatcher that is only called once.\n   * @param listener the listener to add\n   */\n  subscribeOnce(listener: EventListener<Sender, Args>): void;\n\n  /**\n   * Subscribes an event listener to this event dispatcher that will be called at a limited rate with a minimum\n   * interval of the specified milliseconds.\n   * @param listener the listener to add\n   * @param rateMs the rate in milliseconds to which calling of the listeners should be limited\n   */\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number): void;\n\n  /**\n   * Unsubscribes a subscribed event listener from this dispatcher.\n   * @param listener the listener to remove\n   * @returns {boolean} true if the listener was successfully unsubscribed, false if it isn't subscribed on this\n   *   dispatcher\n   */\n  unsubscribe(listener: EventListener<Sender, Args>): boolean;\n}\n\n/**\n * Event dispatcher to subscribe and trigger events. Each event should have its own dispatcher.\n */\nexport class EventDispatcher<Sender, Args> implements Event<Sender, Args> {\n\n  private listeners: EventListenerWrapper<Sender, Args>[] = [];\n\n  constructor() {\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribe(listener: EventListener<Sender, Args>) {\n    this.listeners.push(new EventListenerWrapper(listener));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribeOnce(listener: EventListener<Sender, Args>) {\n    this.listeners.push(new EventListenerWrapper(listener, true));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number) {\n    this.listeners.push(new RateLimitedEventListenerWrapper(listener, rateMs));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  unsubscribe(listener: EventListener<Sender, Args>): boolean {\n    // Iterate through listeners, compare with parameter, and remove if found\n    // NOTE: In case we ever remove all matching listeners instead of just the first, we need to reverse-iterate here\n    for (let i = 0; i < this.listeners.length; i++) {\n      let subscribedListener = this.listeners[i];\n      if (subscribedListener.listener === listener) {\n        subscribedListener.clear();\n        ArrayUtils.remove(this.listeners, subscribedListener);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Removes all listeners from this dispatcher.\n   */\n  unsubscribeAll(): void {\n    // In case of RateLimitedEventListenerWrapper we need to make sure that the timeout callback won't be called\n    for (let listener of this.listeners) {\n      listener.clear();\n    }\n\n    this.listeners = [];\n  }\n\n  /**\n   * Dispatches an event to all subscribed listeners.\n   * @param sender the source of the event\n   * @param args the arguments for the event\n   */\n  dispatch(sender: Sender, args: Args = null) {\n    let listenersToRemove = [];\n\n    // Call every listener\n    // We iterate over a copy of the array of listeners to avoid the case where events are not fired on listeners when\n    // listeners are unsubscribed from within the event handlers during a dispatch (because the indices change and\n    // listeners are shifted within the array).\n    // This means that listener x+1 will still be called if unsubscribed from within the handler of listener x, as well\n    // as listener y+1 will not be called when subscribed from within the handler of listener y.\n    // Array.slice(0) is the fastest array copy method according to: https://stackoverflow.com/a/21514254/370252\n    const listeners = this.listeners.slice(0);\n    for (let listener of listeners) {\n      listener.fire(sender, args);\n\n      if (listener.isOnce()) {\n        listenersToRemove.push(listener);\n      }\n    }\n\n    // Remove one-time listener\n    for (let listenerToRemove of listenersToRemove) {\n      ArrayUtils.remove(this.listeners, listenerToRemove);\n    }\n  }\n\n  /**\n   * Returns the event that this dispatcher manages and on which listeners can subscribe and unsubscribe event handlers.\n   * @returns {Event}\n   */\n  getEvent(): Event<Sender, Args> {\n    // For now, just cast the event dispatcher to the event interface. At some point in the future when the\n    // codebase grows, it might make sense to split the dispatcher into separate dispatcher and event classes.\n    return <Event<Sender, Args>>this;\n  }\n}\n\n/**\n * A basic event listener wrapper to manage listeners within the {@link EventDispatcher}. This is a 'private' class\n * for internal dispatcher use and it is therefore not exported.\n */\nclass EventListenerWrapper<Sender, Args> {\n\n  private eventListener: EventListener<Sender, Args>;\n  private once: boolean;\n\n  constructor(listener: EventListener<Sender, Args>, once: boolean = false) {\n    this.eventListener = listener;\n    this.once = once;\n  }\n\n  /**\n   * Returns the wrapped event listener.\n   * @returns {EventListener<Sender, Args>}\n   */\n  get listener(): EventListener<Sender, Args> {\n    return this.eventListener;\n  }\n\n  /**\n   * Fires the wrapped event listener with the given arguments.\n   * @param sender\n   * @param args\n   */\n  fire(sender: Sender, args: Args) {\n    this.eventListener(sender, args);\n  }\n\n  /**\n   * Checks if this listener is scheduled to be called only once.\n   * @returns {boolean} once if true\n   */\n  isOnce(): boolean {\n    return this.once;\n  }\n\n  clear(): void {\n  }\n}\n\ninterface EventAttributes<Sender, Args> {\n  sender: Sender;\n  args: Args;\n}\n\n/**\n * Extends the basic {@link EventListenerWrapper} with rate-limiting functionality.\n */\nclass RateLimitedEventListenerWrapper<Sender, Args> extends EventListenerWrapper<Sender, Args> {\n\n  private readonly rateMs: number;\n  private readonly rateLimitingEventListener: EventListener<Sender, Args>;\n\n  // save last seen event attributes\n  private lastSeenEvent: EventAttributes<Sender, Args>;\n\n  private rateLimitTimout: Timeout;\n\n  constructor(listener: EventListener<Sender, Args>, rateMs: number) {\n    super(listener); // sets the event listener sink\n\n    this.rateMs = rateMs;\n\n    // starting limiting the events to the given value\n    const startRateLimiting = () => {\n      this.rateLimitTimout.start();\n    };\n\n    // timout for limiting the events\n    this.rateLimitTimout = new Timeout(this.rateMs, () => {\n      if (this.lastSeenEvent) {\n        this.fireSuper(this.lastSeenEvent.sender, this.lastSeenEvent.args);\n        startRateLimiting(); // start rateLimiting again to keep rate limit active even after firing the last seen event\n        this.lastSeenEvent = null;\n      }\n    });\n\n    // In case the events stopping during the rateLimiting we need to track the last seen one and delegate after the\n    // rate limiting is finished. This prevents missing the last update due to the rate limit.\n    this.rateLimitingEventListener = (sender: Sender, args: Args) => {\n      // only fire events if the rateLimiting is not running\n      if (this.shouldFireEvent()) {\n        this.fireSuper(sender, args);\n        startRateLimiting();\n        return;\n      }\n\n      this.lastSeenEvent = {\n        sender: sender,\n        args: args,\n      };\n    };\n  }\n\n  private shouldFireEvent(): boolean {\n    return !this.rateLimitTimout.isActive();\n  }\n\n  private fireSuper(sender: Sender, args: Args) {\n    // Fire the actual external event listener\n    super.fire(sender, args);\n  }\n\n  fire(sender: Sender, args: Args) {\n    // Fire the internal rate-limiting listener instead of the external event listener\n    this.rateLimitingEventListener(sender, args);\n  }\n\n  clear(): void {\n    super.clear();\n    this.rateLimitTimout.clear();\n  }\n}\n","const FocusVisibleCssClassName = '{{PREFIX}}-focus-visible';\n\nexport class FocusVisibilityTracker {\n  private readonly eventHandlerMap: { [eventName: string]: EventListenerOrEventListenerObject };\n  private lastInteractionWasKeyboard: boolean = true;\n\n  constructor(private bitmovinUiPrefix: string) {\n    this.eventHandlerMap = {\n      mousedown: this.onMouseOrPointerOrTouch,\n      pointerdown: this.onMouseOrPointerOrTouch,\n      touchstart: this.onMouseOrPointerOrTouch,\n      keydown: this.onKeyDown,\n      focus: this.onFocus,\n      blur: this.onBlur,\n    };\n    this.registerEventListeners();\n  }\n\n  private onKeyDown = (e: KeyboardEvent) => {\n    if (e.metaKey || e.altKey || e.ctrlKey) {\n      return;\n    }\n\n    this.lastInteractionWasKeyboard = true;\n  };\n\n  private onMouseOrPointerOrTouch = () => (this.lastInteractionWasKeyboard = false);\n\n  private onFocus = ({ target: element }: FocusEvent) => {\n    if (\n      this.lastInteractionWasKeyboard &&\n      isHtmlElement(element) &&\n      isBitmovinUi(element, this.bitmovinUiPrefix) &&\n      !element.classList.contains(FocusVisibleCssClassName)\n    ) {\n      element.classList.add(FocusVisibleCssClassName);\n    }\n  };\n\n  private onBlur = ({ target: element }: FocusEvent) => {\n    if (isHtmlElement(element)) {\n      element.classList.remove(FocusVisibleCssClassName);\n    }\n  };\n\n  private registerEventListeners(): void {\n    for (const event in this.eventHandlerMap) {\n      document.addEventListener(event, this.eventHandlerMap[event], true);\n    }\n  }\n\n  private unregisterEventListeners(): void {\n    for (const event in this.eventHandlerMap) {\n      document.removeEventListener(event, this.eventHandlerMap[event], true);\n    }\n  }\n\n  public release(): void {\n    this.unregisterEventListeners();\n  }\n}\n\nfunction isBitmovinUi(element: Element, bitmovinUiPrefix: string): boolean {\n  return element.id.indexOf(bitmovinUiPrefix) === 0;\n}\n\nfunction isHtmlElement(element: unknown): element is HTMLElement & { classList: DOMTokenList } {\n  return (\n    element instanceof HTMLElement && element.classList instanceof DOMTokenList\n  );\n}\n","import { PlayerAPI } from 'bitmovin-player';\n/**\n * The Group Playback API offers control over synchronized playback of a group of clients, e.g. for Apple SharePlay\n * sessions.\n\n * Note: The API currently only covers the immediate needs of the iOS SDK in combination with our UI which is regarding\n * temporarily suspending synchronization of the player from the group. But it is open to be extended as needed in the\n * future.\n */\n\n/**\n * Reason for suspending the synchronization with the group.\n */\nexport enum GroupPlaybackSuspensionReason {\n  UserIsScrubbing = 'userIsScrubbing',\n}\n\n/**\n * A representation of a temporary break in participation.\n */\nexport interface GroupPlaybackSuspension {\n  /**\n   * The reason for the suspension.\n   */\n  reason: GroupPlaybackSuspensionReason;\n\n  /**\n   * A unique identifier.\n   */\n  id: string;\n}\n\n/**\n * Options to be considered upon ending a suspension.\n */\ninterface EndGroupPlaybackSuspensionOptions {\n  /**\n   * A proposed time for the group to seek to.\n   */\n  proposedPlaybackTime?: number;\n}\n\n/**\n * Group Playback API offering control over the player's participation in synchronized playback of a group of clients.\n * For example, an Apple SharePlay session.\n */\ninterface GroupPlaybackAPI {\n  /**\n   * Begins a new suspension.\n   *\n   * Temporarily suspends the local player's synchronization with the group. While suspended, any local playback control\n   * action (e.g. play, pause, seek) will not be forwarded to the group and any action originating from another group\n   * participant will not be performed on the local player.\n   *\n   * @remarks\n   * It is possible for multiple suspensions to exist exist simultaneously with different suspension reasons. The player\n   * will re-synchronize with the group once all existing suspensions have ended.\n   *\n   * @param reason - The reason for the suspension.\n   * @returns A suspension object.\n   */\n  beginSuspension(reason: GroupPlaybackSuspensionReason): GroupPlaybackSuspension;\n\n  /**\n   * Ends the given suspension.\n   *\n   * @param suspension - The suspension to be ended.\n   * @param options - Optional. Options to be considered when ending the suspension, e.g. a proposed seek time for the group.\n   */\n  endSuspension(suspension: GroupPlaybackSuspension, options?: EndGroupPlaybackSuspensionOptions): void;\n\n  /**\n   * Whether the player is currently participating in a group playback session.\n   */\n  hasJoined(): boolean;\n\n  /**\n   * Whether the player is currently suspending synchronization with the group.\n   * Can only return true if `hasJoined()` also is true.\n   */\n  isSuspended(): boolean;\n}\n\n\nexport interface ExtendedPlayerAPI extends PlayerAPI {\n  /**\n   * Group Playback API\n   *\n   * @remarks\n   * This API is optional as not every platform supports group playback.\n   */\n  groupPlayback?: GroupPlaybackAPI;\n}\n","export namespace Guid {\n\n  let guid = 1;\n\n  export function next() {\n    return guid++;\n  }\n}\n","import {DOM} from './dom';\n\nexport interface ImageLoadedCallback {\n  (url: string, width: number, height: number): void;\n}\n\ninterface ImageLoaderState {\n  url: string;\n  image: DOM;\n  loadedCallback: ImageLoadedCallback;\n  loaded: boolean;\n  width: number;\n  height: number;\n}\n\n/**\n * Tracks the loading state of images.\n */\nexport class ImageLoader {\n\n  private state: { [url: string]: ImageLoaderState; } = {};\n\n  /**\n   * Loads an image and call the callback once the image is loaded. If the image is already loaded, the callback\n   * is called immediately, else it is called once loading has finished. Calling this method multiple times for the\n   * same image while it is loading calls only let callback passed into the last call.\n   * @param url The url to the image to load\n   * @param loadedCallback The callback that is called when the image is loaded\n   */\n  load(url: string, loadedCallback: ImageLoadedCallback): void {\n    if (!this.state[url]) {\n      // When the image was never attempted to be loaded before, we create a state and store it in the state map\n      // for later use when the same image is requested to be loaded again.\n      let state: ImageLoaderState = {\n        url: url,\n        image: new DOM('img', {}),\n        loadedCallback: loadedCallback,\n        loaded: false,\n        width: 0,\n        height: 0,\n      };\n      this.state[url] = state;\n\n      // Listen to the load event, update the state and call the callback once the image is loaded\n      state.image.on('load', (e) => {\n        state.loaded = true;\n        state.width = (<HTMLImageElement>state.image.get(0)).width;\n        state.height = (<HTMLImageElement>state.image.get(0)).height;\n\n        this.callLoadedCallback(state);\n      });\n\n      // Set the image URL to start the loading\n      state.image.attr('src', state.url);\n    } else {\n      // We have a state for the requested image, so it is either already loaded or currently loading\n      let state = this.state[url];\n\n      // We overwrite the callback to make sure that only the callback of the latest call gets executed.\n      // Earlier callbacks become invalid once a new load call arrives, and they are not called as long as the image\n      // is not loaded.\n      state.loadedCallback = loadedCallback;\n\n      // When the image is already loaded, we directly execute the callback instead of waiting for the load event\n      if (state.loaded) {\n        this.callLoadedCallback(state);\n      }\n    }\n  }\n\n  private callLoadedCallback(state: ImageLoaderState): void {\n    state.loadedCallback(state.url, state.width, state.height);\n  }\n}\n","import vocabularyDe from './languages/de.json';\nimport vocabularyEn from './languages/en.json';\nimport vocabularyEs from './languages/es.json';\nimport { LocalizationConfig } from '../uimanager.js';\n\nexport const defaultVocabularies: Vocabularies = {\n  'en': vocabularyEn,\n  'de': vocabularyDe,\n  'es': vocabularyEs,\n};\n\nconst defaultLocalizationConfig: LocalizationConfig = {\n  language: 'en',\n  vocabularies: defaultVocabularies,\n};\n\ntype Localizer = () => string;\nexport type LocalizableText = string | Localizer;\n\ninterface Vocabulary {\n  'settings.video.quality': string;\n  'settings.audio.quality': string;\n  'settings.audio.track': string;\n  'settings.audio.mute': string;\n  'settings.audio.volume': string;\n  'settings.subtitles': string;\n  'settings.subtitles.font.color': string;\n  'settings.subtitles.font.opacity': string;\n  'settings.subtitles.background.color': string;\n  'settings.subtitles.background.opacity': string;\n  'settings.subtitles.font.size': string;\n  'settings.subtitles.characterEdge': string;\n  'settings.subtitles.characterEdge.raised': string;\n  'settings.subtitles.characterEdge.depressed': string;\n  'settings.subtitles.characterEdge.uniform': string;\n  'settings.subtitles.characterEdge.dropshadowed': string;\n  'settings.subtitles.font.family': string;\n  'settings.subtitles.font.family.monospacedserif': string;\n  'settings.subtitles.font.family.proportionalserif': string;\n  'settings.subtitles.font.family.monospacedsansserif': string;\n  'settings.subtitles.font.family.proportionalsansserif': string;\n  'settings.subtitles.font.family.casual': string;\n  'settings.subtitles.font.family.cursive': string;\n  'settings.subtitles.font.family.smallcapital': string;\n  'settings.subtitles.window.color': string;\n  'settings.subtitles.window.opacity': string;\n  'play': string;\n  'settings.time.hours': string;\n  'settings.time.minutes': string;\n  'settings.time.seconds': string;\n  'colors.white': string;\n  'colors.black': string;\n  'colors.red': string;\n  'colors.green': string;\n  'colors.blue': string;\n  'colors.cyan': string;\n  'colors.yellow': string;\n  'colors.magenta': string;\n  'percent': string;\n  'settings': string;\n  'ads.remainingTime': string;\n  'pictureInPicture': string;\n  'appleAirplay': string;\n  'googleCast': string;\n  'vr': string;\n  'off': string;\n  'auto': string;\n  'back': string;\n  'reset': string;\n  'replay': string;\n  'normal': string;\n  'default': string;\n  'open': string;\n  'close': string;\n  'fullscreen': string;\n  'speed': string;\n  'playPause': string;\n  'live': string;\n  'subtitle.example': string;\n  'subtitle.select': string;\n  'playingOn': string;\n  'connectingTo': string;\n  'watermarkLink': string;\n  'controlBar': string;\n  'player': string;\n  'seekBar': string;\n  'seekBar.value': string;\n  'seekBar.timeshift': string;\n  'seekBar.durationText': string;\n}\n\nexport type CustomVocabulary<V> = V & Partial<Vocabulary>;\n\nexport interface Vocabularies {\n  [key: string]: CustomVocabulary<Record<string, string>>;\n}\n\nclass I18n {\n  private language: string;\n  private vocabulary: CustomVocabulary<Record<string, string>>;\n\n  constructor(config: LocalizationConfig) {\n    this.setConfig(config);\n  }\n\n  public setConfig(config: LocalizationConfig) {\n    const mergedConfig = { ...defaultLocalizationConfig, ...config };\n    const detectBrowserLanguage = mergedConfig.language === 'auto';\n    const vocabularies = this.mergeVocabulariesWithDefaultVocabularies(mergedConfig.vocabularies);\n    this.initializeLanguage(mergedConfig.language, detectBrowserLanguage, vocabularies);\n    this.initializeVocabulary(vocabularies);\n  }\n\n  private static containsLanguage(vocabularies: Vocabularies, language: string) {\n    return vocabularies.hasOwnProperty(language);\n  }\n\n  private mergeVocabulariesWithDefaultVocabularies(vocabularies: Vocabularies = {}) {\n    const rawVocabularies: Vocabularies = { ...defaultVocabularies, ...vocabularies };\n    return Object.keys(rawVocabularies).reduce((mergedVocabularies, language) => {\n      let vocabulary = rawVocabularies[language];\n      if (I18n.containsLanguage(defaultVocabularies, language) && I18n.containsLanguage(vocabularies, language)) {\n        vocabulary = { ...defaultVocabularies[language], ...vocabularies[language] };\n      }\n      return { ...mergedVocabularies, [language]: vocabulary };\n    }, {});\n  }\n\n  private initializeLanguage(\n    language: string,\n    browserLanguageDetectionEnabled: boolean,\n    vocabularies: Vocabularies,\n  ) {\n    if (browserLanguageDetectionEnabled) {\n      const userLanguage = window.navigator.language;\n\n      if (I18n.containsLanguage(vocabularies, userLanguage)) {\n        this.language = userLanguage;\n        return;\n      }\n      const shortenedUserLanguage = userLanguage.slice(0, 2);\n      if (I18n.containsLanguage(vocabularies, shortenedUserLanguage)) {\n        this.language = shortenedUserLanguage;\n        return;\n      }\n    }\n\n    this.language = language;\n  }\n\n  private initializeVocabulary(vocabularies: Vocabularies) {\n    this.vocabulary = ['en', this.language]\n      .reduce((vocab, lang) => ({ ...vocab, ...(vocabularies[lang] || {}) }), {});\n  }\n\n  private replaceVariableWithPlaceholderIfExists(text: string, config: any) {\n    const matches = text.match(new RegExp('{[a-zA-Z0-9]+}', 'g'));\n    if (matches.length === 0) {\n      return text;\n    }\n\n    return matches\n      .map((m: string) => ({ match: m, key: m.slice(1, -1) }))\n      .reduce((str, { key, match }) => config.hasOwnProperty(key) ? str.replace(match, config[key]) : str, text);\n  }\n\n  public getLocalizer<V extends CustomVocabulary<Record<string, string>> = CustomVocabulary<Record<string, string>>>(\n    key: keyof V,\n    config?: Record<string, string | number>,\n  ): Localizer {\n    return () => {\n      if (key == null) { // because sometimes we call toDomElement() without configuring the component or setting text...\n        return undefined;\n      }\n      let vocabularyString = this.vocabulary[key as string];\n\n      if (vocabularyString == null) {\n        vocabularyString = key as string;\n      }\n\n      if (config != null) {\n        vocabularyString = this.replaceVariableWithPlaceholderIfExists(vocabularyString, config);\n      }\n\n      return vocabularyString;\n    };\n  }\n\n  public performLocalization(text: LocalizableText) {\n    return typeof text === 'function' ? text() : text;\n  }\n}\n\nexport const i18n = new I18n(defaultLocalizationConfig);\n","module.exports={\n  \"settings.video.quality\": \"Videoqualität\",\n  \"settings.audio.quality\": \"Audioqualität\",\n  \"settings.audio.track\": \"Audiospur\",\n  \"speed\": \"Geschwindigkeit\",\n  \"play\": \"Abspielen\",\n  \"pause\": \"Pause\",\n  \"playPause\": \"Abspielen/Pause\",\n  \"open\": \"öffnen\",\n  \"close\": \"Schließen\",\n  \"settings.audio.mute\": \"Stummschaltung\",\n  \"settings.audio.volume\": \"Lautstärke\",\n  \"pictureInPicture\": \"Bild im Bild\",\n  \"appleAirplay\": \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\": \"VR\",\n  \"settings\": \"Einstellungen\",\n  \"fullscreen\": \"Vollbild\",\n  \"off\": \"aus\",\n  \"settings.subtitles\": \"Untertitel\",\n  \"settings.subtitles.font.size\": \"Größe\",\n  \"settings.subtitles.font.family\": \"Schriftart\",\n  \"settings.subtitles.font.color\": \"Farbe\",\n  \"settings.subtitles.font.opacity\": \"Deckkraft\",\n  \"settings.subtitles.characterEdge\": \"Ränder\",\n  \"settings.subtitles.background.color\": \"Hintergrundfarbe\",\n  \"settings.subtitles.background.opacity\": \"Hintergrunddeckkraft\",\n  \"settings.subtitles.window.color\": \"Hintergrundfarbe\",\n  \"settings.subtitles.window.opacity\": \"Hintergrunddeckkraft\",\n  \"settings.time.hours\": \"Stunden\",\n  \"settings.time.minutes\": \"Minuten\",\n  \"settings.time.seconds\": \"Sekunden\",\n  \"back\": \"Zurück\",\n  \"reset\": \"Zurücksetzen\",\n  \"replay\": \"Wiederholen\",\n  \"ads.remainingTime\": \"Diese Anzeige endet in {remainingTime} Sekunden\",\n  \"default\": \"standard\",\n  \"colors.white\": \"weiß\",\n  \"colors.black\": \"schwarz\",\n  \"colors.red\": \"rot\",\n  \"colors.green\": \"grün\",\n  \"colors.blue\": \"blau\",\n  \"colors.yellow\": \"gelb\",\n  \"subtitle.example\": \"Beispiel Untertitel\",\n  \"subtitle.select\": \"Untertitel auswählen\",\n  \"playingOn\": \"Spielt auf <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Verbindung mit <strong>{castDeviceName}</strong> wird hergestellt...\",\n  \"watermarkLink\": \"Link zum Homepage\",\n  \"controlBar\": \"Videoplayer Kontrollen\",\n  \"player\": \"Video player\",\n  \"seekBar\": \"Video-Timeline\",\n  \"seekBar.value\": \"Wert\",\n  \"seekBar.timeshift\": \"Timeshift\",\n  \"seekBar.durationText\": \"aus\"\n}\n","module.exports={\n  \"settings.video.quality\": \"Video Quality\",\n  \"settings.audio.quality\": \"Audio Quality\",\n  \"settings.audio.track\": \"Audio Track\",\n  \"settings.audio.mute\": \"Mute\",\n  \"settings.audio.volume\": \"Volume\",\n  \"settings.nextepisode\": \"Next Episode\",\n  \"settings.rated\": \"Rated\",\n  \"settings.subtitles.window.color\": \"Window color\",\n  \"settings.subtitles.window.opacity\": \"Window opacity\",\n  \"settings.subtitles\": \"Closed Captions\",\n  \"settings.subtitles.on\": \"On\",\n  \"settings.subtitles.off\": \"Off\",\n  \"settings.subtitles.font.color\": \"Font color\",\n  \"settings.subtitles.font.opacity\": \"Font opacity\",\n  \"settings.subtitles.background.color\": \"Background color\",\n  \"settings.subtitles.background.opacity\": \"Background opacity\",\n  \"colors.white\": \"white\",\n  \"colors.black\": \"black\",\n  \"colors.red\": \"red\",\n  \"colors.green\": \"green\",\n  \"colors.blue\": \"blue\",\n  \"colors.cyan\": \"cyan\",\n  \"colors.yellow\": \"yellow\",\n  \"colors.magenta\": \"magenta\",\n  \"percent\": \"{value}%\",\n  \"settings.subtitles.font.size\": \"Size\",\n  \"settings.subtitles.characterEdge\": \"Character edge\",\n  \"settings.subtitles.characterEdge.raised\": \"raised\",\n  \"settings.subtitles.characterEdge.depressed\": \"depressed\",\n  \"settings.subtitles.characterEdge.uniform\": \"uniform\",\n  \"settings.subtitles.characterEdge.dropshadowed\": \"drop shadowed\",\n  \"settings.subtitles.font.family\": \"Font family\",\n  \"settings.subtitles.font.family.monospacedserif\": \"monospaced serif\",\n  \"settings.subtitles.font.family.proportionalserif\": \"proportional serif\",\n  \"settings.subtitles.font.family.monospacedsansserif\": \"monospaced sans serif\",\n  \"settings.subtitles.font.family.proportionalsansserif\": \"proportional sans serif\",\n  \"settings.subtitles.font.family.casual\": \"casual\",\n  \"settings.subtitles.font.family.cursive\": \"cursive\",\n  \"settings.subtitles.font.family.smallcapital\": \"small capital\",\n  \"settings.time.hours\": \"Hours\",\n  \"settings.time.minutes\": \"Minutes\",\n  \"settings.time.seconds\": \"Seconds\",\n  \"ads.remainingTime\": \"This ad will end in {remainingTime} seconds.\",\n  \"settings\": \"Settings\",\n  \"fullscreen\": \"Fullscreen\",\n  \"speed\": \"Speed\",\n  \"playPause\": \"Play/Pause\",\n  \"play\": \"Play\",\n  \"pause\": \"Pause\",\n  \"open\": \"open\",\n  \"close\": \"Close\",\n  \"pictureInPicture\": \"Picture-in-Picture\",\n  \"appleAirplay\": \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\": \"VR\",\n  \"off\": \"off\",\n  \"auto\": \"auto\",\n  \"back\": \"Back\",\n  \"reset\": \"Reset\",\n  \"replay\": \"Replay\",\n  \"normal\": \"normal\",\n  \"default\": \"default\",\n  \"live\": \"Live\",\n  \"subtitle.example\": \"example subtitle\",\n  \"subtitle.select\": \"Select subtitle\",\n  \"playingOn\": \"Playing on <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Connecting to <strong>{castDeviceName}</strong>...\",\n  \"watermarkLink\": \"Link to Homepage\",\n  \"controlBar\": \"Video player controls\",\n  \"player\": \"Video player\",\n  \"seekBar\": \"Video timeline\",\n  \"seekBar.value\": \"Value\",\n  \"seekBar.timeshift\": \"Timeshift\",\n  \"seekBar.durationText\": \"out of\"\n}\n","module.exports={\n  \"settings.video.quality\": \"Calidad de Video\",\n  \"settings.audio.quality\": \"Calidad de Audio\",\n  \"settings.audio.track\": \"Pista de Audio\",\n  \"settings.audio.mute\" : \"Silencio\",\n  \"settings.audio.volume\" : \"Volumen\",\n  \"settings.subtitles.window.color\" : \"color de Ventana\",\n  \"settings.subtitles.window.opacity\" : \"opacidad de Ventana\",\n  \"settings.subtitles\" : \"Subtítulos\",\n  \"settings.subtitles.font.color\" : \"color de Fuente\",\n  \"settings.subtitles.font.opacity\" : \"opacidad de Fuente\",\n  \"settings.subtitles.background.color\" : \"color de Fondo\",\n  \"settings.subtitles.background.opacity\": \"opacidad de Fondo\",\n  \"colors.white\": \"blanco\",\n  \"colors.black\": \"negro\",\n  \"colors.red\": \"rojo\",\n  \"colors.green\": \"verde\",\n  \"colors.blue\": \"azul\",\n  \"colors.cyan\": \"cian\",\n  \"colors.yellow\": \"amarillo\",\n  \"colors.magenta\": \"magenta\",\n  \"percent\": \"{value}%\",\n  \"settings.subtitles.font.size\": \"tamaño de Fuente\",\n  \"settings.subtitles.characterEdge\": \"borde del Caracter\",\n  \"settings.subtitles.characterEdge.raised\": \"alzado\",\n  \"settings.subtitles.characterEdge.depressed\": \"discreto\",\n  \"settings.subtitles.characterEdge.uniform\": \"uniforme\",\n  \"settings.subtitles.characterEdge.dropshadowed\": \"sombreado\",\n  \"settings.subtitles.font.family\": \"tipo de Fuente\",\n  \"settings.subtitles.font.family.monospacedserif\": \"monospaced serif\",\n  \"settings.subtitles.font.family.proportionalserif\": \"proportional serif\",\n  \"settings.subtitles.font.family.monospacedsansserif\": \"monospaced sans serif\",\n  \"settings.subtitles.font.family.proportionalsansserif\": \"proportional sans serif\",\n  \"settings.subtitles.font.family.casual\": \"casual\",\n  \"settings.subtitles.font.family.cursive\": \"cursiva\",\n  \"settings.subtitles.font.family.smallcapital\": \"small capital\",\n  \"settings.time.hours\": \"Horas\",\n  \"settings.time.minutes\": \"Minutos\",\n  \"settings.time.seconds\": \"Segundos\",\n  \"ads.remainingTime\": \"Este anuncio acabará en {remainingTime} segundos.\",\n  \"settings\": \"Configuración\",\n  \"fullscreen\" : \"Pantalla Completa\",\n  \"speed\": \"Velocidad\",\n  \"playPause\" : \"Reproducir/Pausa\",\n  \"play\": \"Reproducir\",\n  \"pause\": \"Pausa\",\n  \"open\": \"Abrir\",\n  \"close\": \"Cerrar\",\n  \"pictureInPicture\": \"Imagen en Imagen\",\n  \"appleAirplay\" : \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\" : \"VR\",\n  \"off\": \"off\",\n  \"auto\": \"auto\",\n  \"back\" : \"Atrás\",\n  \"reset\": \"Reiniciar\",\n  \"replay\": \"Rebobinar\",\n  \"normal\": \"normal\",\n  \"default\": \"predeterminado\",\n  \"live\": \"Directo\",\n  \"subtitle.example\": \"Ejemplo de Subtítulo\",\n  \"subtitle.select\": \"Seleccionar subtítulo\",\n  \"playingOn\": \"Reproduciendo en <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Conectando a <strong>{castDeviceName}</strong>...\",\n  \"watermarkLink\": \"Enlace al inicio\",\n  \"controlBar\": \"Controles del Reproductor\",\n  \"player\": \"Reproductor de Video\",\n  \"seekBar\": \"Línea de Tiempo\",\n  \"seekBar.value\": \"posición\",\n  \"seekBar.timeshift\": \"cambio de posición\",\n  \"seekBar.durationText\": \"de\"\n}","export const version: string = '{{VERSION}}';\n// Management\nexport { UIManager, UIInstanceManager } from './uimanager';\n// Factories\nexport { UIFactory } from './uifactory';\nexport { DemoFactory } from './demofactory';\n// Utils\nexport { ArrayUtils } from './arrayutils';\nexport { StringUtils } from './stringutils';\nexport { PlayerUtils } from './playerutils';\nexport { UIUtils } from './uiutils';\nexport { BrowserUtils } from './browserutils';\nexport { StorageUtils } from './storageutils';\nexport { ErrorUtils } from './errorutils';\n// Localization\nexport { i18n } from './localization/i18n';\n// Spatial Navigation\nexport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\nexport { NavigationGroup } from './spatialnavigation/navigationgroup';\nexport { RootNavigationGroup } from './spatialnavigation/rootnavigationgroup';\nexport { ListNavigationGroup, ListOrientation } from './spatialnavigation/ListNavigationGroup';\n// Components\nexport { Button } from './components/button';\nexport { ControlBar } from './components/controlbar';\nexport { FullscreenToggleButton } from './components/fullscreentogglebutton';\nexport { HugePlaybackToggleButton } from './components/hugeplaybacktogglebutton';\nexport { PlaybackTimeLabel, PlaybackTimeLabelMode } from './components/playbacktimelabel';\nexport { PlaybackToggleButton } from './components/playbacktogglebutton';\nexport { SeekBar } from './components/seekbar';\nexport { SelectBox } from './components/selectbox';\nexport { ItemSelectionList } from './components/itemselectionlist';\nexport { SettingsPanel } from './components/settingspanel';\nexport { SettingsToggleButton } from './components/settingstogglebutton';\nexport { ToggleButton } from './components/togglebutton';\nexport { VideoQualitySelectBox } from './components/videoqualityselectbox';\nexport { VolumeToggleButton } from './components/volumetogglebutton';\nexport { VRToggleButton } from './components/vrtogglebutton';\nexport { Watermark } from './components/watermark';\nexport { UIContainer } from './components/uicontainer';\nexport { Container } from './components/container';\nexport { Label } from './components/label';\nexport { AudioQualitySelectBox } from './components/audioqualityselectbox';\nexport { AudioTrackSelectBox } from './components/audiotrackselectbox';\nexport { CastStatusOverlay } from './components/caststatusoverlay';\nexport { CastToggleButton } from './components/casttogglebutton';\nexport { Component } from './components/component';\nexport { ErrorMessageOverlay } from './components/errormessageoverlay';\nexport { RecommendationOverlay } from './components/recommendationoverlay';\nexport { SeekBarLabel } from './components/seekbarlabel';\nexport { SubtitleOverlay } from './components/subtitleoverlay';\nexport { SubtitleSelectBox } from './components/subtitleselectbox';\nexport { TitleBar } from './components/titlebar';\nexport { VolumeControlButton } from './components/volumecontrolbutton';\nexport { ClickOverlay } from './components/clickoverlay';\nexport { AdSkipButton } from './components/adskipbutton';\nexport { AdMessageLabel } from './components/admessagelabel';\nexport { AdClickOverlay } from './components/adclickoverlay';\nexport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\nexport { HugeReplayButton } from './components/hugereplaybutton';\nexport { BufferingOverlay } from './components/bufferingoverlay';\nexport { CastUIContainer } from './components/castuicontainer';\nexport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\nexport { CloseButton } from './components/closebutton';\nexport { MetadataLabel, MetadataLabelContent } from './components/metadatalabel';\nexport { AirPlayToggleButton } from './components/airplaytogglebutton';\nexport { VolumeSlider } from './components/volumeslider';\nexport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\nexport { Spacer } from './components/spacer';\nexport { BackgroundColorSelectBox } from './components/subtitlesettings/backgroundcolorselectbox';\nexport { BackgroundOpacitySelectBox } from './components/subtitlesettings/backgroundopacityselectbox';\nexport { CharacterEdgeSelectBox } from './components/subtitlesettings/characteredgeselectbox';\nexport { FontColorSelectBox } from './components/subtitlesettings/fontcolorselectbox';\nexport { FontFamilySelectBox } from './components/subtitlesettings/fontfamilyselectbox';\nexport { FontOpacitySelectBox } from './components/subtitlesettings/fontopacityselectbox';\nexport { FontSizeSelectBox } from './components/subtitlesettings/fontsizeselectbox';\nexport { SubtitleSettingSelectBox } from './components/subtitlesettings/subtitlesettingselectbox';\nexport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\nexport { WindowColorSelectBox } from './components/subtitlesettings/windowcolorselectbox';\nexport { WindowOpacitySelectBox } from './components/subtitlesettings/windowopacityselectbox';\nexport { SubtitleSettingsResetButton } from './components/subtitlesettings/subtitlesettingsresetbutton';\nexport { ListBox } from './components/listbox';\nexport { SubtitleListBox } from './components/subtitlelistbox';\nexport { AudioTrackListBox } from './components/audiotracklistbox';\nexport { SettingsPanelPage } from './components/settingspanelpage';\nexport { SettingsPanelPageBackButton } from './components/settingspanelpagebackbutton';\nexport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\nexport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\nexport { SettingsPanelItem } from './components/settingspanelitem';\nexport { ReplayButton } from './components/replaybutton';\n\n// Object.assign polyfill for ES5/IE9\n// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nif (typeof Object.assign !== 'function') {\n  Object.assign = function (target: any) {\n    'use strict';\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (let index = 1; index < arguments.length; index++) {\n      let source = arguments[index];\n      if (source != null) {\n        for (let key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n}\n","import { PlayerAPI, PlayerEvent, PlayerEventBase, PlayerEventCallback } from 'bitmovin-player';\nimport { WrappedPlayer } from './uimanager';\n\nexport enum MobileV3PlayerEvent {\n  SourceError = 'sourceerror',\n  PlayerError = 'playererror',\n  PlaylistTransition = 'playlisttransition',\n}\n\nexport interface MobileV3PlayerErrorEvent extends PlayerEventBase {\n  code: number;\n  message: string;\n}\n\nexport interface MobileV3SourceErrorEvent extends PlayerEventBase {\n  code: number;\n  message: string;\n}\n\nexport type MobileV3PlayerEventType = PlayerEvent | MobileV3PlayerEvent;\n\nexport interface MobileV3PlayerAPI extends PlayerAPI {\n  on(eventType: MobileV3PlayerEventType, callback: PlayerEventCallback): void;\n  exports: PlayerAPI['exports'] & { PlayerEvent: MobileV3PlayerEventType };\n}\n\nexport function isMobileV3PlayerAPI(player: WrappedPlayer | PlayerAPI | MobileV3PlayerAPI): player is MobileV3PlayerAPI {\n  for (const key in MobileV3PlayerEvent) {\n    if (MobileV3PlayerEvent.hasOwnProperty(key) && !player.exports.PlayerEvent.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import {Event, EventDispatcher, NoArgs} from './eventdispatcher';\nimport {BrowserUtils} from './browserutils';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI, TimeRange } from 'bitmovin-player';\n\nexport namespace PlayerUtils {\n\n  export enum PlayerState {\n    Idle,\n    Prepared,\n    Playing,\n    Paused,\n    Finished,\n  }\n\n  export function isTimeShiftAvailable(player: PlayerAPI): boolean {\n    return player.isLive() && player.getMaxTimeShift() !== 0;\n  }\n\n  export function getState(player: PlayerAPI): PlayerState {\n    if (player.hasEnded()) {\n      return PlayerState.Finished;\n    } else if (player.isPlaying()) {\n      return PlayerState.Playing;\n    } else if (player.isPaused()) {\n      return PlayerState.Paused;\n    } else if (player.getSource() != null) {\n      return PlayerState.Prepared;\n    } else {\n      return PlayerState.Idle;\n    }\n  }\n\n  /**\n   * Returns the currentTime - seekableRange.start. This ensures a user-friendly currentTime after a live stream\n   * transitioned to VoD.\n   * @param player\n   */\n  export function getCurrentTimeRelativeToSeekableRange(player: PlayerAPI): number {\n    const currentTime = player.getCurrentTime();\n    if (player.isLive()) {\n      return currentTime;\n    }\n\n    const seekableRangeStart = PlayerUtils.getSeekableRangeStart(player, 0);\n    return currentTime - seekableRangeStart;\n  }\n\n  /**\n   * Returns the start value of the seekable range or the defaultValue if no seekableRange is present.\n   * For now this happens only in combination with Mobile SDKs.\n   *\n   * TODO: remove this function in next major release\n   *\n   * @param player\n   * @param defaultValue\n   */\n  export function getSeekableRangeStart(player: PlayerAPI, defaultValue: number = 0) {\n    return player.getSeekableRange() && player.getSeekableRange().start || defaultValue;\n  }\n\n  /**\n   * Calculates player seekable time range for live.\n   * As the player returns `{ start: -1, end: -1 }` for live streams we need to calculate the `seekableRange` based on `maxTimeshift`.\n   *\n   * @param player\n   */\n  export function getSeekableRangeRespectingLive(player: PlayerAPI): TimeRange {\n    if (!player.isLive()) {\n      return player.getSeekableRange();\n    }\n\n    const currentTimeshift = -player.getTimeShift();\n    const maxTimeshift = -player.getMaxTimeShift();\n    const currentTime = player.getCurrentTime();\n\n    const end = currentTime + (currentTimeshift);\n    const start = currentTime - (maxTimeshift - currentTimeshift);\n\n    return { start, end };\n  }\n\n  export interface TimeShiftAvailabilityChangedArgs extends NoArgs {\n    timeShiftAvailable: boolean;\n  }\n\n  export class TimeShiftAvailabilityDetector {\n\n    private player: PlayerAPI;\n    private timeShiftAvailable: boolean;\n    private timeShiftAvailabilityChangedEvent = new EventDispatcher<PlayerAPI, TimeShiftAvailabilityChangedArgs>();\n\n    constructor(player: PlayerAPI) {\n      this.player = player;\n      this.timeShiftAvailable = undefined;\n\n      let timeShiftDetector = () => {\n        this.detect();\n      };\n      // Try to detect timeshift availability when source is loaded, which works for DASH streams\n      player.on(player.exports.PlayerEvent.SourceLoaded, timeShiftDetector);\n      // With HLS/NativePlayer streams, getMaxTimeShift can be 0 before the buffer fills, so we need to additionally\n      // check timeshift availability in TimeChanged\n      player.on(player.exports.PlayerEvent.TimeChanged, timeShiftDetector);\n    }\n\n    detect(): void {\n      if (this.player.isLive()) {\n        let timeShiftAvailableNow = PlayerUtils.isTimeShiftAvailable(this.player);\n\n        // When the availability changes, we fire the event\n        if (timeShiftAvailableNow !== this.timeShiftAvailable) {\n          this.timeShiftAvailabilityChangedEvent.dispatch(this.player, { timeShiftAvailable: timeShiftAvailableNow });\n          this.timeShiftAvailable = timeShiftAvailableNow;\n        }\n      }\n    }\n\n    get onTimeShiftAvailabilityChanged(): Event<PlayerAPI, TimeShiftAvailabilityChangedArgs> {\n      return this.timeShiftAvailabilityChangedEvent.getEvent();\n    }\n  }\n\n  export interface LiveStreamDetectorEventArgs extends NoArgs {\n    live: boolean;\n  }\n\n  /**\n   * Detects changes of the stream type, i.e. changes of the return value of the player#isLive method.\n   * Normally, a stream cannot change its type during playback, it's either VOD or live. Due to bugs on some\n   * platforms or browsers, it can still change. It is therefore unreliable to just check #isLive and this detector\n   * should be used as a workaround instead.\n   *\n   * Additionally starting with player v8.19.0 we have the use-case that a live stream changes into a vod.\n   * The DurationChanged event indicates this switch.\n   *\n   * Known cases:\n   *\n   * - HLS VOD on Android 4.3\n   * Video duration is initially 'Infinity' and only gets available after playback starts, so streams are wrongly\n   * reported as 'live' before playback (the live-check in the player checks for infinite duration).\n   *\n   * @deprecated since UI v3.9.0 in combination with player v8.19.0 use PlayerEvent.DurationChanged instead\n   *\n   * TODO: remove this class in next major release\n   */\n  export class LiveStreamDetector {\n\n    private player: PlayerAPI;\n    private live: boolean;\n    private liveChangedEvent = new EventDispatcher<PlayerAPI, LiveStreamDetectorEventArgs>();\n    private uimanager: UIInstanceManager;\n\n    constructor(player: PlayerAPI, uimanager: UIInstanceManager) {\n      this.player = player;\n      this.uimanager = uimanager;\n      this.live = undefined;\n\n      let liveDetector = () => {\n        this.detect();\n      };\n      this.uimanager.getConfig().events.onUpdated.subscribe(liveDetector);\n      // Re-evaluate when playback starts\n      player.on(player.exports.PlayerEvent.Play, liveDetector);\n\n      // HLS live detection workaround for Android:\n      // Also re-evaluate during playback, because that is when the live flag might change.\n      // (Doing it only in Android Chrome saves unnecessary overhead on other platforms)\n      if (BrowserUtils.isAndroid && BrowserUtils.isChrome) {\n        player.on(player.exports.PlayerEvent.TimeChanged, liveDetector);\n      }\n\n      // DurationChanged event was introduced with player v8.19.0\n      if (player.exports.PlayerEvent.DurationChanged) {\n        player.on(player.exports.PlayerEvent.DurationChanged, liveDetector);\n      }\n\n      // Ad video's isLive() might be different than the actual video's isLive().\n      player.on(player.exports.PlayerEvent.AdBreakStarted, liveDetector);\n      player.on(player.exports.PlayerEvent.AdBreakFinished, liveDetector);\n    }\n\n    detect(): void {\n      let liveNow = this.player.isLive();\n\n      // Compare current to previous live state flag and fire event when it changes. Since we initialize the flag\n      // with undefined, there is always at least an initial event fired that tells listeners the live state.\n      if (liveNow !== this.live) {\n        this.liveChangedEvent.dispatch(this.player, { live: liveNow });\n        this.live = liveNow;\n      }\n    }\n\n    get onLiveChanged(): Event<PlayerAPI, LiveStreamDetectorEventArgs> {\n      return this.liveChangedEvent.getEvent();\n    }\n  }\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { Action, Direction } from './types';\nimport { Container } from '../components/container';\nimport { Component } from '../components/component';\n\nexport enum ListOrientation {\n  Horizontal = 'horizontal',\n  Vertical = 'vertical',\n}\n\nexport class ListNavigationGroup extends NavigationGroup {\n  private readonly listNavigationDirections: Direction[];\n\n  constructor(orientation: ListOrientation, container: Container<unknown>, ...components: Component<unknown>[]) {\n    super(container, ...components);\n\n    switch (orientation) {\n      case ListOrientation.Vertical:\n        this.listNavigationDirections = [Direction.UP, Direction.DOWN];\n        break;\n\n      case ListOrientation.Horizontal:\n        this.listNavigationDirections = [Direction.LEFT, Direction.RIGHT];\n        break;\n    }\n  }\n\n  public handleAction(action: Action): void {\n    super.handleAction(action);\n\n    if (action === Action.SELECT) {\n      // close the container when a list entry is selected\n      this.handleAction(Action.BACK);\n    }\n  }\n\n  public handleNavigation(direction: Direction): void {\n    super.handleNavigation(direction);\n\n    if (!this.listNavigationDirections.includes(direction)) {\n      // close the container on navigation inputs that don't align\n      // with the orientation of the list\n      this.handleAction(Action.BACK);\n    }\n  }\n}\n","import { Component } from '../components/component';\nimport { Container } from '../components/container';\nimport { isComponent, isContainer, isListBox } from './typeguards';\n\n/**\n * Recursively resolves a container and the components contained within them, building a flat list of components.\n *\n * @param container The container to get the contained components from\n */\nfunction resolveAllComponents(container: Container<unknown>): Component<unknown>[] {\n  const childComponents: Component<unknown>[] = [];\n\n  container.getComponents().forEach(containerOrComponent => {\n    if (isContainer(containerOrComponent)) {\n      childComponents.push(...resolveAllComponents(containerOrComponent));\n    } else if (isComponent(containerOrComponent)) {\n      childComponents.push(containerOrComponent);\n    }\n  });\n\n  return childComponents;\n}\n\n/**\n * Returns the HTML elements associated to the provided component.\n *\n * @param component The component to get the HTML elements from\n */\nfunction toHtmlElement(component: Component<unknown>): HTMLElement[] {\n  if (isListBox(component)) {\n    return [].slice.call(component.getDomElement().get()[0].children);\n  } else {\n    return component.getDomElement().get().slice(0, 1);\n  }\n}\n\n/**\n * Takes the provided list of components and flat-maps them to a list of their respective HTML elements. In case a\n * provided component is a container, the children of that container will be resolved recursively. Ignores components\n * that are hidden.\n *\n * @param components The components to map to HTML elements\n */\nexport function getHtmlElementsFromComponents(components: Component<unknown>[]): HTMLElement[] {\n  const htmlElements: HTMLElement[] = [];\n\n  components\n    .filter(component => !component.isHidden())\n    .forEach(component => {\n      const elementsToConsider = component instanceof Container ? resolveAllComponents(component) : [component];\n\n      elementsToConsider.forEach(component => {\n        htmlElements.push(...toHtmlElement(component));\n      });\n    });\n\n  return htmlElements;\n}\n","import { Action, Direction, KeyMap } from './types';\nimport { BrowserUtils } from '../browserutils';\n\nconst TizenKeyMap = {\n  isApplicable: () => BrowserUtils.isTizen,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // D-pad OK\n    13: Action.SELECT,\n    // Back\n    10009: Action.BACK,\n  },\n};\n\nconst WebOsKeyMap = {\n  isApplicable: () => BrowserUtils.isWebOs,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // D-pad OK\n    13: Action.SELECT,\n    // Back\n    461: Action.BACK,\n  },\n};\n\nconst PlayStationKeyMap = {\n  isApplicable: () => BrowserUtils.isPlayStation,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // Cross\n    13: Action.SELECT,\n    // Circle\n    27: Action.BACK,\n  },\n};\n\nconst AndroidKeyMap = {\n  isApplicable: () => BrowserUtils.isAndroid,\n  keyCodes: {\n    // D-pad Up\n    19: Direction.UP,\n    // D-pad Down\n    20: Direction.DOWN,\n    // D-pad Left\n    21: Direction.LEFT,\n    // D-pad Right\n    22: Direction.RIGHT,\n    // D-pad Center\n    23: Action.SELECT,\n    // Enter\n    66: Action.SELECT,\n    // Back\n    4: Action.BACK,\n  },\n};\n\nconst HisenseKeyMap = {\n  isApplicable: () => BrowserUtils.isHisense,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // OK\n    13: Action.SELECT,\n    // Back\n    8: Action.BACK,\n  },\n};\n\n// Default key map used on desktops\nconst DefaultKeyMap = {\n  // Arrow Up\n  38: Direction.UP,\n  // Arrow Down\n  40: Direction.DOWN,\n  // Arrow Left\n  37: Direction.LEFT,\n  // Arrow Right\n  39: Direction.RIGHT,\n  // Enter\n  13: Action.SELECT,\n  // Escape\n  27: Action.BACK,\n};\n\n/**\n * Returns the matching key map for the current platform.\n */\nexport function getKeyMapForPlatform(): KeyMap {\n  const applicableKeyMap = [\n    WebOsKeyMap,\n    TizenKeyMap,\n    PlayStationKeyMap,\n    HisenseKeyMap,\n    AndroidKeyMap,\n  ].find(keyMap => keyMap.isApplicable());\n\n  if (applicableKeyMap) {\n    return applicableKeyMap.keyCodes;\n  } else {\n    return DefaultKeyMap;\n  }\n}\n","import { Direction } from './types';\n\ninterface Vector {\n  x: number;\n  y: number;\n}\n\n/**\n * Calculates the length of a vector.\n *\n * @param vector The vector to calculate the length of\n */\nfunction length(vector: Vector): number {\n  return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));\n}\n\n/**\n * Normalizes the given vector.\n *\n * @param vector The vector to normalize\n */\nfunction normalize(vector: Vector): Vector {\n  const len = length(vector);\n\n  return {\n    x: vector.x / len,\n    y: vector.y / len,\n  };\n}\n\n/**\n * Calculates the dot product between 2 vectors.\n *\n * @param a The first vector\n * @param b The second vector\n */\nfunction dotProduct(a: Vector, b: Vector): number {\n  return a.x * b.x + a.y * b.y;\n}\n\n/**\n * Calculates the distance between the 2 points pointed to by the provided vectors.\n *\n * @param a The first vector\n * @param b The second vector\n */\nfunction distance(a: Vector, b: Vector): number {\n  return length({\n    x: b.x - a.x,\n    y: b.y - a.y,\n  });\n}\n\n/**\n * Returns a vector that corresponds to the center of the provided element.\n *\n * @param element The element to get the center of\n */\nfunction getElementVector(element: HTMLElement): Vector {\n  const boundingRect = getBoundingRectFromElement(element);\n\n  return {\n    x: boundingRect.x + boundingRect.width / 2,\n    y: boundingRect.y + boundingRect.height / 2,\n  };\n}\n\n/**\n * Returns the angle in degrees between the unit vector pointing in the given {Direction} and the unit vector that\n * points from the current element to another element.\n *\n * @param a The vector of the current element\n * @param b The vector of the other element\n * @param direction The direction to move along\n */\nfunction calculateAngle(a: Vector, b: Vector, direction: Direction): number {\n  const directionVector = {\n    x: (direction === Direction.LEFT ? -1 : direction === Direction.RIGHT ? 1 : 0),\n    y: (direction === Direction.UP ? -1 : direction === Direction.DOWN ? 1 : 0),\n  };\n\n  const elementVector = normalize({\n    x: b.x - a.x,\n    y: b.y - a.y,\n  });\n\n  const angleCos = dotProduct(directionVector, elementVector) / (length(directionVector) * length(elementVector));\n\n  return Math.acos(angleCos) * 180 / Math.PI;\n}\n\n/**\n * Returns the closest element to the current element when trying to navigate in the provided direction. Returns\n * undefined, if there is not element in the given direction.\n *\n * @param activeElement The currently selected element\n * @param elements The list of all elements that can be navigated to\n * @param direction The direction in which to navigate\n */\nexport function getElementInDirection(\n  activeElement: HTMLElement,\n  elements: HTMLElement[],\n  direction: Direction,\n): HTMLElement | undefined {\n  if (!activeElement) return undefined;\n\n  const cutoffAngle = 45;\n  const activeElemVector = getElementVector(activeElement);\n\n  return elements\n    // don't take the current element into account\n    .filter(elem => elem !== activeElement)\n    // get the angle between, and distance to any other element from the current element\n    .map(element => {\n      const elementVector = getElementVector(element);\n      const dist = distance(activeElemVector, elementVector);\n      const angle = calculateAngle(activeElemVector, elementVector, direction);\n\n      return { angle, dist, element };\n    })\n    // filter out any elements that don't align with the direction we're trying to move in\n    .filter(({ angle }) => angle <= cutoffAngle)\n    // sort the resulting elements based on their distance to the current element in ascending order\n    .sort(({ angle: angleA, dist: distA }, { angle: angleB, dist: distB }) => (angleA - angleB) + (distA - distB))\n    // return the element closest to the current element\n    .shift()?.element;\n}\n\n/**\n * Returns DOMRect like object containing horizontal X and vertical Y coordinates from and HTMLElement.\n * Handles use-cases for getBoundingClientRect when the return type can be either\n * a ClientRect or DOMRect object type.\n *\n * @param element The currently selected element\n */\nexport function getBoundingRectFromElement(element: HTMLElement) {\n  const boundingRect = element.getBoundingClientRect();\n\n  if (typeof boundingRect.x !== 'number' && typeof boundingRect.y !== 'number') {\n    boundingRect.x = boundingRect.left;\n    boundingRect.y = boundingRect.top;\n  }\n\n  return boundingRect;\n}\n\n","import { Container } from '../components/container';\nimport { Component } from '../components/component';\nimport { getElementInDirection } from './navigationalgorithm';\nimport { getHtmlElementsFromComponents } from './gethtmlelementsfromcomponents';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { isSettingsPanel } from './typeguards';\nimport { Action, ActionCallback, Callback, Direction, NavigationCallback } from './types';\n\n/**\n * Used as part of spatial navigation. Groups together different components to which you can navigate to, in a single\n * navigation group.\n *\n * Responsible for finding elements in direction on navigation and for tracking active element inside the group.\n * Triggers blur and focus on element when active element is changed, as well as click on element on `Action.SELECT`.\n * Will call `hideUi()` on passed in container if `Action.BACK` is called.\n */\nexport class NavigationGroup {\n  private activeElement?: HTMLElement;\n  private activeElementBeforeDisable?: HTMLElement;\n  private readonly components: Component<unknown>[];\n  private removeElementHoverEventListeners = () => {};\n  private readonly eventSubscriber: NodeEventSubscriber;\n\n  constructor(public readonly container: Container<unknown>, ...components: Component<unknown>[]) {\n    this.components = components;\n    this.eventSubscriber = new NodeEventSubscriber();\n  }\n\n  /**\n   * If overwritten, allows to implement custom navigation behavior. Per default, the internal handler will still be\n   * executed. To prevent execution of the default navigation handler, call `preventDefault()`;\n   *\n   * @param direction {Direction} The direction to move along\n   * @param target {HTMLElement} The target element for the event\n   * @param preventDefault {() => void} A function that, when called, will prevent the execution of the default handler\n   */\n  public onNavigation?: NavigationCallback;\n\n  /**\n   * If overwritten, allows to implement custom action behavior. Per default, the internal handler will still be\n   * executed. To prevent execution of the default action handler, call `preventDefault()`;\n   *\n   * @param action {Action} The action that was called\n   * @param target {HTMLElement} The target element that action was called on\n   * @param preventDefault {() => void} A function that, when called, will prevent the execution of the default handler\n   */\n  public onAction?: ActionCallback;\n\n  /**\n   * Returns the active HTMLElement.\n   */\n  public getActiveElement(): HTMLElement | undefined {\n    return this.activeElement;\n  }\n\n  private focusElement(element: HTMLElement): void {\n    this.blurActiveElement();\n    this.activeElement = element;\n    this.activeElement.focus();\n  }\n\n  private blurActiveElement(): void {\n    this.activeElement?.blur();\n  }\n\n  private focusFirstElement(): void {\n    const element = getHtmlElementsFromComponents(this.components)[0];\n    if (element) {\n      this.focusElement(element);\n    }\n  }\n\n  protected defaultNavigationHandler(direction: Direction): void {\n    const targetElement = getElementInDirection(\n      this.activeElement,\n      getHtmlElementsFromComponents(this.components),\n      direction,\n    );\n\n    if (targetElement) {\n      this.focusElement(targetElement);\n    }\n  }\n\n  protected defaultActionHandler(action: Action): void {\n    switch (action) {\n      case(Action.SELECT):\n        this.activeElement.click();\n        break;\n      case(Action.BACK):\n        this.container.hide();\n        break;\n    }\n  }\n\n  private handleInput<T>(data: T, defaultHandler: (data: T) => void, userHandler?: Callback<T>): void {\n    let handleDefault = true;\n    const preventDefault = () => (handleDefault = false);\n\n    userHandler?.(data, this.activeElement, preventDefault);\n\n    if (handleDefault) {\n      defaultHandler.call(this, data);\n    }\n  }\n\n  /**\n   * Handles a navigation event.\n   *\n   * @param direction The direction of the navigation event\n   */\n  public handleNavigation(direction: Direction): void {\n    if (!this.activeElement) {\n      // If we do not have an active element, the active element has been disabled by a mouseleave\n      // event. We should continue the navigation at the exact place where we left off.\n      if (this.activeElementBeforeDisable) {\n        this.focusElement(this.activeElementBeforeDisable);\n      } else {\n        this.focusFirstElement();\n      }\n      return;\n    }\n    this.handleInput(direction, this.defaultNavigationHandler, this.onNavigation);\n  }\n\n  /**\n   * Handles an action event.\n   *\n   * @param action The action of the event\n   */\n  public handleAction(action: Action): void {\n    this.handleInput(action, this.defaultActionHandler, this.onAction);\n  }\n\n  /**\n   * Disable navigation group\n   *\n   * Call blur on active element, set as undefined, and track it as element before disable.\n   */\n  public disable(): void {\n    if (this.activeElement) {\n      this.activeElementBeforeDisable = this.activeElement;\n      this.blurActiveElement();\n      this.activeElement = undefined;\n    }\n  }\n\n  /**\n   * Enable navigation group\n   *\n   * Sets active element to either element that was active before disable, or first element of tracked elements.\n   * If it is settings panel, it will always focus first element in the list.\n   */\n  public enable(): void {\n    if (this.activeElementBeforeDisable && !isSettingsPanel(this.container)) {\n      this.focusElement(this.activeElementBeforeDisable);\n      this.activeElementBeforeDisable = undefined;\n    } else {\n      this.focusFirstElement();\n    }\n\n    this.trackElementHover();\n  }\n\n  /**\n   * Adds event listener for `mouseenter` on tracked elements to ensure tracking of active element will work together\n   * in combination of using mouse and key events.\n   */\n  private trackElementHover(): void {\n    this.removeElementHoverEventListeners();\n\n    const removeEventListenerFunctions = getHtmlElementsFromComponents(this.components).map(htmlElem => {\n      const enterListener = this.focusElement.bind(this, htmlElem);\n      const exitListener = () => this.disable();\n\n      this.eventSubscriber.on(htmlElem, 'mouseenter', enterListener);\n      this.eventSubscriber.on(htmlElem, 'mouseleave', exitListener);\n\n      return () => {\n        this.eventSubscriber.off(htmlElem, 'mouseenter', enterListener);\n        this.eventSubscriber.off(htmlElem, 'mouseleave', exitListener);\n      };\n    });\n\n    this.removeElementHoverEventListeners = () => removeEventListenerFunctions.forEach(fn => fn());\n  }\n\n  /**\n   * Dispose of navigation group\n   */\n  public release(): void {\n    this.eventSubscriber.release();\n    this.activeElement = undefined;\n    this.components.splice(0, this.components.length);\n    this.removeElementHoverEventListeners();\n  }\n}\n","type Listeners = ([Node, EventListenerOrEventListenerObject, boolean | AddEventListenerOptions])[];\n\n/**\n * Allows to subscribe to Node events.\n */\nexport class NodeEventSubscriber {\n  private readonly attachedListeners: Map<keyof HTMLElementEventMap, Listeners>;\n\n  constructor() {\n    this.attachedListeners = new Map();\n  }\n\n  private getEventListenersOfType(type: keyof HTMLElementEventMap): Listeners {\n    if (!this.attachedListeners.has(type)) {\n      this.attachedListeners.set(type, []);\n    }\n\n    return this.attachedListeners.get(type);\n  }\n\n  /**\n   * Adds the given event listener to the node.\n   *\n   * @param node The node to remove the event listener from\n   * @param type The event to listen to\n   * @param listener The listener to remove\n   * @param options The event listener options\n   */\n  public on(\n    node: Node,\n    type: keyof HTMLElementEventMap,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    node.addEventListener(type, listener, options);\n    this.getEventListenersOfType(type).push([node, listener, options]);\n  }\n\n  /**\n   * Removes the given event listener from the node.\n   *\n   * @param node The node to attach the event listener to\n   * @param type The event to listen to\n   * @param listener The listener to add\n   * @param options The event listener options\n   */\n  public off(\n    node: Node,\n    type: keyof HTMLElementEventMap,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    const listenersOfType = this.getEventListenersOfType(type);\n    const listenerIndex = listenersOfType.findIndex(([otherNode, otherListener, otherOptions]) => {\n      return otherNode === node && otherListener === listener && otherOptions === options;\n    });\n\n    node.removeEventListener(type, listener, options);\n\n    if (listenerIndex > -1) {\n      listenersOfType.splice(listenerIndex, 1);\n    }\n  }\n\n  /**\n   * Removes all attached event listeners.\n   */\n  public release(): void {\n    this.attachedListeners.forEach((listenersOfType, type) => {\n      listenersOfType.forEach(([element, listener, options]) => {\n        this.off(element, type, listener, options);\n      });\n    });\n    this.attachedListeners.clear();\n  }\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { Component } from '../components/component';\nimport { UIContainer } from '../components/uicontainer';\nimport { Action, Direction } from './types';\n\n/**\n * Extends NavigationGroup and provides additional logic for hiding and showing the UI on the root container.\n */\nexport class RootNavigationGroup extends NavigationGroup {\n  constructor(public readonly container: UIContainer, ...elements: Component<unknown>[]) {\n    super(container, ...elements);\n  }\n\n  public handleAction(action: Action) {\n    this.container.showUi();\n\n    super.handleAction(action);\n  }\n\n  public handleNavigation(direction: Direction) {\n    this.container.showUi();\n\n    super.handleNavigation(direction);\n  }\n\n  protected defaultActionHandler(action: Action): void {\n    if (action === Action.BACK) {\n      this.container.hideUi();\n    } else {\n      super.defaultActionHandler(action);\n    }\n  }\n\n  public release(): void {\n    super.release();\n  }\n}\n","import { RootNavigationGroup } from './rootnavigationgroup';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { Action, Direction } from './types';\nimport {getBoundingRectFromElement} from './navigationalgorithm';\n\nconst DefaultScrubSpeedPercentage = 0.005;\nconst ScrubSpeedClearInterval = 100;\nconst ScrubSpeedMultiplier = 1.1;\n\n/**\n * Handles Spatial Navigation interaction with the seek bar. Ensures, that seek operations can be executed and that the\n * scrubbing tooltip is shown as if the user scrubbed using the mouse/touchscreen.\n */\nexport class SeekBarHandler {\n  private readonly cursorPosition = { x: 0, y: 0};\n  private readonly eventSubscriber: NodeEventSubscriber;\n  private isScrubbing = false;\n  private scrubSpeedResetTimeout: number;\n  private scrubSpeedPercentage = DefaultScrubSpeedPercentage;\n\n  constructor(private readonly rootNavigationGroup: RootNavigationGroup) {\n    this.rootNavigationGroup.onAction = this.onAction;\n    this.eventSubscriber = new NodeEventSubscriber();\n    this.rootNavigationGroup.onNavigation = this.onNavigation;\n  }\n\n  private updateScrubSpeedPercentage(): void {\n    clearTimeout(this.scrubSpeedResetTimeout);\n    this.scrubSpeedPercentage *= ScrubSpeedMultiplier;\n    this.scrubSpeedResetTimeout = window.setTimeout(\n      () => this.scrubSpeedPercentage = DefaultScrubSpeedPercentage, ScrubSpeedClearInterval,\n    );\n  }\n\n  private getIncrement(direction: Direction, seekBarWrapper: HTMLElement): number {\n    this.updateScrubSpeedPercentage();\n\n    const seekBarWidth = seekBarWrapper.getBoundingClientRect().width;\n    const increment = seekBarWidth * this.scrubSpeedPercentage;\n\n    return direction === Direction.RIGHT ? increment : -increment;\n  }\n\n  private resetCursorPosition(): void {\n    this.cursorPosition.x = 0;\n    this.cursorPosition.y = 0;\n  }\n\n  private updateCursorPosition(direction: Direction, seekBarWrapper: HTMLElement): void {\n    this.cursorPosition.x += this.getIncrement(direction, seekBarWrapper);\n  }\n\n  private initializeCursorPosition(seekBarWrapper: HTMLElement): void {\n    const playbackPositionMarker = getPlaybackPositionMarker(seekBarWrapper);\n    const rect = getBoundingRectFromElement(playbackPositionMarker);\n\n\n    const startX = rect.x + (rect.width / 2);\n    const startY = rect.y;\n\n    this.cursorPosition.x = startX;\n    this.cursorPosition.y = startY;\n  }\n\n  private initializeOrUpdateCursorPosition(seekBarWrapper: HTMLElement, direction: Direction): void {\n    if (this.isScrubbing) {\n      this.updateCursorPosition(direction, seekBarWrapper);\n    } else {\n      this.initializeCursorPosition(seekBarWrapper);\n    }\n\n    this.isScrubbing = true;\n  }\n\n  private getCursorPositionMouseEventInit(): MouseEventInit {\n    return {\n      clientX: this.cursorPosition.x,\n      clientY: this.cursorPosition.y,\n    };\n  }\n\n  private dispatchMouseMoveEvent(seekBar: Element): void {\n    seekBar.dispatchEvent(new MouseEvent('mousemove', this.getCursorPositionMouseEventInit()));\n  }\n\n  private readonly onNavigation = (direction: Direction, target: HTMLElement, preventDefault: () => void): void => {\n    if (!isSeekBarWrapper(target)) {\n      return;\n    }\n\n    if (direction === Direction.UP || direction === Direction.DOWN) {\n      this.stopSeeking(getSeekBar(target));\n\n      return;\n    }\n\n    this.initializeOrUpdateCursorPosition(target, direction);\n    this.dispatchMouseMoveEvent(getSeekBar(target));\n\n    preventDefault();\n  };\n\n  private dispatchMouseClickEvent(seekBar: Element): void {\n    const mouseDownHandler = () => {\n      const mouseEventInit = this.getCursorPositionMouseEventInit();\n\n      document.dispatchEvent(new MouseEvent('mouseup', mouseEventInit));\n      this.eventSubscriber.off(seekBar, 'mousedown', mouseDownHandler);\n      this.stopSeeking(seekBar);\n    };\n\n    this.eventSubscriber.on(seekBar, 'mousedown', mouseDownHandler);\n    seekBar.dispatchEvent(new MouseEvent('mousedown'));\n  }\n\n  private stopSeeking(seekBar: Element): void {\n    this.resetCursorPosition();\n    this.isScrubbing = false;\n    this.dispatchMouseLeaveEvent(seekBar);\n  }\n\n  private dispatchMouseLeaveEvent(seekBar: Element): void {\n    seekBar.dispatchEvent(new MouseEvent('mouseleave'));\n  }\n\n  private readonly onAction = (action: Action, target: HTMLElement, preventDefault: () => void): void => {\n    if (!isSeekBarWrapper(target)) {\n      return;\n    }\n\n    const seekBar = getSeekBar(target);\n\n    if (action === Action.SELECT && this.isScrubbing) {\n      this.dispatchMouseClickEvent(seekBar);\n      preventDefault();\n    } else if (action === Action.BACK) {\n      this.stopSeeking(seekBar);\n      preventDefault();\n    }\n  };\n\n  /**\n   * Releases the SeekBraHandler, making sure all event subscribers are removed.\n   */\n  public release(): void {\n    this.eventSubscriber.release();\n    this.rootNavigationGroup.onAction = undefined;\n    this.rootNavigationGroup.onNavigation = undefined;\n  }\n}\n\nfunction isSeekBarWrapper(element: HTMLElement): boolean {\n  return Array.from(element.classList).findIndex(className => /-ui-seekbar$/.test(className)) > -1;\n}\n\nfunction getSeekBar(seekBarWrapper: HTMLElement): Element {\n  return seekBarWrapper.children.item(0);\n}\n\nfunction getPlaybackPositionMarker(seekBarWrapper: HTMLElement): HTMLElement {\n  return seekBarWrapper.querySelector('[class*=\"seekbar-playbackposition-marker\"]');\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { RootNavigationGroup } from './rootnavigationgroup';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { SeekBarHandler } from './seekbarhandler';\nimport { getKeyMapForPlatform } from './keymap';\nimport { Action, Direction, KeyMap } from './types';\nimport { isAction, isDirection } from './typeguards';\n\n/**\n * SpatialNavigation keeps track of all navigation groups, and updates the active navigation group when visibility\n * changes on group container.\n *\n * It listens to key events, and triggers either handleNavigation or handleAction on the active group.\n * SeekBarHandler will get instantiated with root navigation group and disposed on release of the spatial navigation.\n */\nexport class SpatialNavigation {\n  private unsubscribeVisibilityChangesFns: (() => void)[];\n  private readonly navigationGroups: NavigationGroup[] = [];\n  private readonly activeNavigationGroups: NavigationGroup[];\n  private readonly eventSubscriber: NodeEventSubscriber;\n  private readonly seekBarHandler: SeekBarHandler;\n  private readonly keyMap: KeyMap;\n\n  constructor(rootNavigationGroup: RootNavigationGroup, ...navigationGroups: NavigationGroup[]) {\n    this.seekBarHandler = new SeekBarHandler(rootNavigationGroup);\n\n    this.activeNavigationGroups = [];\n    this.unsubscribeVisibilityChangesFns = [];\n    this.eventSubscriber = new NodeEventSubscriber();\n    this.navigationGroups = [rootNavigationGroup, ...navigationGroups];\n    this.keyMap = getKeyMapForPlatform();\n\n    this.subscribeToNavigationGroupVisibilityChanges();\n    this.attachKeyEventHandler();\n    this.enableDefaultNavigationGroup();\n  }\n\n  private attachKeyEventHandler(): void {\n    this.eventSubscriber.on(document, 'keydown', this.handleKeyEvent, true);\n  }\n\n  private onShow = (group: NavigationGroup): void => {\n    this.activeNavigationGroups.push(group);\n    this.updateEnabledNavigationGroup();\n  };\n\n  private onHide = (group: NavigationGroup): void => {\n    const groupIndex = this.activeNavigationGroups.findIndex(other => other === group);\n\n    if (groupIndex > -1) {\n      group.disable();\n      this.activeNavigationGroups.splice(groupIndex, 1);\n      this.updateEnabledNavigationGroup();\n    }\n  };\n\n  /**\n   * Subscribes to onHide and onShow on all navigation groups containers as Spatial navigation tracks active navigation\n   * group based on their container visibility.\n   */\n  private subscribeToNavigationGroupVisibilityChanges(): void {\n    this.navigationGroups.forEach(group => {\n      const onShowHandler = () => this.onShow(group);\n      const onHideHandler = () => this.onHide(group);\n\n      group.container.onShow.subscribe(onShowHandler);\n      group.container.onHide.subscribe(onHideHandler);\n\n      this.unsubscribeVisibilityChangesFns.push(\n        () => group.container.onShow.unsubscribe(onShowHandler),\n        () => group.container.onHide.unsubscribe(onHideHandler),\n      );\n    });\n  }\n\n  private unsubscribeFromNavigationGroupVisibilityChanges(): void {\n    this.unsubscribeVisibilityChangesFns.forEach(unsub => unsub());\n    this.unsubscribeVisibilityChangesFns = [];\n  }\n\n  /**\n   * It will enable group of which container is currently shown\n   * If there are no groups with containers that are currently visible, it will enable root navigation group\n   */\n  private enableDefaultNavigationGroup(): void {\n    const isShown = (group: NavigationGroup) => group.container.isShown();\n    const groupToEnable = this.navigationGroups.find(isShown) ?? this.navigationGroups[0];\n\n    if (groupToEnable) {\n      this.activeNavigationGroups.push(groupToEnable);\n      this.updateEnabledNavigationGroup();\n    }\n  }\n\n  /**\n   * Disables navigation groups that are no longer active and calls enable on last pushed navigation group\n   */\n  private updateEnabledNavigationGroup(): void {\n    this.activeNavigationGroups.forEach((group, idx) => {\n      if (idx < this.activeNavigationGroups.length - 1) {\n        group.disable();\n      } else {\n        group.enable();\n      }\n    });\n  }\n\n  /**\n   * Returns currently active navigation group\n   */\n  public getActiveNavigationGroup(): NavigationGroup | undefined {\n    return this.activeNavigationGroups[this.activeNavigationGroups.length - 1];\n  }\n\n  /**\n   * Checks if keyboard event keycode is tracked either as Direction or Action and calls appropriate handler on active\n   * navigation group\n   *\n   * @param e {KeyboardEvent}\n   */\n  private handleKeyEvent = (e: KeyboardEvent): void => {\n    const event: Direction | Action | undefined = this.keyMap[getKeyCode(e)];\n\n    const active = this.getActiveNavigationGroup();\n    if (!active || !active.container || active.container.isHidden() || active.container.isDisabled()) {\n      return;\n    }\n\n    if (isDirection(event)) {\n      active.handleNavigation(event);\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    if (isAction(event)) {\n      active.handleAction(event);\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  };\n\n  /**\n   * Dispose of SpatialNavigation\n   *\n   * Remove all event handlers, release seekbar handler and release all navigation groups.\n   */\n  public release(): void {\n    this.unsubscribeFromNavigationGroupVisibilityChanges();\n    this.eventSubscriber.release();\n    this.navigationGroups.forEach(group => group.release());\n    this.seekBarHandler.release();\n  }\n}\n\nfunction getKeyCode(event: KeyboardEvent): number {\n  return event.keyCode;\n}\n","import { Component } from '../components/component';\nimport { SettingsPanel } from '../components/settingspanel';\nimport { Container } from '../components/container';\nimport { ListBox } from '../components/listbox';\nimport { Action, Direction } from './types';\n\nexport function isSettingsPanel(component: Component<unknown>): component is SettingsPanel {\n  return component instanceof SettingsPanel;\n}\n\nexport function isComponent(obj: unknown): obj is Component<unknown> {\n  return obj !== null && obj !== undefined && obj instanceof Component;\n}\n\nexport function isContainer(obj: unknown): obj is Container<unknown> {\n  return obj !== null && obj !== undefined && obj instanceof Container;\n}\n\nexport function isListBox(obj: unknown): obj is ListBox {\n  return obj instanceof ListBox;\n}\n\nexport function isDirection(direction: unknown): direction is Direction {\n  return typeof direction === 'string' && Object.values<string>(Direction).includes(direction);\n}\n\nexport function isAction(action: unknown): action is Action {\n  return typeof action === 'string' && Object.values<string>(Action).includes(action);\n}\n","export type Callback<T> = (data: T, target: HTMLElement, preventDefault: () => void) => void;\nexport type NavigationCallback = Callback<Direction>;\nexport type ActionCallback = Callback<Action>;\nexport type KeyMap = {\n  [keyCode: number]: Action | Direction;\n};\n\nexport enum Direction {\n  UP = 'up',\n  DOWN = 'down',\n  LEFT = 'left',\n  RIGHT = 'right',\n}\n\nexport enum Action {\n  SELECT = 'select',\n  BACK = 'back',\n}\n","export namespace StorageUtils {\n  let hasLocalStorageCache: boolean;\n\n  export function hasLocalStorage(): boolean {\n    if (hasLocalStorageCache) {\n      return hasLocalStorageCache;\n    }\n\n    // hasLocalStorage is used to safely ensure we can use localStorage\n    // taken from https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\n    let storage: any = { length: 0 };\n    try {\n      storage = window['localStorage'];\n      let x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      hasLocalStorageCache = true;\n    }\n    catch (e) {\n      hasLocalStorageCache = e instanceof DOMException && (\n          // everything except Firefox\n        e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === 'QuotaExceededError' ||\n        // Firefox\n        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n        // acknowledge QuotaExceededError only if there's something already stored\n        storage.length !== 0;\n    }\n    return hasLocalStorageCache;\n  }\n\n  /**\n   * Stores a string item into localStorage.\n   * @param key the item's key\n   * @param data the item's data\n   */\n  export function setItem(key: string, data: string): void {\n    if (StorageUtils.hasLocalStorage()) {\n      window.localStorage.setItem(key, data);\n    }\n  }\n\n  /**\n   * Gets an item's string value from the localStorage.\n   * @param key the key to look up its associated value\n   * @return {string | null} Returns the string if found, null if there is no data stored for the key\n   */\n  export function getItem(key: string): string | null {\n    if (StorageUtils.hasLocalStorage()) {\n      return window.localStorage.getItem(key);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores an object into localStorage. The object will be serialized to JSON. The following types are supported\n   * in addition to the default types:\n   *  - ColorUtils.Color\n   *\n   * @param key the key to store the data to\n   * @param data the object to store\n   */\n  export function setObject<T>(key: string, data: T): void {\n    if (StorageUtils.hasLocalStorage()) {\n      let json = JSON.stringify(data);\n      setItem(key, json);\n    }\n  }\n\n  /**\n   * Gets an object for the given key from localStorage. The object will be deserialized from JSON. Beside the\n   * default types, the following types are supported:\n   *  - ColorUtils.Color\n   *\n   * @param key the key to look up its associated object\n   * @return {any} Returns the object if found, null otherwise\n   */\n  export function getObject<T>(key: string): T {\n    if (StorageUtils.hasLocalStorage()) {\n      let json = getItem(key);\n\n      if (key) {\n        let object = JSON.parse(json);\n        return <T>object;\n      }\n    }\n    return null;\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\nexport namespace StringUtils {\n\n  export let FORMAT_HHMMSS: string = 'hh:mm:ss';\n  export let FORMAT_MMSS: string = 'mm:ss';\n\n  /**\n   * Formats a number of seconds into a time string with the pattern hh:mm:ss.\n   *\n   * @param totalSeconds the total number of seconds to format to string\n   * @param format the time format to output (default: hh:mm:ss)\n   * @returns {string} the formatted time string\n   */\n  export function secondsToTime(totalSeconds: number, format: string = FORMAT_HHMMSS): string {\n    let isNegative = totalSeconds < 0;\n\n    if (isNegative) {\n      // If the time is negative, we make it positive for the calculation below\n      // (else we'd get all negative numbers) and reattach the negative sign later.\n      totalSeconds = -totalSeconds;\n    }\n\n    // Split into separate time parts\n    let hours = Math.floor(totalSeconds / 3600);\n    let minutes = Math.floor(totalSeconds / 60) - hours * 60;\n    let seconds = Math.floor(totalSeconds) % 60;\n\n    return (isNegative ? '-' : '') + format\n        .replace('hh', leftPadWithZeros(hours, 2))\n        .replace('mm', leftPadWithZeros(minutes, 2))\n        .replace('ss', leftPadWithZeros(seconds, 2));\n  }\n\n  export function secondsToText(totalSeconds: number): string {\n    const isNegative = totalSeconds < 0;\n\n    if (isNegative) {\n      // If the time is negative, we make it positive for the calculation below\n      // (else we'd get all negative numbers) and reattach the negative sign later.\n      totalSeconds = -totalSeconds;\n    }\n\n    // Split into separate time parts\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor(totalSeconds / 60) - hours * 60;\n    const seconds = Math.floor(totalSeconds) % 60;\n\n    return (isNegative ? '-' : '') +\n    (hours !== 0 ? `${leftPadWithZeros(hours, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.hours'))} ` : '') +\n    (minutes !== 0 ? `${leftPadWithZeros(minutes, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.minutes'))} ` : '') +\n    `${leftPadWithZeros(seconds, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.seconds'))}`;\n  }\n\n  /**\n   * Converts a number to a string and left-pads it with zeros to the specified length.\n   * Example: leftPadWithZeros(123, 5) => '00123'\n   *\n   * @param num the number to convert to string and pad with zeros\n   * @param length the desired length of the padded string\n   * @returns {string} the padded number as string\n   */\n  function leftPadWithZeros(num: number | string, length: number): string {\n    let text = num + '';\n    let padding = '0000000000'.substr(0, length - text.length);\n    return padding + text;\n  }\n\n  /**\n   * Fills out placeholders in an ad message.\n   *\n   * Has the placeholders '{remainingTime[formatString]}', '{playedTime[formatString]}' and\n   * '{adDuration[formatString]}', which are replaced by the remaining time until the ad can be skipped, the current\n   * time or the ad duration. The format string is optional. If not specified, the placeholder is replaced by the time\n   * in seconds. If specified, it must be of the following format:\n   * - %d - Inserts the time as an integer.\n   * - %0Nd - Inserts the time as an integer with leading zeroes, if the length of the time string is smaller than N.\n   * - %f - Inserts the time as a float.\n   * - %0Nf - Inserts the time as a float with leading zeroes.\n   * - %.Mf - Inserts the time as a float with M decimal places. Can be combined with %0Nf, e.g. %04.2f (the time\n   * 10.123 would be printed as 0010.12).\n   * - %hh:mm:ss\n   * - %mm:ss\n   *\n   * Examples:\n   * - { text: 'Ad: {remainingTime%mm:ss} secs' }\n   * An input value of 100 would be displayed as: 'Ad: 01:40 secs'\n   * - { text: 'Ad: {remainingTime%f} secs' }\n   * An input value of 100 would be displayed as: 'Ad: 100.0 secs'\n   *\n   * @param adMessage an ad message with optional placeholders to fill\n   * @param skipOffset if specified, {remainingTime} will be filled with the remaining time until the ad can be skipped\n   * @param player the player to get the time data from\n   * @returns {string} the ad message with filled placeholders\n   */\n  export function replaceAdMessagePlaceholders(adMessage: string, skipOffset: number, player: PlayerAPI) {\n    let adMessagePlaceholderRegex = new RegExp(\n      '\\\\{(remainingTime|playedTime|adDuration)(}|%((0[1-9]\\\\d*(\\\\.\\\\d+(d|f)|d|f)|\\\\.\\\\d+f|d|f)|hh:mm:ss|mm:ss)})',\n      'g',\n    );\n\n    return adMessage.replace(adMessagePlaceholderRegex, (formatString) => {\n      let time = 0;\n      if (formatString.indexOf('remainingTime') > -1) {\n        if (skipOffset) {\n          time = Math.ceil(skipOffset - player.getCurrentTime());\n        } else {\n          time = player.getDuration() - player.getCurrentTime();\n        }\n      } else if (formatString.indexOf('playedTime') > -1) {\n        time = player.getCurrentTime();\n      } else if (formatString.indexOf('adDuration') > -1) {\n        time = player.getDuration();\n      }\n      return formatNumber(Math.round(time), formatString);\n    });\n  }\n\n  function formatNumber(time: number, format: string) {\n    let formatStringValidationRegex = /%((0[1-9]\\d*(\\.\\d+(d|f)|d|f)|\\.\\d+f|d|f)|hh:mm:ss|mm:ss)/;\n    let leadingZeroesRegex = /(%0[1-9]\\d*)(?=(\\.\\d+f|f|d))/;\n    let decimalPlacesRegex = /\\.\\d*(?=f)/;\n\n    if (!formatStringValidationRegex.test(format)) {\n      // If the format is invalid, we set a default fallback format\n      format = '%d';\n    }\n\n    // Determine the number of leading zeros\n    let leadingZeroes = 0;\n    let leadingZeroesMatches = format.match(leadingZeroesRegex);\n    if (leadingZeroesMatches) {\n      leadingZeroes = parseInt(leadingZeroesMatches[0].substring(2));\n    }\n\n    // Determine the number of decimal places\n    let numDecimalPlaces = null;\n    let decimalPlacesMatches = format.match(decimalPlacesRegex);\n    if (decimalPlacesMatches && !isNaN(parseInt(decimalPlacesMatches[0].substring(1)))) {\n      numDecimalPlaces = parseInt(decimalPlacesMatches[0].substring(1));\n      if (numDecimalPlaces > 20) {\n        numDecimalPlaces = 20;\n      }\n    }\n\n    // Float format\n    if (format.indexOf('f') > -1) {\n      let timeString = '';\n\n      if (numDecimalPlaces !== null) {\n        // Apply fixed number of decimal places\n        timeString = time.toFixed(numDecimalPlaces);\n      } else {\n        timeString = '' + time;\n      }\n\n      // Apply leading zeros\n      if (timeString.indexOf('.') > -1) {\n        return leftPadWithZeros(timeString, timeString.length + (leadingZeroes - timeString.indexOf('.')));\n      } else {\n        return leftPadWithZeros(timeString, leadingZeroes);\n      }\n\n    }\n    // Time format\n    else if (format.indexOf(':') > -1) {\n      let totalSeconds = Math.ceil(time);\n\n      // hh:mm:ss format\n      if (format.indexOf('hh') > -1) {\n        return secondsToTime(totalSeconds);\n      }\n      // mm:ss format\n      else {\n        let minutes = Math.floor(totalSeconds / 60);\n        let seconds = totalSeconds % 60;\n\n        return leftPadWithZeros(minutes, 2) + ':' + leftPadWithZeros(seconds, 2);\n      }\n    }\n    // Integer format\n    else {\n      return leftPadWithZeros(Math.ceil(time), leadingZeroes);\n    }\n  }\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI, SubtitleEvent, SubtitleTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\n/**\n * Helper class to handle all subtitle related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class SubtitleSwitchHandler {\n\n  private static SUBTITLES_OFF_KEY: string = 'null';\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshSubtitles();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      // TODO add support for multiple concurrent subtitle selections\n      if (value === SubtitleSwitchHandler.SUBTITLES_OFF_KEY) {\n        const currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\n        if (currentSubtitle) {\n          this.player.subtitles.disable(currentSubtitle.id);\n        }\n      } else {\n        this.player.subtitles.enable(value, true);\n      }\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    this.player.on(this.player.exports.PlayerEvent.SubtitleAdded, this.addSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleEnabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleDisabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleRemoved, this.removeSubtitle);\n    // Update subtitles when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.clearSubtitles);\n    // Update subtitles when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshSubtitles);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshSubtitles);\n  }\n\n  private addSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (!this.listElement.hasItem(subtitle.id)) {\n      this.listElement.addItem(subtitle.id, subtitle.label);\n    }\n  };\n\n  private removeSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (this.listElement.hasItem(subtitle.id)) {\n      this.listElement.removeItem(subtitle.id);\n    }\n  };\n\n  private selectCurrentSubtitle = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    let currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\n    this.listElement.selectItem(currentSubtitle ? currentSubtitle.id : SubtitleSwitchHandler.SUBTITLES_OFF_KEY);\n  };\n\n  private clearSubtitles = () => {\n    this.listElement.clearItems();\n  }\n\n  private refreshSubtitles = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    const offListItem: ListItem = {\n      key: SubtitleSwitchHandler.SUBTITLES_OFF_KEY,\n      label: i18n.getLocalizer('off'),\n    };\n\n    const subtitles = this.player.subtitles.list();\n    const subtitleToListItem = (subtitle: SubtitleTrack): ListItem => {\n      return { key: subtitle.id, label: subtitle.label };\n    };\n\n    this.listElement.synchronizeItems([\n      offListItem, ...subtitles.map(subtitleToListItem),\n    ]);\n    this.selectCurrentSubtitle();\n  };\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI, SubtitleEvent, SubtitleTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\nimport { SubtitleClosedCaptionsManager } from './components/subtitlesettings/subtitleclosedcaptionsmanager';\n\n/**\n * Helper class to handle all subtitle related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class SubtitleSwitchHandler {\n  private static SUBTITLES_OFF_KEY: string = 'off';\n  private static SUBTITLES_DEFAULT_KEY: string = 'en-US';\n  private static SUBTITLES_DEFAULT_KEY_SECONDARY: string = 'en-GB';\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n  private settingsManager: SubtitleClosedCaptionsManager;\n\n  constructor(\n    player: PlayerAPI,\n    element: ListSelector<ListSelectorConfig>,\n    uimanager: UIInstanceManager,\n    settingsManager: SubtitleClosedCaptionsManager,\n  ) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n    this.settingsManager = settingsManager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshSubtitles();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      // TODO add support for multiple concurrent subtitle selections\n      if (value === SubtitleSwitchHandler.SUBTITLES_OFF_KEY) {\n        const currentSubtitle = this.player.subtitles\n          .list()\n          .filter((subtitle) => subtitle.enabled)\n          .pop();\n        if (currentSubtitle) {\n          this.player.subtitles.disable(currentSubtitle.id);\n        }\n      } else {\n        this.player.subtitles.enable(value, true);\n      }\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    this.player.on(this.player.exports.PlayerEvent.SubtitleAdded, this.addSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleEnabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleDisabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleRemoved, this.removeSubtitle);\n    // Update subtitles when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.clearSubtitles);\n    // Update subtitles when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshSubtitles);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshSubtitles);\n  }\n\n  private addSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (!this.listElement.hasItem(subtitle.id)) {\n      this.listElement.addItem(subtitle.id, subtitle.label);\n    }\n  };\n\n  private removeSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (this.listElement.hasItem(subtitle.id)) {\n      this.listElement.removeItem(subtitle.id);\n    }\n  };\n\n  private selectCurrentSubtitle = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n    if (this.settingsManager.closedCaptions.isSet()) {\n      const filtered = this.player.subtitles\n        .list()\n        .filter((subtitle) => subtitle.label === this.settingsManager.closedCaptions.value);\n      if (filtered.length > 0) {\n        this.listElement.selectItem(filtered[0].id);\n      } else if (\n        this.settingsManager.closedCaptions.value === SubtitleSwitchHandler.SUBTITLES_OFF_KEY\n      ) {\n        this.listElement.selectItem(SubtitleSwitchHandler.SUBTITLES_OFF_KEY);\n      } else {\n        const getEnglishSubtitle = this.player.subtitles\n          .list()\n          .filter((subtitle) => subtitle.label.toLowerCase() === 'english');\n        if (getEnglishSubtitle.length > 0) {\n          this.listElement.selectItem(getEnglishSubtitle[0].id);\n        }\n      }\n    } else {\n      this.listElement.selectItem(SubtitleSwitchHandler.SUBTITLES_OFF_KEY);\n    }\n  };\n\n  private clearSubtitles = () => {\n    this.listElement.clearItems();\n  };\n\n  private sortOn(property: string) {\n    return function (a: any, b: any) {\n      if (a[property] < b[property]) {\n        return -1;\n      } else if (a[property] > b[property]) {\n        return 1;\n      } else {\n        return 0;\n      }\n    };\n  }\n\n  private refreshSubtitles = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    const offListItem: ListItem = {\n      key: SubtitleSwitchHandler.SUBTITLES_OFF_KEY,\n      label: i18n.getLocalizer('off'),\n    };\n\n    const subtitles = this.player.subtitles.list();\n    const subtitleToListItem = (subtitle: SubtitleTrack): ListItem => {\n      return { key: subtitle.id, label: subtitle.label };\n    };\n\n    const arrayList = subtitles.map(subtitleToListItem);\n    const filterEnglish = arrayList.filter((item) => item.label === 'English');\n    const resultantArrayList = [];\n\n    if (filterEnglish.length > 0) {\n      resultantArrayList.push(filterEnglish[0]);\n    }\n\n    const listOtherLanguage = arrayList.filter((item) => item.label !== 'English');\n    const resultantOtherLanguages = listOtherLanguage.sort(this.sortOn('label'));\n\n    this.listElement.synchronizeItems([\n      offListItem,\n      ...resultantArrayList,\n      ...resultantOtherLanguages,\n    ]);\n\n    this.selectCurrentSubtitle();\n  };\n}\n","// TODO change to internal (not exported) class, how to use in other files?\n/**\n * Executes a callback after a specified amount of time, optionally repeatedly until stopped.\n */\nexport class Timeout {\n\n  private readonly delay: number;\n  private readonly callback: () => void;\n  private readonly repeat: boolean;\n  // There's two setTimeout declarations, one on Window which returns type \"number\" and one in NodeJS which returns\n  // type \"Timer\". For unknown reasons builds on Jenkins fail due to a type mismatch when we use type \"number\" here,\n  // although it works on other platforms (e.g. Windows, Codeship).\n  // To work around the issue we use type \"any\". The type does not matter anyway because we're not working with\n  // this value except providing it to clearTimeout.\n  private timeoutOrIntervalId: any;\n  private active: boolean;\n\n  /**\n   * Creates a new timeout callback handler.\n   * @param delay the delay in milliseconds after which the callback should be executed\n   * @param callback the callback to execute after the delay time\n   * @param repeat if true, call the callback repeatedly in delay intervals\n   */\n  constructor(delay: number, callback: () => void, repeat: boolean = false) {\n    this.delay = delay;\n    this.callback = callback;\n    this.repeat = repeat;\n    this.timeoutOrIntervalId = 0;\n    this.active = false;\n  }\n\n  /**\n   * Starts the timeout and calls the callback when the timeout delay has passed.\n   * @returns {Timeout} the current timeout (so the start call can be chained to the constructor)\n   */\n  start(): this {\n    this.reset();\n    return this;\n  }\n\n  /**\n   * Clears the timeout. The callback will not be called if clear is called during the timeout.\n   */\n  clear(): void {\n    this.clearInternal();\n  }\n\n  /**\n   * Resets the passed timeout delay to zero. Can be used to defer the calling of the callback.\n   */\n  reset(): void {\n    this.clearInternal();\n\n    if (this.repeat) {\n      this.timeoutOrIntervalId = setInterval(this.callback, this.delay);\n    } else {\n      this.timeoutOrIntervalId = setTimeout(() => {\n        this.active = false;\n        this.callback();\n      }, this.delay);\n    }\n    this.active = true;\n  }\n\n  isActive(): boolean {\n    return this.active;\n  }\n\n  private clearInternal(): void {\n    if (this.repeat) {\n      clearInterval(this.timeoutOrIntervalId);\n    } else {\n      clearTimeout(this.timeoutOrIntervalId);\n    }\n    this.active = false;\n  }\n}","import { LoadingOverlay } from './components/loadingoverlay';\nimport { SubtitleOverlay } from './components/subtitleoverlay';\nimport { SettingsPanelPage } from './components/settingspanelpage';\nimport { SettingsPanelItem } from './components/settingspanelitem';\nimport { VideoQualitySelectBox } from './components/videoqualityselectbox';\nimport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\nimport { AudioTrackSelectBox } from './components/audiotrackselectbox';\nimport { AudioQualitySelectBox } from './components/audioqualityselectbox';\nimport { SettingsPanel } from './components/settingspanel';\nimport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\nimport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\nimport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\nimport { SubtitleSelectBox } from './components/subtitleselectbox';\nimport { ControlBar } from './components/controlbar';\nimport { Container } from './components/container';\nimport { CustomCloseButton } from './components/customclosebutton';\nimport { PlaybackTimeLabel, PlaybackTimeLabelMode } from './components/playbacktimelabel';\nimport { SeekBar } from './components/seekbar';\nimport { SeekBarLabel } from './components/seekbarlabel';\nimport { PlaybackToggleButton } from './components/playbacktogglebutton';\nimport { VolumeToggleButton } from './components/volumetogglebutton';\nimport { VolumeSlider } from './components/volumeslider';\nimport { Spacer } from './components/spacer';\nimport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\nimport { AirPlayToggleButton } from './components/airplaytogglebutton';\nimport { CastToggleButton } from './components/casttogglebutton';\nimport { VRToggleButton } from './components/vrtogglebutton';\nimport { SettingsToggleButton } from './components/settingstogglebutton';\nimport { FullscreenToggleButton } from './components/fullscreentogglebutton';\nimport { UIContainer } from './components/uicontainer';\nimport { BufferingOverlay } from './components/bufferingoverlay';\nimport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\nimport { CastStatusOverlay } from './components/caststatusoverlay';\nimport { TitleBar } from './components/titlebar';\nimport { RecommendationOverlay } from './components/recommendationoverlay';\nimport { Watermark } from './components/watermark';\nimport { ErrorMessageOverlay } from './components/errormessageoverlay';\nimport { AdClickOverlay } from './components/adclickoverlay';\nimport { AdMessageLabel } from './components/admessagelabel';\nimport { AdSkipButton } from './components/adskipbutton';\nimport { CloseButton } from './components/closebutton';\nimport { Controls } from './components/controls';\nimport { PlayButton } from './components/playbutton';\nimport { RewindButton } from './components/rewind';\nimport { ForwardButton } from './components/forward';\nimport { ChromecastButton } from './components/chromecastbutton';\nimport { NextEpisodeButton } from './components/nextepisodebutton';\nimport { Advisory } from './components/advisory';\nimport { FontSizeListBox } from './components/subtitlesettings/fontsizelistbox';\nimport { MetadataAdvisory, MetadataAdvisoryContent } from './components/metadataadvisory';\nimport { MetadataLabel, MetadataLabelContent } from './components/metadatalabel';\nimport { PlayerUtils } from './playerutils';\nimport { Label } from './components/label';\nimport { CastUIContainer } from './components/castuicontainer';\nimport { UIConditionContext, UIManager } from './uimanager';\nimport { UIConfig } from './uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\nimport { SubtitleListBox } from './components/subtitlelistbox';\nimport { AudioTrackListBox } from './components/audiotracklistbox';\nimport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\nimport { RootNavigationGroup } from './spatialnavigation/rootnavigationgroup';\nimport { ListNavigationGroup, ListOrientation } from './spatialnavigation/ListNavigationGroup';\nimport { SubtitleSettingsManager } from './components/subtitlesettings/subtitlesettingsmanager';\nimport { SubtitleClosedCaptionsManager } from './components/subtitlesettings/subtitleclosedcaptionsmanager';\nimport { CloseCaptionsListBox } from './components/subtitlesettings/closecaptionslistbox';\nimport { BritboxPlaybackToggleOverlay } from './components/britboxplaybacktoggleoverlay';\n\nexport namespace UIFactory {\n  export function buildDefaultUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildBritboxSmallScreenUI(player, config);\n  }\n\n  export function buildDefaultSmallScreenUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildBritboxSmallScreenUI(player, config);\n  }\n\n  export function buildDefaultBritbox(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildBritboxSmallScreenUI(player, config);\n  }\n\n  export function buildDefaultCastReceiverUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildModernCastReceiverUI(player, config);\n  }\n\n  export function buildDefaultTvUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildModernTvUI(player, config);\n  }\n\n  export function modernUI() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.video.quality'),\n          new VideoQualitySelectBox(),\n        ),\n        new SettingsPanelItem(i18n.getLocalizer('speed'), new PlaybackSpeedSelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.track'), new AudioTrackSelectBox()),\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.audio.quality'),\n          new AudioQualitySelectBox(),\n        ),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [mainSettingsPanelPage],\n      hidden: true,\n    });\n\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\n      settingsPanel: settingsPanel,\n      overlay: subtitleOverlay,\n    });\n\n    const subtitleSelectBox = new SubtitleSelectBox();\n\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\n      targetPage: subtitleSettingsPanelPage,\n      container: settingsPanel,\n      ariaLabel: i18n.getLocalizer('settings.subtitles'),\n      text: i18n.getLocalizer('open'),\n    });\n\n    mainSettingsPanelPage.addComponent(\n      new SettingsPanelItem(\n        new SubtitleSettingsLabel({\n          text: i18n.getLocalizer('settings.subtitles'),\n          opener: subtitleSettingsOpenButton,\n        }),\n        subtitleSelectBox,\n        {\n          role: 'menubar',\n        },\n      ),\n    );\n\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\n\n    let controlBar = new ControlBar({\n      components: [\n        settingsPanel,\n        new Container({\n          components: [\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n              hideInLivePlayback: true,\n            }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.TotalTime,\n              cssClasses: ['text-right'],\n            }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n        new Container({\n          components: [\n            new PlaybackToggleButton(),\n            new VolumeToggleButton(),\n            new VolumeSlider(),\n            new Spacer(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n          cssClasses: ['controlbar-bottom'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new CastStatusOverlay(),\n        controlBar,\n        new TitleBar(),\n        new RecommendationOverlay(),\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernAdsUI() {\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new AdClickOverlay(),\n        new PlaybackToggleOverlay(),\n        new Container({\n          components: [\n            new AdMessageLabel({\n              text: i18n.getLocalizer('ads.remainingTime'),\n            }),\n            new AdSkipButton(),\n          ],\n          cssClass: 'ui-ads-status',\n        }),\n        new ControlBar({\n          components: [\n            new Container({\n              components: [\n                new PlaybackToggleButton(),\n                new VolumeToggleButton(),\n                new VolumeSlider(),\n                new Spacer(),\n                new FullscreenToggleButton(),\n              ],\n              cssClasses: ['controlbar-bottom'],\n            }),\n          ],\n        }),\n      ],\n      cssClasses: ['ui-skin-ads'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernSmallScreenUI() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.video.quality'),\n          new VideoQualitySelectBox(),\n        ),\n        new SettingsPanelItem(i18n.getLocalizer('speed'), new PlaybackSpeedSelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.track'), new AudioTrackSelectBox()),\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.audio.quality'),\n          new AudioQualitySelectBox(),\n        ),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [mainSettingsPanelPage],\n      hidden: true,\n      pageTransitionAnimation: false,\n      hideDelay: -1,\n    });\n\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\n      settingsPanel: settingsPanel,\n      overlay: subtitleOverlay,\n    });\n\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\n      targetPage: subtitleSettingsPanelPage,\n      container: settingsPanel,\n      ariaLabel: i18n.getLocalizer('settings.subtitles'),\n      text: i18n.getLocalizer('open'),\n    });\n\n    const subtitleSelectBox = new SubtitleSelectBox();\n\n    mainSettingsPanelPage.addComponent(\n      new SettingsPanelItem(\n        new SubtitleSettingsLabel({\n          text: i18n.getLocalizer('settings.subtitles'),\n          opener: subtitleSettingsOpenButton,\n        }),\n        subtitleSelectBox,\n        {\n          role: 'menubar',\n        },\n      ),\n    );\n\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\n\n    settingsPanel.addComponent(new CloseButton({ target: settingsPanel }));\n    subtitleSettingsPanelPage.addComponent(new CloseButton({ target: settingsPanel }));\n\n    let controlBar = new ControlBar({\n      components: [\n        new Container({\n          components: [\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n              hideInLivePlayback: true,\n            }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.TotalTime,\n              cssClasses: ['text-right'],\n            }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new CastStatusOverlay(),\n        new PlaybackToggleOverlay(),\n        new RecommendationOverlay(),\n        controlBar,\n        new TitleBar({\n          components: [\n            new MetadataLabel({ content: MetadataLabelContent.Title }),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new VolumeToggleButton(),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n        }),\n        settingsPanel,\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-smallscreen'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernBritboxScreenUI() {\n    let subtitleOverlay = new SubtitleOverlay();\n    let manager = new SubtitleSettingsManager();\n    let managerClosedCaptions = new SubtitleClosedCaptionsManager();\n\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.subtitles.font.size'),\n          new FontSizeListBox({\n            overlay: subtitleOverlay,\n            settingsManager: manager,\n            cssClass: 'ui-list',\n          }),\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer('settings.subtitles'),\n          new CloseCaptionsListBox({\n            overlay: subtitleOverlay,\n            settingsManager: managerClosedCaptions,\n            cssClass: 'ui-list',\n          }),\n        ),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [mainSettingsPanelPage],\n      hidden: true,\n      pageTransitionAnimation: false,\n      hideDelay: -1,\n    });\n\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\n      settingsPanel: settingsPanel,\n      overlay: subtitleOverlay,\n    });\n\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\n\n    settingsPanel.addComponent(new CloseButton({ target: settingsPanel }));\n    subtitleSettingsPanelPage.addComponent(new CloseButton({ target: settingsPanel }));\n\n    let controlBar = new ControlBar({\n      hidden: true,\n      components: [\n        new Container({\n          components: [\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n            }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({\n              hideInLivePlayback: true,\n              timeLabelMode: PlaybackTimeLabelMode.TotalTime,\n              cssClasses: ['text-right'],\n            }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n        new Container({\n          components: [\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            // new NextEpisodeButton(),\n          ],\n          cssClass: 'britbox-container-bottom',\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new TitleBar({\n          hidden: false,\n          keepWithError: true,\n          components: [\n            new Container({\n              components: [new CustomCloseButton()],\n              cssClass: 'ui-actions left back',\n            }),\n          ],\n          cssClass: 'ui-titlebar titlebar-back',\n        }),\n        new BufferingOverlay(),\n        new LoadingOverlay({\n          showDelayMs: 0,\n        }),\n        new BritboxPlaybackToggleOverlay(),\n        new RecommendationOverlay(),\n        controlBar,\n        new Advisory({\n          components: [\n            new MetadataAdvisory({\n              content: MetadataAdvisoryContent.Classification,\n            }),\n            new MetadataAdvisory({\n              content: MetadataAdvisoryContent.Description,\n            }),\n          ],\n          cssClass: 'advisory',\n        }),\n        new Controls({\n          components: [new RewindButton(), new PlayButton(), new ForwardButton()],\n          cssClass: 'britbox-controls',\n        }),\n        new TitleBar({\n          components: [\n            new Container({\n              components: [],\n              cssClass: 'ui-actions left',\n            }),\n            new Container({\n              components: [\n                new MetadataLabel({ content: MetadataLabelContent.Title }),\n                // new MetadataLabel({\n                //   content: MetadataLabelContent.Description,\n                // }),\n              ],\n              cssClasses: ['ui-title'],\n            }),\n            new Container({\n              components: [\n                new AirPlayToggleButton(),\n                new CastToggleButton(),\n                new PictureInPictureToggleButton(),\n                new AirPlayToggleButton(),\n                new FullscreenToggleButton(),\n                // new ChromecastButton(),\n              ],\n              cssClass: 'ui-actions',\n            }),\n          ],\n        }),\n        settingsPanel,\n        new ErrorMessageOverlay({\n          hidden: false,\n        }),\n      ],\n      cssClasses: ['ui-skin-smallscreen', 'britbox'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernSmallScreenAdsUI() {\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new AdClickOverlay(),\n        new PlaybackToggleOverlay(),\n        new TitleBar({\n          components: [\n            // dummy label with no content to move buttons to the right\n            new Label({ cssClass: 'label-metadata-title' }),\n            new FullscreenToggleButton(),\n          ],\n        }),\n        new Container({\n          components: [\n            new AdMessageLabel({ text: 'Ad: {remainingTime} secs' }),\n            new AdSkipButton(),\n          ],\n          cssClass: 'ui-ads-status',\n        }),\n      ],\n      cssClasses: ['ui-skin-ads', 'ui-skin-smallscreen'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernCastReceiverUI() {\n    let controlBar = new ControlBar({\n      components: [\n        new Container({\n          components: [\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n              hideInLivePlayback: true,\n            }),\n            new SeekBar({ smoothPlaybackPositionUpdateIntervalMs: -1 }),\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.TotalTime,\n              cssClasses: ['text-right'],\n            }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n      ],\n    });\n\n    return new CastUIContainer({\n      components: [\n        new SubtitleOverlay(),\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new Watermark(),\n        controlBar,\n        new TitleBar({ keepHiddenWithoutMetadata: true }),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-cast-receiver'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function buildModernUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    // show smallScreen UI only on mobile/handheld devices\n    let smallScreenSwitchWidth = 600;\n\n    return new UIManager(\n      player,\n      [\n        {\n          ui: modernSmallScreenAdsUI(),\n          condition: (context: UIConditionContext) => {\n            return (\n              context.isMobile &&\n              context.documentWidth < smallScreenSwitchWidth &&\n              context.isAd &&\n              context.adRequiresUi\n            );\n          },\n        },\n        {\n          ui: modernAdsUI(),\n          condition: (context: UIConditionContext) => {\n            return context.isAd && context.adRequiresUi;\n          },\n        },\n        {\n          ui: modernSmallScreenUI(),\n          condition: (context: UIConditionContext) => {\n            return (\n              !context.isAd &&\n              !context.adRequiresUi &&\n              context.isMobile &&\n              context.documentWidth < smallScreenSwitchWidth\n            );\n          },\n        },\n        {\n          ui: modernUI(),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi;\n          },\n        },\n      ],\n      config,\n    );\n  }\n\n  export function buildModernSmallScreenUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return new UIManager(\n      player,\n      [\n        {\n          ui: modernSmallScreenAdsUI(),\n          condition: (context: UIConditionContext) => {\n            return context.isAd && context.adRequiresUi;\n          },\n        },\n        {\n          ui: modernSmallScreenUI(),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi;\n          },\n        },\n      ],\n      config,\n    );\n  }\n\n  export function buildBritboxSmallScreenUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return new UIManager(\n      player,\n      [\n        {\n          ui: modernSmallScreenAdsUI(),\n          condition: (context: UIConditionContext) => {\n            return context.isAd && context.adRequiresUi;\n          },\n        },\n        {\n          ui: modernBritboxScreenUI(),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi;\n          },\n        },\n      ],\n      config,\n    );\n  }\n\n  export function buildModernCastReceiverUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return new UIManager(player, modernCastReceiverUI(), config);\n  }\n\n  export function buildModernTvUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return new UIManager(\n      player,\n      [\n        {\n          ...modernTvUI(),\n        },\n      ],\n      config,\n    );\n  }\n\n  export function modernTvUI() {\n    const subtitleListBox = new SubtitleListBox();\n    const subtitleListPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [new SettingsPanelItem(null, subtitleListBox)],\n        }),\n      ],\n      hidden: true,\n    });\n\n    const audioTrackListBox = new AudioTrackListBox();\n    const audioTrackListPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [new SettingsPanelItem(null, audioTrackListBox)],\n        }),\n      ],\n      hidden: true,\n    });\n\n    const seekBar = new SeekBar({ label: new SeekBarLabel() });\n    const playbackToggleOverlay = new PlaybackToggleOverlay();\n    const subtitleToggleButton = new SettingsToggleButton({\n      settingsPanel: subtitleListPanel,\n      autoHideWhenNoActiveSettings: true,\n      cssClass: 'ui-subtitlesettingstogglebutton',\n      text: i18n.getLocalizer('settings.subtitles'),\n    });\n    const audioToggleButton = new SettingsToggleButton({\n      settingsPanel: audioTrackListPanel,\n      autoHideWhenNoActiveSettings: true,\n      cssClass: 'ui-audiotracksettingstogglebutton',\n      ariaLabel: i18n.getLocalizer('settings.audio.track'),\n      text: i18n.getLocalizer('settings.audio.track'),\n    });\n    const uiContainer = new UIContainer({\n      components: [\n        new SubtitleOverlay(),\n        new BufferingOverlay(),\n        playbackToggleOverlay,\n        new ControlBar({\n          components: [\n            new Container({\n              components: [\n                new PlaybackTimeLabel({\n                  timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n                  hideInLivePlayback: true,\n                }),\n                seekBar,\n                new PlaybackTimeLabel({\n                  timeLabelMode: PlaybackTimeLabelMode.RemainingTime,\n                  cssClasses: ['text-right'],\n                }),\n              ],\n              cssClasses: ['controlbar-top'],\n            }),\n          ],\n        }),\n        new TitleBar({\n          components: [\n            new Container({\n              components: [\n                new MetadataLabel({ content: MetadataLabelContent.Title }),\n                subtitleToggleButton,\n                audioToggleButton,\n              ],\n              cssClasses: ['ui-titlebar-top'],\n            }),\n            new Container({\n              components: [\n                new MetadataLabel({\n                  content: MetadataLabelContent.Description,\n                }),\n                subtitleListPanel,\n                audioTrackListPanel,\n              ],\n              cssClasses: ['ui-titlebar-bottom'],\n            }),\n          ],\n        }),\n        new RecommendationOverlay(),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-tv'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n\n    const spatialNavigation = new SpatialNavigation(\n      new RootNavigationGroup(\n        uiContainer,\n        playbackToggleOverlay,\n        seekBar,\n        audioToggleButton,\n        subtitleToggleButton,\n      ),\n      new ListNavigationGroup(ListOrientation.Vertical, subtitleListPanel, subtitleListBox),\n      new ListNavigationGroup(ListOrientation.Vertical, audioTrackListPanel, audioTrackListBox),\n    );\n\n    return {\n      ui: uiContainer,\n      spatialNavigation: spatialNavigation,\n    };\n  }\n}\n","import { UIContainer } from './components/uicontainer';\nimport { DOM } from './dom';\nimport { Component, ComponentConfig } from './components/component';\nimport { Container } from './components/container';\nimport { SeekBar, SeekBarMarker } from './components/seekbar';\nimport { NoArgs, EventDispatcher, CancelEventArgs } from './eventdispatcher';\nimport { UIUtils } from './uiutils';\nimport { ArrayUtils } from './arrayutils';\nimport { BrowserUtils } from './browserutils';\nimport { TimelineMarker, UIConfig } from './uiconfig';\nimport {\n  PlayerAPI,\n  PlayerEventCallback,\n  PlayerEventBase,\n  PlayerEvent,\n  AdEvent,\n  LinearAd,\n} from 'bitmovin-player';\nimport { VolumeController } from './volumecontroller';\nimport { i18n, CustomVocabulary, Vocabularies } from './localization/i18n';\nimport { FocusVisibilityTracker } from './focusvisibilitytracker';\nimport { isMobileV3PlayerAPI, MobileV3PlayerAPI, MobileV3PlayerEvent } from './mobilev3playerapi';\nimport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\n\nexport interface LocalizationConfig {\n  /**\n   * Sets the desired language, and falls back to 'en' if there is no vocabulary for the desired language. Setting it\n   * to \"auto\" will enable language detection from the browser's locale.\n   */\n  language?: 'auto' | 'en' | 'de' | string;\n  /**\n   * A map of `language` to {@link CustomVocabulary} definitions. Can be used to overwrite default translations and add\n   * custom strings or additional languages.\n   */\n  vocabularies?: Vocabularies;\n}\n\nexport interface InternalUIConfig extends UIConfig {\n  events: {\n    /**\n     * Fires when the configuration has been updated/changed.\n     */\n    onUpdated: EventDispatcher<UIManager, void>;\n  };\n  volumeController: VolumeController;\n}\n\n/**\n * The context that will be passed to a {@link UIConditionResolver} to determine if it's conditions fulfil the context.\n */\nexport interface UIConditionContext {\n  /**\n   * Tells if the player is loading or playing an ad.\n   */\n  isAd: boolean;\n  /**\n   * Tells if the current ad requires an external UI, if {@link #isAd} is true.\n   */\n  adRequiresUi: boolean;\n  /**\n   * Tells if the player is currently in fullscreen mode.\n   */\n  isFullscreen: boolean;\n  /**\n   * Tells if the UI is running in a mobile browser.\n   */\n  isMobile: boolean;\n  /**\n   * Tells if the player is in playing or paused state.\n   */\n  isPlaying: boolean;\n  /**\n   * The width of the player/UI element.\n   */\n  width: number;\n  /**\n   * The width of the document where the player/UI is embedded in.\n   */\n  documentWidth: number;\n}\n\n/**\n * Resolves the conditions of its associated UI in a {@link UIVariant} upon a {@link UIConditionContext} and decides\n * if the UI should be displayed. If it returns true, the UI is a candidate for display; if it returns false, it will\n * not be displayed in the given context.\n */\nexport interface UIConditionResolver {\n  (context: UIConditionContext): boolean;\n}\n\n/**\n * Associates a UI instance with an optional {@link UIConditionResolver} that determines if the UI should be displayed.\n */\nexport interface UIVariant {\n  ui: UIContainer;\n  condition?: UIConditionResolver;\n  spatialNavigation?: SpatialNavigation;\n}\n\nexport interface ActiveUiChangedArgs extends NoArgs {\n  /**\n   * The previously active {@link UIInstanceManager} prior to the {@link UIManager} switching to a different UI variant.\n   */\n  previousUi: UIInstanceManager;\n  /**\n   * The currently active {@link UIInstanceManager}.\n   */\n  currentUi: UIInstanceManager;\n}\n\nexport class UIManager {\n  private player: PlayerAPI;\n  private uiContainerElement: DOM;\n  private uiVariants: UIVariant[];\n  private uiInstanceManagers: InternalUIInstanceManager[];\n  private currentUi: InternalUIInstanceManager;\n  private config: InternalUIConfig; // Conjunction of provided uiConfig and sourceConfig from the player\n  private managerPlayerWrapper: PlayerWrapper;\n  private focusVisibilityTracker: FocusVisibilityTracker;\n\n  private events = {\n    onUiVariantResolve: new EventDispatcher<UIManager, UIConditionContext>(),\n    onActiveUiChanged: new EventDispatcher<UIManager, ActiveUiChangedArgs>(),\n  };\n\n  /**\n   * Creates a UI manager with a single UI variant that will be permanently shown.\n   * @param player the associated player of this UI\n   * @param ui the UI to add to the player\n   * @param uiconfig optional UI configuration\n   */\n  constructor(player: PlayerAPI, ui: UIContainer, uiconfig?: UIConfig);\n  /**\n   * Creates a UI manager with a list of UI variants that will be dynamically selected and switched according to\n   * the context of the UI.\n   *\n   * Every time the UI context changes, the conditions of the UI variants will be sequentially resolved and the first\n   * UI, whose condition evaluates to true, will be selected and displayed. The last variant in the list might omit the\n   * condition resolver and will be selected as default/fallback UI when all other conditions fail. If there is no\n   * fallback UI and all conditions fail, no UI will be displayed.\n   *\n   * @param player the associated player of this UI\n   * @param uiVariants a list of UI variants that will be dynamically switched\n   * @param uiconfig optional UI configuration\n   */\n  constructor(player: PlayerAPI, uiVariants: UIVariant[], uiconfig?: UIConfig);\n  constructor(\n    player: PlayerAPI,\n    playerUiOrUiVariants: UIContainer | UIVariant[],\n    uiconfig: UIConfig = {},\n  ) {\n    if (playerUiOrUiVariants instanceof UIContainer) {\n      // Single-UI constructor has been called, transform arguments to UIVariant[] signature\n      let playerUi = <UIContainer>playerUiOrUiVariants;\n      let uiVariants = [];\n\n      // Add the default player UI\n      uiVariants.push({ ui: playerUi });\n\n      this.uiVariants = uiVariants;\n    } else {\n      // Default constructor (UIVariant[]) has been called\n      this.uiVariants = <UIVariant[]>playerUiOrUiVariants;\n    }\n\n    this.player = player;\n    this.managerPlayerWrapper = new PlayerWrapper(player);\n\n    // ensure that at least the metadata object does exist in the uiconfig\n    uiconfig.metadata = uiconfig.metadata ? uiconfig.metadata : {};\n\n    this.config = {\n      playbackSpeedSelectionEnabled: true, // Switch on speed selector by default\n      autoUiVariantResolve: true, // Switch on auto UI resolving by default\n      disableAutoHideWhenHovered: false, // Disable auto hide when UI is hovered\n      enableSeekPreview: true,\n      ...uiconfig,\n      events: {\n        onUpdated: new EventDispatcher<UIManager, void>(),\n      },\n      volumeController: new VolumeController(this.managerPlayerWrapper.getPlayer()),\n    };\n\n    /**\n     * Gathers configuration data from the UI config and player source config and creates a merged UI config\n     * that is used throughout the UI instance.\n     */\n    const updateConfig = () => {\n      const playerSourceConfig = player.getSource() || {};\n      this.config.metadata = JSON.parse(JSON.stringify(uiconfig.metadata || {}));\n\n      // Extract the UI-related config properties from the source config\n      const playerSourceUiConfig: UIConfig = {\n        metadata: {\n          // TODO move metadata into source.metadata namespace in player v8\n          title: playerSourceConfig.title,\n          description: playerSourceConfig.description,\n          markers: (playerSourceConfig as any).markers,\n        },\n        recommendations: (playerSourceConfig as any).recommendations,\n      };\n\n      // Player source config takes precedence over the UI config, because the config in the source is attached\n      // to a source which changes with every player.load, whereas the UI config stays the same for the whole\n      // lifetime of the player instance.\n      this.config.metadata.title = playerSourceUiConfig.metadata.title || uiconfig.metadata.title;\n      this.config.metadata.description =\n        playerSourceUiConfig.metadata.description || uiconfig.metadata.description;\n      this.config.metadata.markers =\n        playerSourceUiConfig.metadata.markers || uiconfig.metadata.markers || [];\n      this.config.recommendations =\n        playerSourceUiConfig.recommendations || uiconfig.recommendations || [];\n    };\n\n    updateConfig();\n\n    // Update the source configuration when a new source is loaded and dispatch onUpdated\n    const updateSource = () => {\n      updateConfig();\n      this.config.events.onUpdated.dispatch(this);\n    };\n\n    const wrappedPlayer = this.managerPlayerWrapper.getPlayer();\n\n    wrappedPlayer.on(this.player.exports.PlayerEvent.SourceLoaded, updateSource);\n\n    // The PlaylistTransition event is only available on Mobile v3 for now.\n    // This event is fired when a new source becomes active in the player.\n    if (isMobileV3PlayerAPI(wrappedPlayer)) {\n      wrappedPlayer.on(MobileV3PlayerEvent.PlaylistTransition, updateSource);\n    }\n\n    if (uiconfig.container) {\n      // Unfortunately \"uiContainerElement = new DOM(config.container)\" will not accept the container with\n      // string|HTMLElement type directly, although it accepts both types, so we need to spit these two cases up here.\n      // TODO check in upcoming TS versions if the container can be passed in directly, or fix the constructor\n      this.uiContainerElement =\n        uiconfig.container instanceof HTMLElement\n          ? new DOM(uiconfig.container)\n          : new DOM(uiconfig.container);\n    } else {\n      this.uiContainerElement = new DOM(player.getContainer());\n    }\n\n    // Create UI instance managers for the UI variants\n    // The instance managers map to the corresponding UI variants by their array index\n    this.uiInstanceManagers = [];\n    let uiVariantsWithoutCondition = [];\n    for (let uiVariant of this.uiVariants) {\n      if (uiVariant.condition == null) {\n        // Collect variants without conditions for error checking\n        uiVariantsWithoutCondition.push(uiVariant);\n      }\n      // Create the instance manager for a UI variant\n      this.uiInstanceManagers.push(\n        new InternalUIInstanceManager(\n          player,\n          uiVariant.ui,\n          this.config,\n          uiVariant.spatialNavigation,\n        ),\n      );\n    }\n    // Make sure that there is only one UI variant without a condition\n    // It does not make sense to have multiple variants without condition, because only the first one in the list\n    // (the one with the lowest index) will ever be selected.\n    if (uiVariantsWithoutCondition.length > 1) {\n      throw Error('Too many UIs without a condition: You cannot have more than one default UI');\n    }\n    // Make sure that the default UI variant, if defined, is at the end of the list (last index)\n    // If it comes earlier, the variants with conditions that come afterwards will never be selected because the\n    // default variant without a condition always evaluates to 'true'\n    if (\n      uiVariantsWithoutCondition.length > 0 &&\n      uiVariantsWithoutCondition[0] !== this.uiVariants[this.uiVariants.length - 1]\n    ) {\n      throw Error(\n        'Invalid UI variant order: the default UI (without condition) must be at the end of the list',\n      );\n    }\n\n    let adStartedEvent: AdEvent = null; // keep the event stored here during ad playback\n\n    // Dynamically select a UI variant that matches the current UI condition.\n    let resolveUiVariant = (event: PlayerEventBase) => {\n      // Make sure that the AdStarted event data is persisted through ad playback in case other events happen\n      // in the meantime, e.g. player resize. We need to store this data because there is no other way to find out\n      // ad details while an ad is playing (in v8.0 at least; from v8.1 there will be ads.getActiveAd()).\n      // Existing event data signals that an ad is currently active (instead of ads.isLinearAdActive()).\n      if (event != null) {\n        switch (event.type) {\n          // The ads UI is shown upon the first AdStarted event. Subsequent AdStarted events within an ad break\n          // will not change the condition context and thus not lead to undesired UI variant resolving.\n          // The ads UI is shown upon AdStarted instead of AdBreakStarted because there can be a loading delay\n          // between these two events in the player, and the AdBreakStarted event does not carry any metadata to\n          // initialize the ads UI, so it would be rendered in an uninitialized state for a certain amount of time.\n          // TODO show ads UI upon AdBreakStarted and display loading overlay between AdBreakStarted and first AdStarted\n          // TODO display loading overlay between AdFinished and next AdStarted\n          case player.exports.PlayerEvent.AdStarted:\n            adStartedEvent = event as AdEvent;\n            break;\n          // The ads UI is hidden only when the ad break is finished, i.e. not on AdFinished events. This way we keep\n          // the ads UI variant active throughout an ad break, as reacting to AdFinished would lead to undesired UI\n          // variant switching between two ads in an ad break, e.g. ads UI -> AdFinished -> content UI ->\n          // AdStarted -> ads UI.\n          case player.exports.PlayerEvent.AdBreakFinished:\n            adStartedEvent = null;\n            // When switching to a variant for the first time, a config.events.onUpdated event is fired to trigger a UI\n            // update of the new variant, because most components subscribe to this event to update themselves. When\n            // switching to the ads UI on the first AdStarted, all UI variants update themselves with the ad data, so\n            // when switching back to the \"normal\" UI it will carry properties of the ad instead of the main content.\n            // We thus fire this event here to force an UI update with the properties of the main content. This is\n            // basically a hack because the config.events.onUpdated event is abused in many places and not just used\n            // for config updates (e.g. adding a marker to the seekbar).\n            // TODO introduce an event that is fired when the playback content is updated, a switch to/from ads\n            this.config.events.onUpdated.dispatch(this);\n            break;\n          // When a new source is loaded during ad playback, there will be no Ad(Break)Finished event\n          case player.exports.PlayerEvent.SourceLoaded:\n          case player.exports.PlayerEvent.SourceUnloaded:\n            adStartedEvent = null;\n            break;\n        }\n      }\n\n      // Detect if an ad has started\n      let isAd = adStartedEvent != null;\n      let adRequiresUi = false;\n      if (isAd) {\n        let ad = adStartedEvent.ad;\n        // for now only linear ads can request a UI\n        if (ad.isLinear) {\n          let linearAd = ad as LinearAd;\n          adRequiresUi = (linearAd.uiConfig && linearAd.uiConfig.requestsUi) || false;\n        }\n      }\n\n      if (adRequiresUi) {\n        // we dispatch onUpdated event because if there are multiple adBreaks for same position\n        // `Play` and `Playing` events will not be dispatched which will cause `PlaybackButton` state\n        // to be out of sync\n        this.config.events.onUpdated.dispatch(this);\n      }\n\n      this.resolveUiVariant(\n        {\n          isAd: isAd,\n          adRequiresUi: adRequiresUi,\n        },\n        (context) => {\n          // If this is an ad UI, we need to relay the saved ON_AD_STARTED event data so ad components can configure\n          // themselves for the current ad.\n          if (context.isAd) {\n            /* Relay the ON_AD_STARTED event to the ads UI\n             *\n             * Because the ads UI is initialized in the ON_AD_STARTED handler, i.e. when the ON_AD_STARTED event has\n             * already been fired, components in the ads UI that listen for the ON_AD_STARTED event never receive it.\n             * Since this can break functionality of components that rely on this event, we relay the event to the\n             * ads UI components with the following call.\n             */\n            this.currentUi\n              .getWrappedPlayer()\n              .fireEventInUI(this.player.exports.PlayerEvent.AdStarted, adStartedEvent);\n          }\n        },\n      );\n    };\n\n    // Listen to the following events to trigger UI variant resolution\n    if (this.config.autoUiVariantResolve) {\n      this.managerPlayerWrapper\n        .getPlayer()\n        .on(this.player.exports.PlayerEvent.SourceLoaded, resolveUiVariant);\n      this.managerPlayerWrapper\n        .getPlayer()\n        .on(this.player.exports.PlayerEvent.SourceUnloaded, resolveUiVariant);\n      this.managerPlayerWrapper\n        .getPlayer()\n        .on(this.player.exports.PlayerEvent.Play, resolveUiVariant);\n      this.managerPlayerWrapper\n        .getPlayer()\n        .on(this.player.exports.PlayerEvent.Paused, resolveUiVariant);\n      this.managerPlayerWrapper\n        .getPlayer()\n        .on(this.player.exports.PlayerEvent.AdStarted, resolveUiVariant);\n      this.managerPlayerWrapper\n        .getPlayer()\n        .on(this.player.exports.PlayerEvent.AdBreakFinished, resolveUiVariant);\n      this.managerPlayerWrapper\n        .getPlayer()\n        .on(this.player.exports.PlayerEvent.PlayerResized, resolveUiVariant);\n      this.managerPlayerWrapper\n        .getPlayer()\n        .on(this.player.exports.PlayerEvent.ViewModeChanged, resolveUiVariant);\n    }\n\n    this.focusVisibilityTracker = new FocusVisibilityTracker('{{PREFIX}}');\n\n    // Initialize the UI\n    resolveUiVariant(null);\n  }\n\n  /**\n   * Exposes i18n.getLocalizer() function\n   * @returns {I18nApi.getLocalizer()}\n   */\n  static localize<V extends CustomVocabulary<Record<string, string>>>(key: keyof V) {\n    return i18n.getLocalizer(key);\n  }\n\n  /**\n   * Provide configuration to support Custom UI languages\n   * default language: 'en'\n   */\n  static setLocalizationConfig(localizationConfig: LocalizationConfig) {\n    i18n.setConfig(localizationConfig);\n  }\n\n  getConfig(): UIConfig {\n    return this.config;\n  }\n\n  /**\n   * Returns the list of UI variants as passed into the constructor of {@link UIManager}.\n   * @returns {UIVariant[]} the list of available UI variants\n   */\n  getUiVariants(): UIVariant[] {\n    return this.uiVariants;\n  }\n\n  /**\n   * Switches to a UI variant from the list returned by {@link getUiVariants}.\n   * @param {UIVariant} uiVariant the UI variant to switch to\n   * @param {() => void} onShow a callback that is executed just before the new UI variant is shown\n   */\n  switchToUiVariant(uiVariant: UIVariant, onShow?: () => void): void {\n    let uiVariantIndex = this.uiVariants.indexOf(uiVariant);\n\n    const previousUi = this.currentUi;\n    const nextUi: InternalUIInstanceManager = this.uiInstanceManagers[uiVariantIndex];\n    // Determine if the UI variant is changing\n    // Only if the UI variant is changing, we need to do some stuff. Else we just leave everything as-is.\n    if (nextUi === this.currentUi) {\n      return;\n      // console.log('switched from ', this.currentUi ? this.currentUi.getUI() : 'none',\n      //   ' to ', nextUi ? nextUi.getUI() : 'none');\n    }\n\n    // Hide the currently active UI variant\n    if (this.currentUi) {\n      this.currentUi.getUI().hide();\n    }\n\n    // Assign the new UI variant as current UI\n    this.currentUi = nextUi;\n\n    // When we switch to a different UI instance, there's some additional stuff to manage. If we do not switch\n    // to an instance, we're done here.\n    if (this.currentUi == null) {\n      return;\n    }\n    // Add the UI to the DOM (and configure it) the first time it is selected\n    if (!this.currentUi.isConfigured()) {\n      this.addUi(this.currentUi);\n      // ensure that the internal state is ready for the upcoming show call\n      if (!this.currentUi.getUI().isHidden()) {\n        this.currentUi.getUI().hide();\n      }\n    }\n    if (onShow) {\n      onShow();\n    }\n    this.currentUi.getUI().show();\n    this.events.onActiveUiChanged.dispatch(this, { previousUi, currentUi: nextUi });\n  }\n\n  /**\n   * Triggers a UI variant switch as triggered by events when automatic switching is enabled. It allows to overwrite\n   * properties of the {@link UIConditionContext}.\n   * @param {Partial<UIConditionContext>} context an optional set of properties that overwrite properties of the\n   *   automatically determined context\n   * @param {(context: UIConditionContext) => void} onShow a callback that is executed just before the new UI variant\n   *   is shown (if a switch is happening)\n   */\n  resolveUiVariant(\n    context: Partial<UIConditionContext> = {},\n    onShow?: (context: UIConditionContext) => void,\n  ): void {\n    // Determine the current context for which the UI variant will be resolved\n    const defaultContext: UIConditionContext = {\n      isAd: false,\n      adRequiresUi: false,\n      isFullscreen: this.player.getViewMode() === this.player.exports.ViewMode.Fullscreen,\n      isMobile: BrowserUtils.isMobile,\n      isPlaying: this.player.isPlaying(),\n      width: this.uiContainerElement.width(),\n      documentWidth: document.body.clientWidth,\n    };\n\n    // Overwrite properties of the default context with passed in context properties\n    const switchingContext = { ...defaultContext, ...context };\n\n    // Fire the event and allow modification of the context before it is used to resolve the UI variant\n    this.events.onUiVariantResolve.dispatch(this, switchingContext);\n\n    let nextUiVariant: UIVariant = null;\n\n    // Select new UI variant\n    // If no variant condition is fulfilled, we switch to *no* UI\n    for (let uiVariant of this.uiVariants) {\n      const matchesCondition =\n        uiVariant.condition == null || uiVariant.condition(switchingContext) === true;\n      if (nextUiVariant == null && matchesCondition) {\n        nextUiVariant = uiVariant;\n      } else {\n        // hide all UIs besides the one which should be active\n        uiVariant.ui.hide();\n      }\n    }\n\n    this.switchToUiVariant(nextUiVariant, () => {\n      if (onShow) {\n        onShow(switchingContext);\n      }\n    });\n  }\n\n  private addUi(ui: InternalUIInstanceManager): void {\n    let dom = ui.getUI().getDomElement();\n    let player = ui.getWrappedPlayer();\n\n    ui.configureControls();\n    /* Append the UI DOM after configuration to avoid CSS transitions at initialization\n     * Example: Components are hidden during configuration and these hides may trigger CSS transitions that are\n     * undesirable at this time. */\n    this.uiContainerElement.append(dom);\n\n    // When the UI is loaded after a source was loaded, we need to tell the components to initialize themselves\n    if (player.getSource()) {\n      this.config.events.onUpdated.dispatch(this);\n    }\n\n    // Fire onConfigured after UI DOM elements are successfully added. When fired immediately, the DOM elements\n    // might not be fully configured and e.g. do not have a size.\n    // https://swizec.com/blog/how-to-properly-wait-for-dom-elements-to-show-up-in-modern-browsers/swizec/6663\n    if (window.requestAnimationFrame) {\n      requestAnimationFrame(() => {\n        ui.onConfigured.dispatch(ui.getUI());\n      });\n    } else {\n      // IE9 fallback\n      setTimeout(() => {\n        ui.onConfigured.dispatch(ui.getUI());\n      }, 0);\n    }\n  }\n\n  private releaseUi(ui: InternalUIInstanceManager): void {\n    ui.releaseControls();\n\n    const uiContainer = ui.getUI();\n    if (uiContainer.hasDomElement()) {\n      uiContainer.getDomElement().remove();\n    }\n\n    ui.clearEventHandlers();\n  }\n\n  release(): void {\n    for (let uiInstanceManager of this.uiInstanceManagers) {\n      this.releaseUi(uiInstanceManager);\n    }\n    this.managerPlayerWrapper.clearEventHandlers();\n    this.focusVisibilityTracker.release();\n  }\n\n  /**\n   * Fires just before UI variants are about to be resolved and the UI variant is possibly switched. It is fired when\n   * the switch is triggered from an automatic switch and when calling {@link resolveUiVariant}.\n   * Can be used to modify the {@link UIConditionContext} before resolving is done.\n   * @returns {EventDispatcher<UIManager, UIConditionContext>}\n   */\n  get onUiVariantResolve(): EventDispatcher<UIManager, UIConditionContext> {\n    return this.events.onUiVariantResolve;\n  }\n\n  /**\n   * Fires after the UIManager has switched to a different UI variant.\n   * @returns {EventDispatcher<UIManager, ActiveUiChangedArgs>}\n   */\n  get onActiveUiChanged(): EventDispatcher<UIManager, ActiveUiChangedArgs> {\n    return this.events.onActiveUiChanged;\n  }\n\n  /**\n   * The current active {@link UIInstanceManager}.\n   */\n  get activeUi(): UIInstanceManager {\n    return this.currentUi;\n  }\n\n  /**\n   * Returns the list of all added markers in undefined order.\n   */\n  getTimelineMarkers(): TimelineMarker[] {\n    return this.config.metadata.markers;\n  }\n\n  /**\n   * Adds a marker to the timeline. Does not check for duplicates/overlaps at the `time`.\n   */\n  addTimelineMarker(timelineMarker: TimelineMarker): void {\n    this.config.metadata.markers.push(timelineMarker);\n    this.config.events.onUpdated.dispatch(this);\n  }\n\n  /**\n   * Removes a marker from the timeline (by reference) and returns `true` if the marker has\n   * been part of the timeline and successfully removed, or `false` if the marker could not\n   * be found and thus not removed.\n   */\n  removeTimelineMarker(timelineMarker: TimelineMarker): boolean {\n    if (ArrayUtils.remove(this.config.metadata.markers, timelineMarker) === timelineMarker) {\n      this.config.events.onUpdated.dispatch(this);\n      return true;\n    }\n\n    return false;\n  }\n}\n\nexport interface SeekPreviewArgs extends NoArgs {\n  /**\n   * The timeline position in percent where the event originates from.\n   */\n  position: number;\n  /**\n   * The timeline marker associated with the current position, if existing.\n   */\n  marker?: SeekBarMarker;\n}\n\n/**\n * Encapsulates functionality to manage a UI instance. Used by the {@link UIManager} to manage multiple UI instances.\n */\nexport class UIInstanceManager {\n  private playerWrapper: PlayerWrapper;\n  private ui: UIContainer;\n  private config: InternalUIConfig;\n  protected spatialNavigation?: SpatialNavigation;\n\n  private events = {\n    onConfigured: new EventDispatcher<UIContainer, NoArgs>(),\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewArgs>(),\n    onSeeked: new EventDispatcher<SeekBar, NoArgs>(),\n    onComponentShow: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\n    onComponentHide: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\n    onControlsShow: new EventDispatcher<UIContainer, NoArgs>(),\n    onLoadingShow: new EventDispatcher<UIContainer, NoArgs>(),\n    onPreviewControlsHide: new EventDispatcher<UIContainer, CancelEventArgs>(),\n    onControlsHide: new EventDispatcher<UIContainer, NoArgs>(),\n    onLoadingHide: new EventDispatcher<UIContainer, NoArgs>(),\n    onRelease: new EventDispatcher<UIContainer, NoArgs>(),\n  };\n\n  constructor(\n    player: PlayerAPI,\n    ui: UIContainer,\n    config: InternalUIConfig,\n    spatialNavigation?: SpatialNavigation,\n  ) {\n    this.playerWrapper = new PlayerWrapper(player);\n    this.ui = ui;\n    this.config = config;\n    this.spatialNavigation = spatialNavigation;\n  }\n\n  getConfig(): InternalUIConfig {\n    return this.config;\n  }\n\n  getUI(): UIContainer {\n    return this.ui;\n  }\n\n  getPlayer(): PlayerAPI {\n    return this.playerWrapper.getPlayer();\n  }\n\n  /**\n   * Fires when the UI is fully configured and added to the DOM.\n   * @returns {EventDispatcher}\n   */\n  get onConfigured(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onConfigured;\n  }\n\n  /**\n   * Fires when a seek starts.\n   * @returns {EventDispatcher}\n   */\n  get onSeek(): EventDispatcher<SeekBar, NoArgs> {\n    return this.events.onSeek;\n  }\n\n  /**\n   * Fires when the seek timeline is scrubbed.\n   * @returns {EventDispatcher}\n   */\n  get onSeekPreview(): EventDispatcher<SeekBar, SeekPreviewArgs> {\n    return this.events.onSeekPreview;\n  }\n\n  /**\n   * Fires when a seek is finished.\n   * @returns {EventDispatcher}\n   */\n  get onSeeked(): EventDispatcher<SeekBar, NoArgs> {\n    return this.events.onSeeked;\n  }\n\n  /**\n   * Fires when a component is showing.\n   * @returns {EventDispatcher}\n   */\n  get onComponentShow(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\n    return this.events.onComponentShow;\n  }\n\n  /**\n   * Fires when a component is hiding.\n   * @returns {EventDispatcher}\n   */\n  get onComponentHide(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\n    return this.events.onComponentHide;\n  }\n\n  /**\n   * Fires when the UI controls are showing.\n   * @returns {EventDispatcher}\n   */\n  get onControlsShow(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onControlsShow;\n  }\n\n  /**\n   * Fires when the UI controls are showing.\n   * @returns {EventDispatcher}\n   */\n  get onLoadingShow(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onLoadingShow;\n  }\n\n  /**\n   * Fires before the UI controls are hiding to check if they are allowed to hide.\n   * @returns {EventDispatcher}\n   */\n  get onPreviewControlsHide(): EventDispatcher<UIContainer, CancelEventArgs> {\n    return this.events.onPreviewControlsHide;\n  }\n\n  /**\n   * Fires when the UI controls are hiding.\n   * @returns {EventDispatcher}\n   */\n  get onControlsHide(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onControlsHide;\n  }\n\n  /**\n   * Fires when the UI controls are hiding.\n   * @returns {EventDispatcher}\n   */\n  get onLoadingHide(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onLoadingHide;\n  }\n\n  /**\n   * Fires when the UI controls are released.\n   * @returns {EventDispatcher}\n   */\n  get onRelease(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onRelease;\n  }\n\n  protected clearEventHandlers(): void {\n    this.playerWrapper.clearEventHandlers();\n\n    let events = <any>this.events; // avoid TS7017\n    for (let event in events) {\n      let dispatcher = <EventDispatcher<Object, Object>>events[event];\n      dispatcher.unsubscribeAll();\n    }\n  }\n}\n\n/**\n * Extends the {@link UIInstanceManager} for internal use in the {@link UIManager} and provides access to functionality\n * that components receiving a reference to the {@link UIInstanceManager} should not have access to.\n */\nclass InternalUIInstanceManager extends UIInstanceManager {\n  private configured: boolean;\n  private released: boolean;\n\n  getWrappedPlayer(): WrappedPlayer {\n    // TODO find a non-hacky way to provide the WrappedPlayer to the UIManager without exporting it\n    // getPlayer() actually returns the WrappedPlayer but its return type is set to Player so the WrappedPlayer does\n    // not need to be exported\n    return <WrappedPlayer>this.getPlayer();\n  }\n\n  configureControls(): void {\n    this.configureControlsTree(this.getUI());\n    this.configured = true;\n  }\n\n  isConfigured(): boolean {\n    return this.configured;\n  }\n\n  private configureControlsTree(component: Component<ComponentConfig>) {\n    let configuredComponents: Component<ComponentConfig>[] = [];\n\n    UIUtils.traverseTree(component, (component) => {\n      // First, check if we have already configured a component, and throw an error if we did. Multiple configuration\n      // of the same component leads to unexpected UI behavior. Also, a component that is in the UI tree multiple\n      // times hints at a wrong UI structure.\n      // We could just skip configuration in such a case and not throw an exception, but enforcing a clean UI tree\n      // seems like the better choice.\n      for (let configuredComponent of configuredComponents) {\n        if (configuredComponent === component) {\n          // Write the component to the console to simplify identification of the culprit\n          // (e.g. by inspecting the config)\n          if (console) {\n            console.error('Circular reference in UI tree', component);\n          }\n\n          // Additionally throw an error, because this case must not happen and leads to unexpected UI behavior.\n          throw Error('Circular reference in UI tree: ' + component.constructor.name);\n        }\n      }\n\n      component.initialize();\n      component.configure(this.getPlayer(), this);\n      configuredComponents.push(component);\n    });\n  }\n\n  releaseControls(): void {\n    // Do not call release methods if the components have never been configured; this can result in exceptions\n    if (this.configured) {\n      this.onRelease.dispatch(this.getUI());\n      this.releaseControlsTree(this.getUI());\n      this.configured = false;\n    }\n    this.spatialNavigation?.release();\n    this.released = true;\n  }\n\n  isReleased(): boolean {\n    return this.released;\n  }\n\n  private releaseControlsTree(component: Component<ComponentConfig>) {\n    component.release();\n\n    if (component instanceof Container) {\n      for (let childComponent of component.getComponents()) {\n        this.releaseControlsTree(childComponent);\n      }\n    }\n  }\n\n  clearEventHandlers(): void {\n    super.clearEventHandlers();\n  }\n}\n\n/**\n * Extended interface of the {@link Player} for use in the UI.\n */\nexport interface WrappedPlayer extends PlayerAPI {\n  /**\n   * Fires an event on the player that targets all handlers in the UI but never enters the real player.\n   * @param event the event to fire\n   * @param data data to send with the event\n   */\n  fireEventInUI(event: PlayerEvent, data: {}): void;\n}\n\n/**\n * Wraps the player to track event handlers and provide a simple method to remove all registered event\n * handlers from the player.\n */\nexport class PlayerWrapper {\n  private player: PlayerAPI;\n  private wrapper: WrappedPlayer;\n\n  private eventHandlers: { [eventType: string]: PlayerEventCallback[] } = {};\n\n  constructor(player: PlayerAPI) {\n    this.player = player;\n\n    // Collect all members of the player (public API methods and properties of the player)\n    const objectProtoPropertyNames = Object.getOwnPropertyNames(Object.getPrototypeOf({}));\n    const namesToIgnore = ['constructor', ...objectProtoPropertyNames];\n    const members = getAllPropertyNames(player).filter(\n      (name) => namesToIgnore.indexOf(name) === -1,\n    );\n    // Split the members into methods and properties\n    let methods = <any[]>[];\n    let properties = <any[]>[];\n\n    for (let member of members) {\n      if (typeof (<any>player)[member] === 'function') {\n        methods.push(member);\n      } else {\n        properties.push(member);\n      }\n    }\n\n    // Create wrapper object\n    let wrapper = <any>{};\n\n    // Add function wrappers for all API methods that do nothing but calling the base method on the player\n    for (let method of methods) {\n      wrapper[method] = function () {\n        // console.log('called ' + member); // track method calls on the player\n        return (<any>player)[method].apply(player, arguments);\n      };\n    }\n\n    // Add all public properties of the player to the wrapper\n    for (let property of properties) {\n      // Get an eventually existing property descriptor to differentiate between plain properties and properties with\n      // getters/setters.\n      const propertyDescriptor = ((target: PlayerAPI) => {\n        while (target) {\n          const propertyDescriptor = Object.getOwnPropertyDescriptor(target, property);\n          if (propertyDescriptor) {\n            return propertyDescriptor;\n          }\n          // Check if the PropertyDescriptor exists on a child prototype in case we have an inheritance of the player\n          target = Object.getPrototypeOf(target);\n        }\n      })(player);\n\n      // If the property has getters/setters, wrap them accordingly...\n      if (propertyDescriptor && (propertyDescriptor.get || propertyDescriptor.set)) {\n        Object.defineProperty(wrapper, property, {\n          get: () => propertyDescriptor.get.call(player),\n          set: (value: any) => propertyDescriptor.set.call(player, value),\n        });\n      }\n      // ... else just transfer the property to the wrapper\n      else {\n        wrapper[property] = (<any>player)[property];\n      }\n    }\n\n    // Explicitly add a wrapper method for 'on' that adds added event handlers to the event list\n    wrapper.on = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\n      player.on(eventType, callback);\n\n      if (!this.eventHandlers[eventType]) {\n        this.eventHandlers[eventType] = [];\n      }\n\n      this.eventHandlers[eventType].push(callback);\n\n      return wrapper;\n    };\n\n    // Explicitly add a wrapper method for 'off' that removes removed event handlers from the event list\n    wrapper.off = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\n      player.off(eventType, callback);\n\n      if (this.eventHandlers[eventType]) {\n        ArrayUtils.remove(this.eventHandlers[eventType], callback);\n      }\n\n      return wrapper;\n    };\n\n    wrapper.fireEventInUI = (event: PlayerEvent, data: {}) => {\n      if (this.eventHandlers[event]) {\n        // check if there are handlers for this event registered\n        // Extend the data object with default values to convert it to a {@link PlayerEventBase} object.\n        let playerEventData = <PlayerEventBase>Object.assign(\n          {},\n          {\n            timestamp: Date.now(),\n            type: event,\n            // Add a marker property so the UI can detect UI-internal player events\n            uiSourced: true,\n          },\n          data,\n        );\n\n        // Execute the registered callbacks\n        for (let callback of this.eventHandlers[event]) {\n          callback(playerEventData);\n        }\n      }\n    };\n\n    this.wrapper = <WrappedPlayer>wrapper;\n  }\n\n  /**\n   * Returns a wrapped player object that can be used on place of the normal player object.\n   * @returns {WrappedPlayer} a wrapped player\n   */\n  getPlayer(): WrappedPlayer {\n    return this.wrapper;\n  }\n\n  /**\n   * Clears all registered event handlers from the player that were added through the wrapped player.\n   */\n  clearEventHandlers(): void {\n    try {\n      // Call the player API to check if the instance is still valid or already destroyed.\n      // This can be any call throwing the PlayerAPINotAvailableError when the player instance is destroyed.\n      this.player.getSource();\n    } catch (error) {\n      if (error instanceof this.player.exports.PlayerAPINotAvailableError) {\n        // We have detected that the player instance is already destroyed, so we clear the event handlers to avoid\n        // event handler unsubscription attempts (which would result in PlayerAPINotAvailableError errors).\n        this.eventHandlers = {};\n      }\n    }\n\n    for (let eventType in this.eventHandlers) {\n      for (let callback of this.eventHandlers[eventType]) {\n        this.player.off(eventType as PlayerEvent, callback);\n      }\n    }\n  }\n}\n\nfunction getAllPropertyNames(target: Object): string[] {\n  let names: string[] = [];\n\n  while (target) {\n    const newNames = Object.getOwnPropertyNames(target).filter(\n      (name) => names.indexOf(name) === -1,\n    );\n    names = names.concat(newNames);\n    // go up prototype chain\n    target = Object.getPrototypeOf(target);\n  }\n\n  return names;\n}\n","import {Component, ComponentConfig} from './components/component';\nimport {Container} from './components/container';\n\nexport namespace UIUtils {\n  export interface TreeTraversalCallback {\n    (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>): void;\n  }\n\n  export function traverseTree(component: Component<ComponentConfig>, visit: TreeTraversalCallback): void {\n    let recursiveTreeWalker = (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>) => {\n      visit(component, parent);\n\n      // If the current component is a container, visit it's children\n      if (component instanceof Container) {\n        for (let childComponent of component.getComponents()) {\n          recursiveTreeWalker(childComponent, component);\n        }\n      }\n    };\n\n    // Walk and configure the component tree\n    recursiveTreeWalker(component);\n  }\n\n  // From: https://github.com/nfriend/ts-keycode-enum/blob/master/Key.enum.ts\n  export enum KeyCode {\n    LeftArrow = 37,\n    UpArrow = 38,\n    RightArrow = 39,\n    DownArrow = 40,\n    Space = 32,\n    End = 35,\n    Home = 36,\n  }\n}\n","import { Event, EventDispatcher } from './eventdispatcher';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport interface VolumeSettingChangedArgs {\n  volume: number;\n  muted: boolean;\n}\n\n/**\n * Can be used to centrally manage and control the volume and mute state of the player from multiple components.\n */\nexport class VolumeController {\n\n  private static readonly issuerName = 'ui-volumecontroller';\n\n  private readonly events = {\n    onChanged: new EventDispatcher<VolumeController, VolumeSettingChangedArgs>(),\n  };\n\n  private storedVolume: number;\n\n  constructor(private readonly player: PlayerAPI) {\n    this.storeVolume();\n\n    const handler = () => {\n      this.onChangedEvent();\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, handler);\n    player.on(player.exports.PlayerEvent.VolumeChanged, handler);\n    player.on(player.exports.PlayerEvent.Muted, handler);\n    player.on(player.exports.PlayerEvent.Unmuted, handler);\n  }\n\n  setVolume(volume: number): void {\n    this.player.setVolume(volume, VolumeController.issuerName);\n  }\n\n  getVolume(): number {\n    return this.player.getVolume();\n  }\n\n  setMuted(muted: boolean): void {\n    if (muted) {\n      this.player.mute(VolumeController.issuerName);\n    } else {\n      this.player.unmute(VolumeController.issuerName);\n    }\n  }\n\n  toggleMuted(): void {\n    if (this.isMuted() || this.getVolume() === 0) {\n      // Unmuting from the mute or zero-volume state recalls the previously saved volume setting. Setting the\n      // volume automatically unmutes the player in v7.\n      this.recallVolume();\n    } else {\n      this.setMuted(true);\n    }\n  }\n\n  isMuted(): boolean {\n    return this.player.isMuted();\n  }\n\n  /**\n   * Stores (saves) the current volume so it can later be restored with {@link recallVolume}.\n   */\n  storeVolume(): void {\n    this.storedVolume = this.getVolume();\n  }\n\n  /**\n   * Recalls (sets) the volume previously stored with {@link storeVolume}.\n   */\n  recallVolume(): void {\n    this.setMuted(this.storedVolume === 0);\n    this.setVolume(this.storedVolume);\n  }\n\n  startTransition(): VolumeTransition {\n    return new VolumeTransition(this);\n  }\n\n  onChangedEvent() {\n    const playerMuted = this.isMuted();\n    const playerVolume = this.getVolume();\n\n    const uiMuted = playerMuted || playerVolume === 0;\n    const uiVolume = playerMuted ? 0 : playerVolume;\n\n    this.storeVolume();\n\n    this.events.onChanged.dispatch(this, { volume: uiVolume, muted: uiMuted });\n  }\n\n  /**\n   * Gets the event that is fired when the volume settings have changed.\n   */\n  get onChanged(): Event<VolumeController, VolumeSettingChangedArgs> {\n    return this.events.onChanged.getEvent();\n  }\n}\n\nexport class VolumeTransition {\n\n  constructor(private controller: VolumeController) {\n    // Store the volume at the beginning of a volume change so we can recall it later in case we set the volume to\n    // zero and actually mute the player.\n    controller.storeVolume();\n  }\n\n  update(volume: number): void {\n    // Update the volume while transitioning so the user has a \"live preview\" of the desired target volume\n    this.controller.setMuted(false);\n    this.controller.setVolume(volume);\n  }\n\n  finish(volume: number): void {\n    if (volume === 0) {\n      // When the volume is zero we essentially mute the volume so we recall the volume from the beginning of the\n      // transition and mute the player instead. Recalling is necessary to return to the actual audio volume\n      // when unmuting.\n      // We must first recall the volume and then mute, because recalling sets the volume on the player\n      // and setting a player volume > 0 unmutes the player in v7.\n      this.controller.recallVolume();\n      this.controller.setMuted(true);\n    } else {\n      this.controller.setMuted(false);\n      this.controller.setVolume(volume);\n      this.controller.storeVolume();\n    }\n  }\n}","import { SubtitleRegionContainer, SubtitleLabel } from './components/subtitleoverlay';\nimport { VTTProperties, VTTRegionProperties } from 'bitmovin-player/types/subtitles/vtt/API';\nimport { DOM, Size } from './dom';\n\n// Our default height of a line\nconst lineHeight = 28;\n\n// Default relative line height\nconst lineHeightPercent = 5;\nlet lineCount: number = 1;\n\nconst defaultLineNumber = 21; // Our default amount of lines\n\nenum Direction {\n  Top = 'top',\n  Bottom = 'bottom',\n  Left = 'left',\n  Right = 'right',\n}\n\nenum VttVerticalWriting {\n  GrowingRight = 'lr',\n  GrowingLeft = 'rl',\n}\n\ntype VerticalWritingDirection = Direction.Left | Direction.Right;\n\nconst DirectionPair = new Map<Direction, Direction>([\n  [Direction.Top, Direction.Bottom],\n  [Direction.Bottom, Direction.Top],\n  [Direction.Left, Direction.Right],\n  [Direction.Right, Direction.Left],\n]);\n\n/**\n * Sets the default standardized styles for the Cue Box\n * https://w3.org/TR/webvtt1/#applying-css-properties\n */\nconst setDefaultVttStyles = (cueContainerDom: DOM, vtt: VTTProperties) => {\n  if (vtt.region) {\n    cueContainerDom.css('position', 'relative');\n    cueContainerDom.css('unicode-bidi', 'plaintext');\n  } else {\n    cueContainerDom.css('position', 'absolute');\n    cueContainerDom.css('overflow-wrap', 'break-word');\n    cueContainerDom.css('overflow', 'hidden');\n    cueContainerDom.css('flex-flow', 'column');\n  }\n  cueContainerDom.css('display', 'inline-flex');\n};\n\n/**\n * Align the Cue Box's line\n * https://w3.org/TR/webvtt1/#webvtt-cue-line-alignment\n */\nconst setVttLineAlign = (\n  cueContainerDom: DOM,\n  { lineAlign }: VTTProperties,\n  direction: Direction,\n  relativeCueBoxPosition: number) => {\n  switch (lineAlign) {\n    case 'center':\n      setCssForCenterLineAlign(\n        cueContainerDom, direction, relativeCueBoxPosition);\n      break;\n    case 'end':\n      setCssForEndLineAlign(\n        cueContainerDom, direction, relativeCueBoxPosition);\n  }\n};\n\n/**\n * Defines the line positioning of the Cue Box\n * https://w3.org/TR/webvtt1/#webvtt-cue-line\n */\nconst setVttLine = (\n  cueContainerDom: DOM,\n  vtt: VTTProperties,\n  direction: Direction,\n  subtitleOverLaySize: Size,\n) => {\n  const overlayReferenceEdge = DirectionPair.get(direction);\n  if (vtt.line === 'auto' && vtt.vertical) {\n    cueContainerDom.css(overlayReferenceEdge, '0');\n    return;\n  }\n  if (vtt.line === 'auto' && !vtt.vertical) {\n    return;\n  }\n\n  let relativeLinePosition = parseFloat(vtt.line as string);\n\n  if (vtt.snapToLines) {\n    let targetLine = Number(vtt.line);\n    if (targetLine < 0) {\n      targetLine = defaultLineNumber + targetLine;\n    }\n\n    const lineHeight = subtitleOverLaySize.height / defaultLineNumber;\n    const absoluteLinePosition = lineHeight * targetLine;\n    relativeLinePosition = (100 * absoluteLinePosition) / subtitleOverLaySize.height;\n  }\n\n  if (vtt.lineAlign !== 'end')\n    cueContainerDom.css(\n      overlayReferenceEdge, `${relativeLinePosition}%`);\n  setVttLineAlign(cueContainerDom, vtt, direction, relativeLinePosition);\n};\n\n/**\n * Defines the writing direction of the Cue Box\n * https://w3.org/TR/webvtt1/#webvtt-cue-writing-direction\n */\nconst setVttWritingDirectionAndCueBoxPositioning = (\n  cueContainerDom: DOM, vtt: VTTProperties,\n  subtitleOverlaySize: Size,\n) => {\n  switch (vtt.vertical) {\n  case '':\n    cueContainerDom.css('writing-mode', 'horizontal-tb');\n    cueContainerDom.css(Direction.Bottom, '0');\n    setVttLine(cueContainerDom, vtt, Direction.Bottom, subtitleOverlaySize);\n    break;\n  case VttVerticalWriting.GrowingRight:\n    setCueBoxPositionForVerticalWriting(\n      cueContainerDom, Direction.Right, vtt, subtitleOverlaySize);\n    break;\n  case VttVerticalWriting.GrowingLeft:\n    setCueBoxPositionForVerticalWriting(\n      cueContainerDom, Direction.Left, vtt, subtitleOverlaySize);\n    break;\n  }\n};\n\nconst setCueBoxPositionForVerticalWriting = (\n  cueContainerDom: DOM,\n  direction: VerticalWritingDirection,\n  vtt: VTTProperties,\n  subtitleOverlaySize: Size,\n) => {\n    const writingMode = direction === Direction.Right ?\n      'vertical-lr' : 'vertical-rl';\n\n    cueContainerDom.css('writing-mode', writingMode);\n    cueContainerDom.css(Direction.Top, '0');\n    setVttLine(cueContainerDom, vtt, direction, subtitleOverlaySize);\n};\n\n/**\n * Defines the Cue position alignment\n * https://w3.org/TR/webvtt1/#webvtt-cue-position-alignment\n */\nconst setVttPositionAlign = (cueContainerDom: DOM, vtt: VTTProperties, direction: Direction) => {\n  // https://www.w3.org/TR/webvtt1/#webvtt-cue-position\n  if (vtt.position === 'auto') {\n    cueContainerDom.css(direction, '0');\n  } else {\n    switch (vtt.positionAlign) {\n      case 'line-left':\n        cueContainerDom.css(direction, `${vtt.position}%`);\n        cueContainerDom.css(DirectionPair.get(direction), 'auto');\n        cueContainerDom.css('justify-content', 'flex-start');\n        break;\n      case 'center':\n        cueContainerDom.css(direction, `${vtt.position - vtt.size / 2}%`);\n        cueContainerDom.css(DirectionPair.get(direction), 'auto');\n        cueContainerDom.css('justify-content', 'center');\n        break;\n      case 'line-right':\n        cueContainerDom.css(direction, 'auto');\n        cueContainerDom.css(DirectionPair.get(direction), `${100 - vtt.position}%`);\n        cueContainerDom.css('justify-content', 'flex-end');\n        break;\n      default:\n        cueContainerDom.css(direction, `${vtt.position}%`);\n        cueContainerDom.css('justify-content', 'flex-start');\n    }\n  }\n};\n\nconst countLines = (innerHtml: string) =>\n  innerHtml.split('<br />').length;\n\nconst setCssForCenterLineAlign = (\n  cueContainerDom: DOM,\n  direction: Direction,\n  relativeCueBoxPosition: number) => {\n  switch (direction) {\n    case Direction.Bottom:\n      cueContainerDom.css('transform', 'translateY(-50%)');\n      break;\n    case Direction.Left:\n      cueContainerDom.css('transform', 'translateX(50%)');\n      break;\n    case Direction.Right:\n      cueContainerDom.css('transform', 'translateX(-50%)');\n      break;\n  }\n};\n\nconst setCssForEndLineAlign = (\n  cueContainerDom: DOM,\n  direction: Direction,\n  offset: number) => {\n      const opositeToOverlayReferenceEdge = direction;\n      cueContainerDom.css(opositeToOverlayReferenceEdge, `${100 - offset}%`);\n};\n\nexport namespace VttUtils {\n  export const setVttCueBoxStyles = (\n    cueContainer: SubtitleLabel,\n    subtitleOverlaySize: Size,\n  ) => {\n    const vtt = cueContainer.vtt;\n    const cueContainerDom = cueContainer.getDomElement();\n\n\n    setDefaultVttStyles(cueContainerDom, vtt);\n\n    lineCount = countLines(cueContainer.getText());\n    setVttWritingDirectionAndCueBoxPositioning(cueContainerDom, vtt, subtitleOverlaySize);\n\n    // https://w3.org/TR/webvtt1/#webvtt-cue-text-alignment\n    const textAlign = vtt.align === 'middle' ? 'center' : vtt.align;\n    cueContainerDom.css('text-align', textAlign);\n\n    // https://w3.org/TR/webvtt1/#webvtt-cue-size\n    const containerSize = vtt.size;\n    if (vtt.vertical === '') {\n      cueContainerDom.css('width', `${containerSize}%`);\n      setVttPositionAlign(cueContainerDom, vtt, Direction.Left);\n    } else {\n      cueContainerDom.css('height', `${containerSize}%`);\n      setVttPositionAlign(cueContainerDom, vtt, Direction.Top);\n    }\n  };\n\n  /** https://www.w3.org/TR/webvtt1/#regions\n   *  https://www.speechpad.com/captions/webvtt#toc_16\n   */\n  export const setVttRegionStyles = (\n    regionContainer: SubtitleRegionContainer,\n    region: VTTRegionProperties,\n    overlaySize: Size,\n  ) => {\n    const regionContainerDom = regionContainer.getDomElement();\n    const regionPositionX = overlaySize.width * region.viewportAnchorX / 100 - ((overlaySize.width * region.width / 100) * region.regionAnchorX / 100);\n    const regionPositionY = overlaySize.height * region.viewportAnchorY / 100 - ((region.lines * lineHeight) * region.regionAnchorY / 100);\n    regionContainerDom.css('position', 'absolute');\n    regionContainerDom.css('overflow', 'hidden');\n    regionContainerDom.css('width', `${region.width}%`);\n    regionContainerDom.css(Direction.Left, `${regionPositionX}px`);\n    regionContainerDom.css(Direction.Right, 'unset');\n    regionContainerDom.css(Direction.Top, `${regionPositionY}px`);\n    regionContainerDom.css(Direction.Bottom, 'unset');\n    regionContainerDom.css('height', `${region.lines * lineHeight}px`);\n  };\n}\n"]}